{
    "hints": {
        "createPool(asset,asset)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addLiquidity(uint64,uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "removeLiquidity(uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "swap(uint64,uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "optIn()bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getLpBalance(account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDEwMDAgODAwMAogICAgYnl0ZWNibG9jayAicmVzZXJ2ZUEiICJyZXNlcnZlQiIgImxwXyIgInRvdGFsTHAiIDB4MTUxZjdjNzUgMHgwMCAiRkVFX05VTSIgIkZFRV9ERU4iIDB4MDY4MTAxICJhc3NldEEiICJhc3NldEIiCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIxCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUEgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGJ5dGVjXzAgLy8gInJlc2VydmVBIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIyCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUIgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGJ5dGVjXzEgLy8gInJlc2VydmVCIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIzCiAgICAvLyBwdWJsaWMgdG90YWxMcCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgYnl0ZWNfMyAvLyAidG90YWxMcCIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyOQogICAgLy8gcHJpdmF0ZSByZWFkb25seSBGRUVfTlVNID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDk5NykgfSk7IC8vIDAuMyUgZmVlCiAgICBieXRlYyA2IC8vICJGRUVfTlVNIgogICAgcHVzaGludCA5OTcgLy8gOTk3CiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czozMAogICAgLy8gcHJpdmF0ZSByZWFkb25seSBGRUVfREVOID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDEwMDApIH0pOwogICAgYnl0ZWMgNyAvLyAiRkVFX0RFTiIKICAgIGludGNfMiAvLyAxMDAwCiAgICBhcHBfZ2xvYmFsX3B1dAoKbWFpbl9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE3CiAgICAvLyBleHBvcnQgY2xhc3MgQU1NQ29udHJhY3QgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAMTMKICAgIHB1c2hieXRlc3MgMHgyMWQ2ZDBiNiAweGQ3MGFkYWJiIDB4ZTQ5NzE5NjMgMHhmZWU0NGFlMCAweDQzZTlkNzM5IDB4ODI0MWJmM2YgLy8gbWV0aG9kICJjcmVhdGVQb29sKGFzc2V0LGFzc2V0KWJvb2wiLCBtZXRob2QgImFkZExpcXVpZGl0eSh1aW50NjQsdWludDY0KWJvb2wiLCBtZXRob2QgInJlbW92ZUxpcXVpZGl0eSh1aW50NjQpYm9vbCIsIG1ldGhvZCAic3dhcCh1aW50NjQsdWludDY0KWJvb2wiLCBtZXRob2QgIm9wdEluKClib29sIiwgbWV0aG9kICJnZXRMcEJhbGFuY2UoYWNjb3VudCl1aW50NjQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2NyZWF0ZVBvb2xfcm91dGVANSBtYWluX2FkZExpcXVpZGl0eV9yb3V0ZUA2IG1haW5fcmVtb3ZlTGlxdWlkaXR5X3JvdXRlQDcgbWFpbl9zd2FwX3JvdXRlQDggbWFpbl9vcHRJbl9yb3V0ZUA5IG1haW5fZ2V0THBCYWxhbmNlX3JvdXRlQDEwCgptYWluX2FmdGVyX2lmX2Vsc2VAMTc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE3CiAgICAvLyBleHBvcnQgY2xhc3MgQU1NQ29udHJhY3QgZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX2dldExwQmFsYW5jZV9yb3V0ZUAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTgwCiAgICAvLyBwdWJsaWMgZ2V0THBCYWxhbmNlKGFjY291bnQ6IEFjY291bnQpOiB1aW50NjQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE3CiAgICAvLyBleHBvcnQgY2xhc3MgQU1NQ29udHJhY3QgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxODAKICAgIC8vIHB1YmxpYyBnZXRMcEJhbGFuY2UoYWNjb3VudDogQWNjb3VudCk6IHVpbnQ2NCB7CiAgICBjYWxsc3ViIGdldExwQmFsYW5jZQogICAgaXRvYgogICAgYnl0ZWMgNCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9vcHRJbl9yb3V0ZUA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNzAKICAgIC8vIHB1YmxpYyBvcHRJbigpOiBib29sZWFuIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBvcHRJbgogICAgYnl0ZWMgNSAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjIDQgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fc3dhcF9yb3V0ZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMjYtMTI5CiAgICAvLyBwdWJsaWMgc3dhcCgKICAgIC8vICAgc2VuZEFzc2V0VHlwZTogdWludDY0LCAvLyAxIGlmIGFzc2V0X2EgLT4gYiwgMiBpZiBhc3NldF9iIC0+IGEKICAgIC8vICAgc3dhcEFtb3VudDogdWludDY0CiAgICAvLyApOiBib29sZWFuIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNwogICAgLy8gZXhwb3J0IGNsYXNzIEFNTUNvbnRyYWN0IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMjYtMTI5CiAgICAvLyBwdWJsaWMgc3dhcCgKICAgIC8vICAgc2VuZEFzc2V0VHlwZTogdWludDY0LCAvLyAxIGlmIGFzc2V0X2EgLT4gYiwgMiBpZiBhc3NldF9iIC0+IGEKICAgIC8vICAgc3dhcEFtb3VudDogdWludDY0CiAgICAvLyApOiBib29sZWFuIHsKICAgIGNhbGxzdWIgc3dhcAogICAgYnl0ZWMgNSAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjIDQgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fcmVtb3ZlTGlxdWlkaXR5X3JvdXRlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjEwMAogICAgLy8gcHVibGljIHJlbW92ZUxpcXVpZGl0eShscFRvQnVybjogdWludDY0KTogYm9vbGVhbiB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTcKICAgIC8vIGV4cG9ydCBjbGFzcyBBTU1Db250cmFjdCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTAwCiAgICAvLyBwdWJsaWMgcmVtb3ZlTGlxdWlkaXR5KGxwVG9CdXJuOiB1aW50NjQpOiBib29sZWFuIHsKICAgIGNhbGxzdWIgcmVtb3ZlTGlxdWlkaXR5CiAgICBieXRlYyA1IC8vIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZWMgNCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9hZGRMaXF1aWRpdHlfcm91dGVANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6NTUtNTgKICAgIC8vIHB1YmxpYyBhZGRMaXF1aWRpdHkoCiAgICAvLyAgIGFzc2V0QUFtb3VudDogdWludDY0LAogICAgLy8gICBhc3NldEJBbW91bnQ6IHVpbnQ2NAogICAgLy8gKTogYm9vbGVhbiB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTcKICAgIC8vIGV4cG9ydCBjbGFzcyBBTU1Db250cmFjdCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIGJ0b2kKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6NTUtNTgKICAgIC8vIHB1YmxpYyBhZGRMaXF1aWRpdHkoCiAgICAvLyAgIGFzc2V0QUFtb3VudDogdWludDY0LAogICAgLy8gICBhc3NldEJBbW91bnQ6IHVpbnQ2NAogICAgLy8gKTogYm9vbGVhbiB7CiAgICBjYWxsc3ViIGFkZExpcXVpZGl0eQogICAgYnl0ZWMgNSAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjIDQgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fY3JlYXRlUG9vbF9yb3V0ZUA1OgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czozMwogICAgLy8gcHVibGljIGNyZWF0ZVBvb2woYXNzZXRJZEE6IEFzc2V0LCBhc3NldElkQjogQXNzZXQpOiBib29sZWFuIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNwogICAgLy8gZXhwb3J0IGNsYXNzIEFNTUNvbnRyYWN0IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYXMgQXNzZXRzCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICB0eG5hcyBBc3NldHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MzMKICAgIC8vIHB1YmxpYyBjcmVhdGVQb29sKGFzc2V0SWRBOiBBc3NldCwgYXNzZXRJZEI6IEFzc2V0KTogYm9vbGVhbiB7CiAgICBjYWxsc3ViIGNyZWF0ZVBvb2wKICAgIGJ5dGVjIDUgLy8gMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlYyA0IC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2JhcmVfcm91dGluZ0AxMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTcKICAgIC8vIGV4cG9ydCBjbGFzcyBBTU1Db250cmFjdCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgIGJueiBtYWluX2FmdGVyX2lmX2Vsc2VAMTcKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICAhCiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIGNyZWF0aW5nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgoKLy8gX3B1eWFfbGliLnV0aWwuZW5zdXJlX2J1ZGdldChyZXF1aXJlZF9idWRnZXQ6IHVpbnQ2NCwgZmVlX3NvdXJjZTogdWludDY0KSAtPiB2b2lkOgplbnN1cmVfYnVkZ2V0OgogICAgcHJvdG8gMiAwCiAgICBmcmFtZV9kaWcgLTIKICAgIHB1c2hpbnQgMTAgLy8gMTAKICAgICsKCmVuc3VyZV9idWRnZXRfd2hpbGVfdG9wQDE6CiAgICBmcmFtZV9kaWcgMAogICAgZ2xvYmFsIE9wY29kZUJ1ZGdldAogICAgPgogICAgYnogZW5zdXJlX2J1ZGdldF9hZnRlcl93aGlsZUA3CiAgICBpdHhuX2JlZ2luCiAgICBwdXNoaW50IDYgLy8gYXBwbAogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgcHVzaGludCA1IC8vIERlbGV0ZUFwcGxpY2F0aW9uCiAgICBpdHhuX2ZpZWxkIE9uQ29tcGxldGlvbgogICAgYnl0ZWMgOCAvLyAweDA2ODEwMQogICAgaXR4bl9maWVsZCBBcHByb3ZhbFByb2dyYW0KICAgIGJ5dGVjIDggLy8gMHgwNjgxMDEKICAgIGl0eG5fZmllbGQgQ2xlYXJTdGF0ZVByb2dyYW0KICAgIGZyYW1lX2RpZyAtMQogICAgc3dpdGNoIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMEAzIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMUA0CgplbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlX25leHRANjoKICAgIGl0eG5fc3VibWl0CiAgICBiIGVuc3VyZV9idWRnZXRfd2hpbGVfdG9wQDEKCmVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMUA0OgogICAgZ2xvYmFsIE1pblR4bkZlZQogICAgaXR4bl9maWVsZCBGZWUKICAgIGIgZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV9uZXh0QDYKCmVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfMEAzOgogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICBiIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfbmV4dEA2CgplbnN1cmVfYnVkZ2V0X2FmdGVyX3doaWxlQDc6CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjpBTU1Db250cmFjdC5jcmVhdGVQb29sKGFzc2V0SWRBOiB1aW50NjQsIGFzc2V0SWRCOiB1aW50NjQpIC0+IHVpbnQ2NDoKY3JlYXRlUG9vbDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MzMKICAgIC8vIHB1YmxpYyBjcmVhdGVQb29sKGFzc2V0SWRBOiBBc3NldCwgYXNzZXRJZEI6IEFzc2V0KTogYm9vbGVhbiB7CiAgICBwcm90byAyIDEKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MzQKICAgIC8vIGVuc3VyZUJ1ZGdldCgzMDAwKQogICAgcHVzaGludCAzMDAwIC8vIDMwMDAKICAgIGludGNfMCAvLyAwCiAgICBjYWxsc3ViIGVuc3VyZV9idWRnZXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTkKICAgIC8vIHB1YmxpYyBhc3NldEEgPSBHbG9iYWxTdGF0ZTxBc3NldD4oKQogICAgYnl0ZWMgOSAvLyAiYXNzZXRBIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czozNQogICAgLy8gdGhpcy5hc3NldEEudmFsdWUgPSBhc3NldElkQTsKICAgIGZyYW1lX2RpZyAtMgogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjAKICAgIC8vIHB1YmxpYyBhc3NldEIgPSBHbG9iYWxTdGF0ZTxBc3NldD4oKQogICAgYnl0ZWMgMTAgLy8gImFzc2V0QiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MzYKICAgIC8vIHRoaXMuYXNzZXRCLnZhbHVlID0gYXNzZXRJZEI7CiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjM4CiAgICAvLyB0aGlzLm9wdEluVG9Bc3NldChhc3NldElkQSk7CiAgICBmcmFtZV9kaWcgLTIKICAgIGNhbGxzdWIgb3B0SW5Ub0Fzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjM5CiAgICAvLyB0aGlzLm9wdEluVG9Bc3NldChhc3NldElkQik7CiAgICBmcmFtZV9kaWcgLTEKICAgIGNhbGxzdWIgb3B0SW5Ub0Fzc2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjQwCiAgICAvLyByZXR1cm4gdHJ1ZQogICAgaW50Y18xIC8vIDEKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6OkFNTUNvbnRyYWN0Lm9wdEluVG9Bc3NldChhc3NldElkOiB1aW50NjQpIC0+IHZvaWQ6Cm9wdEluVG9Bc3NldDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6NDQKICAgIC8vIHByaXZhdGUgb3B0SW5Ub0Fzc2V0KGFzc2V0SWQ6IEFzc2V0KTogdm9pZCB7CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6NDUtNTEKICAgIC8vIGl0eG4uYXNzZXRUcmFuc2Zlcih7CiAgICAvLyAgIGFzc2V0QW1vdW50OiAwLAogICAgLy8gICBhc3NldFJlY2VpdmVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIC8vICAgZmVlOiAwLAogICAgLy8gICB4ZmVyQXNzZXQ6IGFzc2V0SWQsCiAgICAvLyAKICAgIC8vIH0pLnN1Ym1pdCgpOwogICAgaXR4bl9iZWdpbgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo0NwogICAgLy8gYXNzZXRSZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgZnJhbWVfZGlnIC0xCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgaXR4bl9maWVsZCBBc3NldFJlY2VpdmVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjQ2CiAgICAvLyBhc3NldEFtb3VudDogMCwKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEFzc2V0QW1vdW50CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjQ1LTUxCiAgICAvLyBpdHhuLmFzc2V0VHJhbnNmZXIoewogICAgLy8gICBhc3NldEFtb3VudDogMCwKICAgIC8vICAgYXNzZXRSZWNlaXZlcjogR2xvYmFsLmN1cnJlbnRBcHBsaWNhdGlvbkFkZHJlc3MsCiAgICAvLyAgIGZlZTogMCwKICAgIC8vICAgeGZlckFzc2V0OiBhc3NldElkLAogICAgLy8gCiAgICAvLyB9KS5zdWJtaXQoKTsKICAgIHB1c2hpbnQgNCAvLyA0CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjQ4CiAgICAvLyBmZWU6IDAsCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6NDUtNTEKICAgIC8vIGl0eG4uYXNzZXRUcmFuc2Zlcih7CiAgICAvLyAgIGFzc2V0QW1vdW50OiAwLAogICAgLy8gICBhc3NldFJlY2VpdmVyOiBHbG9iYWwuY3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcywKICAgIC8vICAgZmVlOiAwLAogICAgLy8gICB4ZmVyQXNzZXQ6IGFzc2V0SWQsCiAgICAvLyAKICAgIC8vIH0pLnN1Ym1pdCgpOwogICAgaXR4bl9zdWJtaXQKICAgIHJldHN1YgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6OkFNTUNvbnRyYWN0LmFkZExpcXVpZGl0eShhc3NldEFBbW91bnQ6IHVpbnQ2NCwgYXNzZXRCQW1vdW50OiB1aW50NjQpIC0+IHVpbnQ2NDoKYWRkTGlxdWlkaXR5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo1NS01OAogICAgLy8gcHVibGljIGFkZExpcXVpZGl0eSgKICAgIC8vICAgYXNzZXRBQW1vdW50OiB1aW50NjQsCiAgICAvLyAgIGFzc2V0QkFtb3VudDogdWludDY0CiAgICAvLyApOiBib29sZWFuIHsKICAgIHByb3RvIDIgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo1OQogICAgLy8gZW5zdXJlQnVkZ2V0KDgwMDApCiAgICBpbnRjXzMgLy8gODAwMAogICAgaW50Y18wIC8vIDAKICAgIGNhbGxzdWIgZW5zdXJlX2J1ZGdldAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo2MQogICAgLy8gYXNzZXJ0KEdsb2JhbC5ncm91cFNpemUgPT09IDMsICJFeHBlY3RlZCBncm91cCBzaXplIG9mIDMgKGFwcCBjYWxsICsgMiBhc3NldCB0cmFuc2ZlcnMpIik7CiAgICBnbG9iYWwgR3JvdXBTaXplCiAgICBwdXNoaW50IDMgLy8gMwogICAgPT0KICAgIGFzc2VydCAvLyBFeHBlY3RlZCBncm91cCBzaXplIG9mIDMgKGFwcCBjYWxsICsgMiBhc3NldCB0cmFuc2ZlcnMpCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE5CiAgICAvLyBwdWJsaWMgYXNzZXRBID0gR2xvYmFsU3RhdGU8QXNzZXQ+KCkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyA5IC8vICJhc3NldEEiCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjY1CiAgICAvLyBhc3NlcnQodGhpcy5hc3NldEEuaGFzVmFsdWUgJiYgdGhpcy5hc3NldEIuaGFzVmFsdWUsICJQb29sIG5vdCBpbml0aWFsaXplZCIpCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYnVyeSAxCiAgICBieiBhZGRMaXF1aWRpdHlfYm9vbF9mYWxzZUAzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIwCiAgICAvLyBwdWJsaWMgYXNzZXRCID0gR2xvYmFsU3RhdGU8QXNzZXQ+KCkKICAgIGludGNfMCAvLyAwCiAgICBieXRlYyAxMCAvLyAiYXNzZXRCIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo2NQogICAgLy8gYXNzZXJ0KHRoaXMuYXNzZXRBLmhhc1ZhbHVlICYmIHRoaXMuYXNzZXRCLmhhc1ZhbHVlLCAiUG9vbCBub3QgaW5pdGlhbGl6ZWQiKQogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGJ1cnkgMQogICAgYnogYWRkTGlxdWlkaXR5X2Jvb2xfZmFsc2VAMwogICAgaW50Y18xIC8vIDEKCmFkZExpcXVpZGl0eV9ib29sX21lcmdlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjY1CiAgICAvLyBhc3NlcnQodGhpcy5hc3NldEEuaGFzVmFsdWUgJiYgdGhpcy5hc3NldEIuaGFzVmFsdWUsICJQb29sIG5vdCBpbml0aWFsaXplZCIpCiAgICBhc3NlcnQgLy8gUG9vbCBub3QgaW5pdGlhbGl6ZWQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjMKICAgIC8vIHB1YmxpYyB0b3RhbExwID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAidG90YWxMcCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjY3CiAgICAvLyBpZiAodGhpcy50b3RhbExwLnZhbHVlID09PSBVaW50NjQoMCkpIHsKICAgIGJueiBhZGRMaXF1aWRpdHlfZWxzZV9ib2R5QDYKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjEKICAgIC8vIHB1YmxpYyByZXNlcnZlQSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgYnl0ZWNfMCAvLyAicmVzZXJ2ZUEiCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjY5CiAgICAvLyB0aGlzLnJlc2VydmVBLnZhbHVlID0gYXNzZXRBQW1vdW50CiAgICBmcmFtZV9kaWcgLTIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIyCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUIgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGJ5dGVjXzEgLy8gInJlc2VydmVCIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo3MAogICAgLy8gdGhpcy5yZXNlcnZlQi52YWx1ZSA9IGFzc2V0QkFtb3VudAogICAgZnJhbWVfZGlnIC0xCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMwogICAgLy8gcHVibGljIHRvdGFsTHAgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGJ5dGVjXzMgLy8gInRvdGFsTHAiCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjcxCiAgICAvLyB0aGlzLnRvdGFsTHAudmFsdWUgPSBVaW50NjQoMTAwMCkKICAgIGludGNfMiAvLyAxMDAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyNgogICAgLy8gcHVibGljIGxwQmFsYW5jZXMgPSBCb3hNYXA8QWNjb3VudCwgdWludDY0Pih7IGtleVByZWZpeDogQnl0ZXNgbHBfYCB9KQogICAgYnl0ZWNfMiAvLyAibHBfIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo3NAogICAgLy8gdGhpcy5scEJhbGFuY2VzKFR4bi5zZW5kZXIpLnZhbHVlID0gVWludDY0KDEwMDApCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjI2CiAgICAvLyBwdWJsaWMgbHBCYWxhbmNlcyA9IEJveE1hcDxBY2NvdW50LCB1aW50NjQ+KHsga2V5UHJlZml4OiBCeXRlc2BscF9gIH0pCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6NzQKICAgIC8vIHRoaXMubHBCYWxhbmNlcyhUeG4uc2VuZGVyKS52YWx1ZSA9IFVpbnQ2NCgxMDAwKQogICAgaW50Y18yIC8vIDEwMDAKICAgIGl0b2IKICAgIGJveF9wdXQKCmFkZExpcXVpZGl0eV9hZnRlcl9pZl9lbHNlQDEwOgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo5NgogICAgLy8gcmV0dXJuIHRydWUKICAgIGludGNfMSAvLyAxCiAgICByZXRzdWIKCmFkZExpcXVpZGl0eV9lbHNlX2JvZHlANjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjMKICAgIC8vIHB1YmxpYyB0b3RhbExwID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAidG90YWxMcCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjc3CiAgICAvLyBjb25zdCBscE1pbnRlZEE6IHVpbnQ2NCA9IGFzc2V0QUFtb3VudCAqIHRoaXMudG90YWxMcC52YWx1ZSAvIHRoaXMucmVzZXJ2ZUEudmFsdWUKICAgIGZyYW1lX2RpZyAtMgogICAgKgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMQogICAgLy8gcHVibGljIHJlc2VydmVBID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAicmVzZXJ2ZUEiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo3NwogICAgLy8gY29uc3QgbHBNaW50ZWRBOiB1aW50NjQgPSBhc3NldEFBbW91bnQgKiB0aGlzLnRvdGFsTHAudmFsdWUgLyB0aGlzLnJlc2VydmVBLnZhbHVlCiAgICAvCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIzCiAgICAvLyBwdWJsaWMgdG90YWxMcCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gInRvdGFsTHAiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo3OAogICAgLy8gY29uc3QgbHBNaW50ZWRCOiB1aW50NjQgPSBhc3NldEJBbW91bnQgKiB0aGlzLnRvdGFsTHAudmFsdWUgLyB0aGlzLnJlc2VydmVCLnZhbHVlCiAgICBmcmFtZV9kaWcgLTEKICAgICoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjIKICAgIC8vIHB1YmxpYyByZXNlcnZlQiA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gInJlc2VydmVCIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6NzgKICAgIC8vIGNvbnN0IGxwTWludGVkQjogdWludDY0ID0gYXNzZXRCQW1vdW50ICogdGhpcy50b3RhbExwLnZhbHVlIC8gdGhpcy5yZXNlcnZlQi52YWx1ZQogICAgLwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo4MQogICAgLy8gY29uc3QgbHBUb01pbnQgPSBscE1pbnRlZEEgPCBscE1pbnRlZEIgPyBscE1pbnRlZEEgOiBscE1pbnRlZEIKICAgIGR1cDIKICAgIDwKICAgIHN3YXAKICAgIGNvdmVyIDIKICAgIHNlbGVjdAogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIxCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUEgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJyZXNlcnZlQSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjg0CiAgICAvLyB0aGlzLnJlc2VydmVBLnZhbHVlICs9IGFzc2V0QUFtb3VudAogICAgZnJhbWVfZGlnIC0yCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIxCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUEgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGJ5dGVjXzAgLy8gInJlc2VydmVBIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo4NAogICAgLy8gdGhpcy5yZXNlcnZlQS52YWx1ZSArPSBhc3NldEFBbW91bnQKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIyCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUIgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJyZXNlcnZlQiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjg1CiAgICAvLyB0aGlzLnJlc2VydmVCLnZhbHVlICs9IGFzc2V0QkFtb3VudAogICAgZnJhbWVfZGlnIC0xCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIyCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUIgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGJ5dGVjXzEgLy8gInJlc2VydmVCIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo4NQogICAgLy8gdGhpcy5yZXNlcnZlQi52YWx1ZSArPSBhc3NldEJBbW91bnQKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIzCiAgICAvLyBwdWJsaWMgdG90YWxMcCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gInRvdGFsTHAiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo4NgogICAgLy8gdGhpcy50b3RhbExwLnZhbHVlICs9IGxwVG9NaW50CiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIzCiAgICAvLyBwdWJsaWMgdG90YWxMcCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgYnl0ZWNfMyAvLyAidG90YWxMcCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6ODYKICAgIC8vIHRoaXMudG90YWxMcC52YWx1ZSArPSBscFRvTWludAogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjYKICAgIC8vIHB1YmxpYyBscEJhbGFuY2VzID0gQm94TWFwPEFjY291bnQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6IEJ5dGVzYGxwX2AgfSkKICAgIGJ5dGVjXzIgLy8gImxwXyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6ODkKICAgIC8vIGlmICghdGhpcy5scEJhbGFuY2VzKFR4bi5zZW5kZXIpLmV4aXN0cykgewogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyNgogICAgLy8gcHVibGljIGxwQmFsYW5jZXMgPSBCb3hNYXA8QWNjb3VudCwgdWludDY0Pih7IGtleVByZWZpeDogQnl0ZXNgbHBfYCB9KQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjg5CiAgICAvLyBpZiAoIXRoaXMubHBCYWxhbmNlcyhUeG4uc2VuZGVyKS5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYm56IGFkZExpcXVpZGl0eV9lbHNlX2JvZHlAOAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyNgogICAgLy8gcHVibGljIGxwQmFsYW5jZXMgPSBCb3hNYXA8QWNjb3VudCwgdWludDY0Pih7IGtleVByZWZpeDogQnl0ZXNgbHBfYCB9KQogICAgYnl0ZWNfMiAvLyAibHBfIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo5MAogICAgLy8gdGhpcy5scEJhbGFuY2VzKFR4bi5zZW5kZXIpLnZhbHVlID0gbHBUb01pbnQKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjYKICAgIC8vIHB1YmxpYyBscEJhbGFuY2VzID0gQm94TWFwPEFjY291bnQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6IEJ5dGVzYGxwX2AgfSkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo5MAogICAgLy8gdGhpcy5scEJhbGFuY2VzKFR4bi5zZW5kZXIpLnZhbHVlID0gbHBUb01pbnQKICAgIHN3YXAKICAgIGl0b2IKICAgIGJveF9wdXQKICAgIGIgYWRkTGlxdWlkaXR5X2FmdGVyX2lmX2Vsc2VAMTAKCmFkZExpcXVpZGl0eV9lbHNlX2JvZHlAODoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjYKICAgIC8vIHB1YmxpYyBscEJhbGFuY2VzID0gQm94TWFwPEFjY291bnQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6IEJ5dGVzYGxwX2AgfSkKICAgIGJ5dGVjXzIgLy8gImxwXyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6OTIKICAgIC8vIHRoaXMubHBCYWxhbmNlcyhUeG4uc2VuZGVyKS52YWx1ZSArPSBscFRvTWludAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyNgogICAgLy8gcHVibGljIGxwQmFsYW5jZXMgPSBCb3hNYXA8QWNjb3VudCwgdWludDY0Pih7IGtleVByZWZpeDogQnl0ZXNgbHBfYCB9KQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjkyCiAgICAvLyB0aGlzLmxwQmFsYW5jZXMoVHhuLnNlbmRlcikudmFsdWUgKz0gbHBUb01pbnQKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGJ0b2kKICAgIHN3YXAKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjI2CiAgICAvLyBwdWJsaWMgbHBCYWxhbmNlcyA9IEJveE1hcDxBY2NvdW50LCB1aW50NjQ+KHsga2V5UHJlZml4OiBCeXRlc2BscF9gIH0pCiAgICBieXRlY18yIC8vICJscF8iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjkyCiAgICAvLyB0aGlzLmxwQmFsYW5jZXMoVHhuLnNlbmRlcikudmFsdWUgKz0gbHBUb01pbnQKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjYKICAgIC8vIHB1YmxpYyBscEJhbGFuY2VzID0gQm94TWFwPEFjY291bnQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6IEJ5dGVzYGxwX2AgfSkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo5MgogICAgLy8gdGhpcy5scEJhbGFuY2VzKFR4bi5zZW5kZXIpLnZhbHVlICs9IGxwVG9NaW50CiAgICBzd2FwCiAgICB1bmNvdmVyIDIKICAgICsKICAgIGl0b2IKICAgIGJveF9wdXQKICAgIGIgYWRkTGlxdWlkaXR5X2FmdGVyX2lmX2Vsc2VAMTAKCmFkZExpcXVpZGl0eV9ib29sX2ZhbHNlQDM6CiAgICBpbnRjXzAgLy8gMAogICAgYiBhZGRMaXF1aWRpdHlfYm9vbF9tZXJnZUA0CgoKLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo6QU1NQ29udHJhY3QucmVtb3ZlTGlxdWlkaXR5KGxwVG9CdXJuOiB1aW50NjQpIC0+IHVpbnQ2NDoKcmVtb3ZlTGlxdWlkaXR5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMDAKICAgIC8vIHB1YmxpYyByZW1vdmVMaXF1aWRpdHkobHBUb0J1cm46IHVpbnQ2NCk6IGJvb2xlYW4gewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjEwMQogICAgLy8gZW5zdXJlQnVkZ2V0KDgwMDApCiAgICBpbnRjXzMgLy8gODAwMAogICAgaW50Y18wIC8vIDAKICAgIGNhbGxzdWIgZW5zdXJlX2J1ZGdldAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyNgogICAgLy8gcHVibGljIGxwQmFsYW5jZXMgPSBCb3hNYXA8QWNjb3VudCwgdWludDY0Pih7IGtleVByZWZpeDogQnl0ZXNgbHBfYCB9KQogICAgYnl0ZWNfMiAvLyAibHBfIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMDIKICAgIC8vIGFzc2VydCh0aGlzLmxwQmFsYW5jZXMoVHhuLnNlbmRlcikuZXhpc3RzLCAiTm8gTFAgYmFsYW5jZSBmb3VuZCIpCiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjI2CiAgICAvLyBwdWJsaWMgbHBCYWxhbmNlcyA9IEJveE1hcDxBY2NvdW50LCB1aW50NjQ+KHsga2V5UHJlZml4OiBCeXRlc2BscF9gIH0pCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTAyCiAgICAvLyBhc3NlcnQodGhpcy5scEJhbGFuY2VzKFR4bi5zZW5kZXIpLmV4aXN0cywgIk5vIExQIGJhbGFuY2UgZm91bmQiKQogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBhc3NlcnQgLy8gTm8gTFAgYmFsYW5jZSBmb3VuZAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyNgogICAgLy8gcHVibGljIGxwQmFsYW5jZXMgPSBCb3hNYXA8QWNjb3VudCwgdWludDY0Pih7IGtleVByZWZpeDogQnl0ZXNgbHBfYCB9KQogICAgYnl0ZWNfMiAvLyAibHBfIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMDMKICAgIC8vIGNvbnN0IHVzZXJMcCA9IHRoaXMubHBCYWxhbmNlcyhUeG4uc2VuZGVyKS52YWx1ZQogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyNgogICAgLy8gcHVibGljIGxwQmFsYW5jZXMgPSBCb3hNYXA8QWNjb3VudCwgdWludDY0Pih7IGtleVByZWZpeDogQnl0ZXNgbHBfYCB9KQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjEwMwogICAgLy8gY29uc3QgdXNlckxwID0gdGhpcy5scEJhbGFuY2VzKFR4bi5zZW5kZXIpLnZhbHVlCiAgICBib3hfZ2V0CiAgICBzd2FwCiAgICBidG9pCiAgICBzd2FwCiAgICBhc3NlcnQgLy8gQm94IG11c3QgaGF2ZSB2YWx1ZQogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMDYKICAgIC8vIGFzc2VydChscFRvQnVybiA+IFVpbnQ2NCgwKSwgIk11c3QgYnVybiBwb3NpdGl2ZSBhbW91bnQiKQogICAgZnJhbWVfZGlnIC0xCiAgICBhc3NlcnQgLy8gTXVzdCBidXJuIHBvc2l0aXZlIGFtb3VudAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMDcKICAgIC8vIGFzc2VydCh1c2VyTHAgPj0gbHBUb0J1cm4sICJJbnN1ZmZpY2llbnQgTFAgYmFsYW5jZSIpCiAgICBmcmFtZV9kaWcgLTEKICAgID49CiAgICBhc3NlcnQgLy8gSW5zdWZmaWNpZW50IExQIGJhbGFuY2UKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjEKICAgIC8vIHB1YmxpYyByZXNlcnZlQSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gInJlc2VydmVBIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTEwCiAgICAvLyBjb25zdCBhbXRBOiB1aW50NjQgPSB0aGlzLnJlc2VydmVBLnZhbHVlICogbHBUb0J1cm4gLyB0aGlzLnRvdGFsTHAudmFsdWUKICAgIGZyYW1lX2RpZyAtMQogICAgKgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMwogICAgLy8gcHVibGljIHRvdGFsTHAgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJ0b3RhbExwIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTEwCiAgICAvLyBjb25zdCBhbXRBOiB1aW50NjQgPSB0aGlzLnJlc2VydmVBLnZhbHVlICogbHBUb0J1cm4gLyB0aGlzLnRvdGFsTHAudmFsdWUKICAgIC8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjIKICAgIC8vIHB1YmxpYyByZXNlcnZlQiA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gInJlc2VydmVCIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTExCiAgICAvLyBjb25zdCBhbXRCOiB1aW50NjQgPSB0aGlzLnJlc2VydmVCLnZhbHVlICogbHBUb0J1cm4gLyB0aGlzLnRvdGFsTHAudmFsdWUKICAgIGZyYW1lX2RpZyAtMQogICAgKgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMwogICAgLy8gcHVibGljIHRvdGFsTHAgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJ0b3RhbExwIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTExCiAgICAvLyBjb25zdCBhbXRCOiB1aW50NjQgPSB0aGlzLnJlc2VydmVCLnZhbHVlICogbHBUb0J1cm4gLyB0aGlzLnRvdGFsTHAudmFsdWUKICAgIC8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjEKICAgIC8vIHB1YmxpYyByZXNlcnZlQSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gInJlc2VydmVBIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTE0CiAgICAvLyB0aGlzLnJlc2VydmVBLnZhbHVlIC09IGFtdEEKICAgIHVuY292ZXIgMgogICAgLQogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMQogICAgLy8gcHVibGljIHJlc2VydmVBID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBieXRlY18wIC8vICJyZXNlcnZlQSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTE0CiAgICAvLyB0aGlzLnJlc2VydmVBLnZhbHVlIC09IGFtdEEKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIyCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUIgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJyZXNlcnZlQiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjExNQogICAgLy8gdGhpcy5yZXNlcnZlQi52YWx1ZSAtPSBhbXRCCiAgICBzd2FwCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIyCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUIgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGJ5dGVjXzEgLy8gInJlc2VydmVCIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMTUKICAgIC8vIHRoaXMucmVzZXJ2ZUIudmFsdWUgLT0gYW10QgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjMKICAgIC8vIHB1YmxpYyB0b3RhbExwID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAidG90YWxMcCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjExNgogICAgLy8gdGhpcy50b3RhbExwLnZhbHVlIC09IGxwVG9CdXJuCiAgICBmcmFtZV9kaWcgLTEKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjMKICAgIC8vIHB1YmxpYyB0b3RhbExwID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBieXRlY18zIC8vICJ0b3RhbExwIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMTYKICAgIC8vIHRoaXMudG90YWxMcC52YWx1ZSAtPSBscFRvQnVybgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjYKICAgIC8vIHB1YmxpYyBscEJhbGFuY2VzID0gQm94TWFwPEFjY291bnQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6IEJ5dGVzYGxwX2AgfSkKICAgIGJ5dGVjXzIgLy8gImxwXyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTE3CiAgICAvLyB0aGlzLmxwQmFsYW5jZXMoVHhuLnNlbmRlcikudmFsdWUgLT0gbHBUb0J1cm4KICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjYKICAgIC8vIHB1YmxpYyBscEJhbGFuY2VzID0gQm94TWFwPEFjY291bnQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6IEJ5dGVzYGxwX2AgfSkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMTcKICAgIC8vIHRoaXMubHBCYWxhbmNlcyhUeG4uc2VuZGVyKS52YWx1ZSAtPSBscFRvQnVybgogICAgYm94X2dldAogICAgc3dhcAogICAgYnRvaQogICAgc3dhcAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjYKICAgIC8vIHB1YmxpYyBscEJhbGFuY2VzID0gQm94TWFwPEFjY291bnQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6IEJ5dGVzYGxwX2AgfSkKICAgIGJ5dGVjXzIgLy8gImxwXyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTE3CiAgICAvLyB0aGlzLmxwQmFsYW5jZXMoVHhuLnNlbmRlcikudmFsdWUgLT0gbHBUb0J1cm4KICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjYKICAgIC8vIHB1YmxpYyBscEJhbGFuY2VzID0gQm94TWFwPEFjY291bnQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6IEJ5dGVzYGxwX2AgfSkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMTcKICAgIC8vIHRoaXMubHBCYWxhbmNlcyhUeG4uc2VuZGVyKS52YWx1ZSAtPSBscFRvQnVybgogICAgc3dhcAogICAgZnJhbWVfZGlnIC0xCiAgICAtCiAgICBpdG9iCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjEyMgogICAgLy8gcmV0dXJuIHRydWUKICAgIGludGNfMSAvLyAxCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjpBTU1Db250cmFjdC5zd2FwKHNlbmRBc3NldFR5cGU6IHVpbnQ2NCwgc3dhcEFtb3VudDogdWludDY0KSAtPiB1aW50NjQ6CnN3YXA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjEyNi0xMjkKICAgIC8vIHB1YmxpYyBzd2FwKAogICAgLy8gICBzZW5kQXNzZXRUeXBlOiB1aW50NjQsIC8vIDEgaWYgYXNzZXRfYSAtPiBiLCAyIGlmIGFzc2V0X2IgLT4gYQogICAgLy8gICBzd2FwQW1vdW50OiB1aW50NjQKICAgIC8vICk6IGJvb2xlYW4gewogICAgcHJvdG8gMiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjEzMAogICAgLy8gZW5zdXJlQnVkZ2V0KDcwMDApCiAgICBwdXNoaW50IDcwMDAgLy8gNzAwMAogICAgaW50Y18wIC8vIDAKICAgIGNhbGxzdWIgZW5zdXJlX2J1ZGdldAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMzIKICAgIC8vIGFzc2VydChHbG9iYWwuZ3JvdXBTaXplID09PSAyLCAiRXhwZWN0ZWQgZ3JvdXAgc2l6ZSBvZiAyIChhcHAgY2FsbCArIGFzc2V0IHRyYW5zZmVyKSIpOwogICAgZ2xvYmFsIEdyb3VwU2l6ZQogICAgcHVzaGludCAyIC8vIDIKICAgID09CiAgICBhc3NlcnQgLy8gRXhwZWN0ZWQgZ3JvdXAgc2l6ZSBvZiAyIChhcHAgY2FsbCArIGFzc2V0IHRyYW5zZmVyKQogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMzQKICAgIC8vIGlmIChzZW5kQXNzZXRUeXBlID09PSBVaW50NjQoMSkpIHsKICAgIGZyYW1lX2RpZyAtMgogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBieiBzd2FwX2Vsc2VfYm9keUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIxCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUEgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJyZXNlcnZlQSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjEzNgogICAgLy8gY29uc3QgcmVzQTogdWludDY0ID0gdGhpcy5yZXNlcnZlQS52YWx1ZSArIHN3YXBBbW91bnQKICAgIGZyYW1lX2RpZyAtMQogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMgogICAgLy8gcHVibGljIHJlc2VydmVCID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAicmVzZXJ2ZUIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMQogICAgLy8gcHVibGljIHJlc2VydmVBID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAicmVzZXJ2ZUEiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMgogICAgLy8gcHVibGljIHJlc2VydmVCID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAicmVzZXJ2ZUIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNDAKICAgIC8vIGNvbnN0IGs6IHVpbnQ2NCA9IHRoaXMucmVzZXJ2ZUEudmFsdWUgKiB0aGlzLnJlc2VydmVCLnZhbHVlCiAgICAqCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjMwCiAgICAvLyBwcml2YXRlIHJlYWRvbmx5IEZFRV9ERU4gPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMTAwMCkgfSk7CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNyAvLyAiRkVFX0RFTiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE0MQogICAgLy8gY29uc3QgbmV3QjogdWludDY0ID0gayAqIFVpbnQ2NCh0aGlzLkZFRV9ERU4udmFsdWUpIC8gKHJlc0EgKiBVaW50NjQodGhpcy5GRUVfTlVNLnZhbHVlKSkKICAgICoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjkKICAgIC8vIHByaXZhdGUgcmVhZG9ubHkgRkVFX05VTSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCg5OTcpIH0pOyAvLyAwLjMlIGZlZQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDYgLy8gIkZFRV9OVU0iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNDEKICAgIC8vIGNvbnN0IG5ld0I6IHVpbnQ2NCA9IGsgKiBVaW50NjQodGhpcy5GRUVfREVOLnZhbHVlKSAvIChyZXNBICogVWludDY0KHRoaXMuRkVFX05VTS52YWx1ZSkpCiAgICBkaWcgMwogICAgKgogICAgLwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNDIKICAgIC8vIGNvbnN0IG91dEI6IHVpbnQ2NCA9IHJlc0IgLSBuZXdCCiAgICBkaWcgMQogICAgc3dhcAogICAgLQogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMQogICAgLy8gcHVibGljIHJlc2VydmVBID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBieXRlY18wIC8vICJyZXNlcnZlQSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTQ1CiAgICAvLyB0aGlzLnJlc2VydmVBLnZhbHVlID0gcmVzQQogICAgdW5jb3ZlciAzCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNDYKICAgIC8vIHRoaXMucmVzZXJ2ZUIudmFsdWUgPSByZXNCIC0gb3V0QgogICAgLQogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMgogICAgLy8gcHVibGljIHJlc2VydmVCID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBieXRlY18xIC8vICJyZXNlcnZlQiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTQ2CiAgICAvLyB0aGlzLnJlc2VydmVCLnZhbHVlID0gcmVzQiAtIG91dEIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0Cgpzd2FwX2FmdGVyX2lmX2Vsc2VAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTY2CiAgICAvLyByZXR1cm4gdHJ1ZQogICAgaW50Y18xIC8vIDEKICAgIHJldHN1YgoKc3dhcF9lbHNlX2JvZHlAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjIKICAgIC8vIHB1YmxpYyByZXNlcnZlQiA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gInJlc2VydmVCIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTUxCiAgICAvLyBjb25zdCByZXNCOiB1aW50NjQgPSB0aGlzLnJlc2VydmVCLnZhbHVlICsgc3dhcEFtb3VudAogICAgZnJhbWVfZGlnIC0xCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIxCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUEgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJyZXNlcnZlQSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAicmVzZXJ2ZUEiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMgogICAgLy8gcHVibGljIHJlc2VydmVCID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAicmVzZXJ2ZUIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNTUKICAgIC8vIGNvbnN0IGs6IHVpbnQ2NCA9IHRoaXMucmVzZXJ2ZUEudmFsdWUgKiB0aGlzLnJlc2VydmVCLnZhbHVlCiAgICAqCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjMwCiAgICAvLyBwcml2YXRlIHJlYWRvbmx5IEZFRV9ERU4gPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMTAwMCkgfSk7CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNyAvLyAiRkVFX0RFTiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE1NgogICAgLy8gY29uc3QgbmV3QTogdWludDY0ID0gayAqIFVpbnQ2NCh0aGlzLkZFRV9ERU4udmFsdWUpIC8gKHJlc0IgKiBVaW50NjQodGhpcy5GRUVfTlVNLnZhbHVlKSkKICAgICoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjkKICAgIC8vIHByaXZhdGUgcmVhZG9ubHkgRkVFX05VTSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCg5OTcpIH0pOyAvLyAwLjMlIGZlZQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDYgLy8gIkZFRV9OVU0iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNTYKICAgIC8vIGNvbnN0IG5ld0E6IHVpbnQ2NCA9IGsgKiBVaW50NjQodGhpcy5GRUVfREVOLnZhbHVlKSAvIChyZXNCICogVWludDY0KHRoaXMuRkVFX05VTS52YWx1ZSkpCiAgICBkaWcgMwogICAgKgogICAgLwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNTcKICAgIC8vIGNvbnN0IG91dEE6IHVpbnQ2NCA9IHJlc0EgLSBuZXdBCiAgICBkaWcgMQogICAgc3dhcAogICAgLQogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNjAKICAgIC8vIHRoaXMucmVzZXJ2ZUEudmFsdWUgPSByZXNBIC0gb3V0QQogICAgLQogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMQogICAgLy8gcHVibGljIHJlc2VydmVBID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBieXRlY18wIC8vICJyZXNlcnZlQSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTYwCiAgICAvLyB0aGlzLnJlc2VydmVBLnZhbHVlID0gcmVzQSAtIG91dEEKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIyCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUIgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGJ5dGVjXzEgLy8gInJlc2VydmVCIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNjEKICAgIC8vIHRoaXMucmVzZXJ2ZUIudmFsdWUgPSByZXNCCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgYiBzd2FwX2FmdGVyX2lmX2Vsc2VAMwoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6OkFNTUNvbnRyYWN0Lm9wdEluKCkgLT4gdWludDY0OgpvcHRJbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTcxCiAgICAvLyBlbnN1cmVCdWRnZXQoMTAwMCkKICAgIGludGNfMiAvLyAxMDAwCiAgICBpbnRjXzAgLy8gMAogICAgY2FsbHN1YiBlbnN1cmVfYnVkZ2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjI2CiAgICAvLyBwdWJsaWMgbHBCYWxhbmNlcyA9IEJveE1hcDxBY2NvdW50LCB1aW50NjQ+KHsga2V5UHJlZml4OiBCeXRlc2BscF9gIH0pCiAgICBieXRlY18yIC8vICJscF8iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE3MwogICAgLy8gaWYgKCF0aGlzLmxwQmFsYW5jZXMoVHhuLnNlbmRlcikuZXhpc3RzKSB7CiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjI2CiAgICAvLyBwdWJsaWMgbHBCYWxhbmNlcyA9IEJveE1hcDxBY2NvdW50LCB1aW50NjQ+KHsga2V5UHJlZml4OiBCeXRlc2BscF9gIH0pCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTczCiAgICAvLyBpZiAoIXRoaXMubHBCYWxhbmNlcyhUeG4uc2VuZGVyKS5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYm56IG9wdEluX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyNgogICAgLy8gcHVibGljIGxwQmFsYW5jZXMgPSBCb3hNYXA8QWNjb3VudCwgdWludDY0Pih7IGtleVByZWZpeDogQnl0ZXNgbHBfYCB9KQogICAgYnl0ZWNfMiAvLyAibHBfIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNzQKICAgIC8vIHRoaXMubHBCYWxhbmNlcyhUeG4uc2VuZGVyKS52YWx1ZSA9IFVpbnQ2NCgwKQogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyNgogICAgLy8gcHVibGljIGxwQmFsYW5jZXMgPSBCb3hNYXA8QWNjb3VudCwgdWludDY0Pih7IGtleVByZWZpeDogQnl0ZXNgbHBfYCB9KQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE3NAogICAgLy8gdGhpcy5scEJhbGFuY2VzKFR4bi5zZW5kZXIpLnZhbHVlID0gVWludDY0KDApCiAgICBpbnRjXzAgLy8gMAogICAgaXRvYgogICAgYm94X3B1dAoKb3B0SW5fYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNzYKICAgIC8vIHJldHVybiB0cnVlCiAgICBpbnRjXzEgLy8gMQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo6QU1NQ29udHJhY3QuZ2V0THBCYWxhbmNlKGFjY291bnQ6IGJ5dGVzKSAtPiB1aW50NjQ6CmdldExwQmFsYW5jZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTgwCiAgICAvLyBwdWJsaWMgZ2V0THBCYWxhbmNlKGFjY291bnQ6IEFjY291bnQpOiB1aW50NjQgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjI2CiAgICAvLyBwdWJsaWMgbHBCYWxhbmNlcyA9IEJveE1hcDxBY2NvdW50LCB1aW50NjQ+KHsga2V5UHJlZml4OiBCeXRlc2BscF9gIH0pCiAgICBieXRlY18yIC8vICJscF8iCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE4MQogICAgLy8gaWYgKCF0aGlzLmxwQmFsYW5jZXMoYWNjb3VudCkuZXhpc3RzKSB7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJueiBnZXRMcEJhbGFuY2VfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE4MgogICAgLy8gcmV0dXJuIFVpbnQ2NCgwKQogICAgaW50Y18wIC8vIDAKICAgIHN3YXAKICAgIHJldHN1YgoKZ2V0THBCYWxhbmNlX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTg0CiAgICAvLyByZXR1cm4gdGhpcy5scEJhbGFuY2VzKGFjY291bnQpLnZhbHVlCiAgICBmcmFtZV9kaWcgMAogICAgYm94X2dldAogICAgc3dhcAogICAgYnRvaQogICAgc3dhcAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIHN3YXAKICAgIHJldHN1Ygo=",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 7
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "FEE_DEN": {
                    "type": "uint64",
                    "key": "FEE_DEN"
                },
                "FEE_NUM": {
                    "type": "uint64",
                    "key": "FEE_NUM"
                },
                "assetA": {
                    "type": "uint64",
                    "key": "assetA"
                },
                "assetB": {
                    "type": "uint64",
                    "key": "assetB"
                },
                "reserveA": {
                    "type": "uint64",
                    "key": "reserveA"
                },
                "reserveB": {
                    "type": "uint64",
                    "key": "reserveB"
                },
                "totalLp": {
                    "type": "uint64",
                    "key": "totalLp"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "AMMContract",
        "methods": [
            {
                "name": "createPool",
                "args": [
                    {
                        "type": "asset",
                        "name": "assetIdA"
                    },
                    {
                        "type": "asset",
                        "name": "assetIdB"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "addLiquidity",
                "args": [
                    {
                        "type": "uint64",
                        "name": "assetAAmount"
                    },
                    {
                        "type": "uint64",
                        "name": "assetBAmount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "removeLiquidity",
                "args": [
                    {
                        "type": "uint64",
                        "name": "lpToBurn"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "swap",
                "args": [
                    {
                        "type": "uint64",
                        "name": "sendAssetType"
                    },
                    {
                        "type": "uint64",
                        "name": "swapAmount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "optIn",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "getLpBalance",
                "args": [
                    {
                        "type": "account",
                        "name": "account"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}