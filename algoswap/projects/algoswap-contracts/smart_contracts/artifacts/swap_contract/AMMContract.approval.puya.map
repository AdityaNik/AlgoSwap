{
  "version": 3,
  "sources": [
    "/home/adityanikkam/projects/hack-series/AlgoSwap/algoswap/projects/algoswap-contracts/smart_contracts/swap_contract/AMMContract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBU;AAAsD;AAA9D;AACQ;AAAsD;AAA9D;AACQ;AAAqD;AAA7D;AAMiB;;AAAqD;;;AAAtE;AACiB;;AAAqD;AAAtE;AAbF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AA+LE;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AALA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAnKF;;;AAAA;AAAA;;AAmKE;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA5CA;;AAAA;AAAA;AAAA;;AAAA;AA7GF;;;AAAA;AAAA;;;AAAA;AA6GE;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA1BA;;AAAA;AAAA;AAAA;;AAAA;AAnFF;;;AAAA;AAmFE;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA7CA;;AAAA;AAAA;AAAA;;AAAA;AAtCF;;;AAAA;AAAA;;;AAAA;AAsCE;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAhBF;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAgBE;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAhBF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBE;;;AACe;;;AAAb;AAAA;;;AAfM;;AAgBN;;AAAA;AAfM;;AAgBN;;AAAA;AAEA;;AAAA;;;AACA;;AAAA;;;AACO;AAAP;AAIF;;;AACE;AAEwB;;;;;;;;AADT;;;AADf;;;;AAGO;;;AAHP;;AAUF;;;AAIe;AAAb;AAAA;;;AAEc;;AAAc;;AAArB;AAAP;AA1CM;AAAA;;AA8Ca;AAAA;;AAAZ;;;AA7CD;AAAA;;AA6CqC;AAAA;;AAApC;;;;AAAP;AA1CM;AAAA;AAAA;AAAA;AA4CN;;;AA9CM;AAgDJ;;AAAA;AA/CI;AAgDJ;;AAAA;AA/CI;AAgDwB;AAA5B;AA7CqD;AAgDjC;;AAhDiC;AAgDV;AAA3C;AAAA;AAsBK;AAAP;AAzEM;AAAA;AAAA;AAAA;AAsDsB;;AAAA;AAxDtB;AAAA;AAAA;AAAA;AAwDsB;AAtDtB;AAAA;AAAA;AAAA;AAuDsB;;AAAA;AAxDtB;AAAA;AAAA;AAAA;AAwDsB;AAGT;AAAA;AAAA;AAAA;;AAAA;AAAA;AA5Db;AAAA;AAAA;AAAA;AA+DJ;;AAAA;AA/DI;AA+DJ;AAAA;AA9DI;AAAA;AAAA;AAAA;AA+DJ;;AAAA;AA/DI;AA+DJ;AAAA;AA9DI;AAAA;AAAA;AAAA;AA+DJ;AA/DI;AA+DJ;AAAA;AA5DqD;AA+D5B;;AA/D4B;AA+DpB;AAAA;;AAA7B;;;AA/DiD;AAgE/B;;AAhE+B;AAgEnD;AAAA;AAAA;;;;AAhEmD;AAkE/B;;AAlE+B;AAkEvB;AAAA;AAAA;AAAA;AAAA;AAlEuB;AAkE/B;;AAlE+B;AAkEnD;AAAA;;AAAA;AAAA;AAAA;;;;;;;;AAQN;;;AACe;AAAb;AAAA;;;AA3EuD;AA4E5B;;AA5E4B;AA4EpB;AAAA;;AAAnC;AA5EuD;AA6EpB;;AA7EoB;AA6EZ;AAAA;AAAA;AAAA;AAAA;AAG3C;;AAAA;AACO;;AAAA;AAAP;AAtFM;AAAA;AAAA;AAAA;AAyFe;;AAAA;AAvFf;AAAA;AAAA;AAAA;AAuFe;AAxFf;AAAA;AAAA;AAAA;AAyFe;;AAAA;AAxFf;AAAA;AAAA;AAAA;AAwFe;AA1Ff;AAAA;AAAA;AAAA;AA6FN;;AAAA;AA7FM;AA6FN;AAAA;AA5FM;AAAA;AAAA;AAAA;AA6FN;AAAA;AA7FM;AA6FN;AAAA;AA5FM;AAAA;AAAA;AAAA;AA6FN;;AAAA;AA7FM;AA6FN;AAAA;AA1FuD;AA2FnC;;AA3FmC;AA2F3B;AAAA;AAAA;AAAA;AAAA;AA3F2B;AA2FnC;;AA3FmC;AA2FvD;AAAA;;AAAA;AAAA;AAAA;AAKO;AAAP;AAIF;;;AAIe;;;AAAb;AAAA;;;AAEc;;AAAc;;AAArB;AAAP;AAEI;;AAAyB;AAAzB;AAAJ;;;AAjHM;AAAA;AAAA;AAAA;AAmHE;;AAAe;AAlHjB;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAsHc;AA9GL;AAAA;;AAAA;AAAA;AA+GQ;AAhHR;AAAA;;AAAA;AAAA;AAgH0C;;AAAA;AAAlC;AACf;;AAAA;AAAe;AAzHjB;AA4HJ;;AAAA;AACsB;AA5HlB;AA4HJ;AAAA;AAoBK;AAAP;AAhJM;AAAA;AAAA;AAAA;AAiIE;;AAAe;AAlIjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAqIc;AA7HL;AAAA;;AAAA;AAAA;AA8HQ;AA/HR;AAAA;;AAAA;AAAA;AA+H0C;;AAAA;AAAlC;AACf;;AAAA;AAAe;AAGC;AA3IlB;AA2IJ;AAAA;AA1II;AA2IJ;AAAA;;;;AAUW;AAAb;AAAA;;;AAjJuD;AAmJ9B;;AAnJ8B;AAmJtB;AAAA;;AAA7B;;;AAnJmD;AAoJjC;;AApJiC;AAoJV;AAA3C;AAAA;AAEK;AAAP;AAIF;;;AA1JyD;AAAA;;AAAA;AAAA;AA2JzB;AAAA;;AAA1B;;;AACY;AAAd;AAAA;AAE8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAhC;AAAA;AArKM;AAAA;;AAAA;AAAA;AA0KN;AAzKM;AAAA;;AAAA;AAAA;AA8KN;AA7KM;AAAA;AAAA;AAAA;AAkLN;AAjLM;AAAA;AAAA;AAAA;AAsLN;AArLM;AAAA;AAAA;AAAA;AA0LN",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 1000 8000"
    },
    "9": {
      "op": "bytecblock \"reserveA\" \"reserveB\" \"totalLp\" \"lp_\" 0x151f7c75 0x00 \"FEE_NUM\" \"FEE_DEN\" \"assetA\" \"assetB\" 0x068101"
    },
    "82": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "84": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "87": {
      "op": "bytec_0 // \"reserveA\"",
      "defined_out": [
        "\"reserveA\""
      ],
      "stack_out": [
        "\"reserveA\""
      ]
    },
    "88": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"reserveA\"",
        "0"
      ],
      "stack_out": [
        "\"reserveA\"",
        "0"
      ]
    },
    "89": {
      "op": "app_global_put",
      "stack_out": []
    },
    "90": {
      "op": "bytec_1 // \"reserveB\"",
      "defined_out": [
        "\"reserveB\""
      ],
      "stack_out": [
        "\"reserveB\""
      ]
    },
    "91": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"reserveB\"",
        "0"
      ]
    },
    "92": {
      "op": "app_global_put",
      "stack_out": []
    },
    "93": {
      "op": "bytec_2 // \"totalLp\"",
      "defined_out": [
        "\"totalLp\""
      ],
      "stack_out": [
        "\"totalLp\""
      ]
    },
    "94": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"totalLp\"",
        "0"
      ]
    },
    "95": {
      "op": "app_global_put",
      "stack_out": []
    },
    "96": {
      "op": "bytec 6 // \"FEE_NUM\"",
      "defined_out": [
        "\"FEE_NUM\""
      ],
      "stack_out": [
        "\"FEE_NUM\""
      ]
    },
    "98": {
      "op": "pushint 997 // 997",
      "defined_out": [
        "\"FEE_NUM\"",
        "997"
      ],
      "stack_out": [
        "\"FEE_NUM\"",
        "997"
      ]
    },
    "101": {
      "op": "app_global_put",
      "stack_out": []
    },
    "102": {
      "op": "bytec 7 // \"FEE_DEN\"",
      "defined_out": [
        "\"FEE_DEN\""
      ],
      "stack_out": [
        "\"FEE_DEN\""
      ]
    },
    "104": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "\"FEE_DEN\"",
        "1000"
      ],
      "stack_out": [
        "\"FEE_DEN\"",
        "1000"
      ]
    },
    "105": {
      "op": "app_global_put",
      "stack_out": []
    },
    "106": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "108": {
      "op": "bz main_bare_routing@18",
      "stack_out": []
    },
    "111": {
      "op": "pushbytess 0x21d6d0b6 0xd70adabb 0xe4971963 0xfee44ae0 0x43e9d739 0x8241bf3f 0x48afc4e8 0x054fa8b4 0xcc2ae2d6 0xcf85697e 0xcf044285 // method \"createPool(asset,asset)bool\", method \"addLiquidity(uint64,uint64)bool\", method \"removeLiquidity(uint64)bool\", method \"swap(uint64,uint64)bool\", method \"optIn()bool\", method \"getLpBalance(account)uint64\", method \"getAssetAId()uint64\", method \"getAssetBId()uint64\", method \"getReserveA()uint64\", method \"getReserveB()uint64\", method \"getTotalLp()uint64\"",
      "defined_out": [
        "Method(addLiquidity(uint64,uint64)bool)",
        "Method(createPool(asset,asset)bool)",
        "Method(getAssetAId()uint64)",
        "Method(getAssetBId()uint64)",
        "Method(getLpBalance(account)uint64)",
        "Method(getReserveA()uint64)",
        "Method(getReserveB()uint64)",
        "Method(getTotalLp()uint64)",
        "Method(optIn()bool)",
        "Method(removeLiquidity(uint64)bool)",
        "Method(swap(uint64,uint64)bool)"
      ],
      "stack_out": [
        "Method(createPool(asset,asset)bool)",
        "Method(addLiquidity(uint64,uint64)bool)",
        "Method(removeLiquidity(uint64)bool)",
        "Method(swap(uint64,uint64)bool)",
        "Method(optIn()bool)",
        "Method(getLpBalance(account)uint64)",
        "Method(getAssetAId()uint64)",
        "Method(getAssetBId()uint64)",
        "Method(getReserveA()uint64)",
        "Method(getReserveB()uint64)",
        "Method(getTotalLp()uint64)"
      ]
    },
    "168": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addLiquidity(uint64,uint64)bool)",
        "Method(createPool(asset,asset)bool)",
        "Method(getAssetAId()uint64)",
        "Method(getAssetBId()uint64)",
        "Method(getLpBalance(account)uint64)",
        "Method(getReserveA()uint64)",
        "Method(getReserveB()uint64)",
        "Method(getTotalLp()uint64)",
        "Method(optIn()bool)",
        "Method(removeLiquidity(uint64)bool)",
        "Method(swap(uint64,uint64)bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createPool(asset,asset)bool)",
        "Method(addLiquidity(uint64,uint64)bool)",
        "Method(removeLiquidity(uint64)bool)",
        "Method(swap(uint64,uint64)bool)",
        "Method(optIn()bool)",
        "Method(getLpBalance(account)uint64)",
        "Method(getAssetAId()uint64)",
        "Method(getAssetBId()uint64)",
        "Method(getReserveA()uint64)",
        "Method(getReserveB()uint64)",
        "Method(getTotalLp()uint64)",
        "tmp%2#0"
      ]
    },
    "171": {
      "op": "match main_createPool_route@5 main_addLiquidity_route@6 main_removeLiquidity_route@7 main_swap_route@8 main_optIn_route@9 main_getLpBalance_route@10 main_getAssetAId_route@11 main_getAssetBId_route@12 main_getReserveA_route@13 main_getReserveB_route@14 main_getTotalLp_route@15",
      "stack_out": []
    },
    "195": {
      "block": "main_after_if_else@22",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "196": {
      "op": "return",
      "stack_out": []
    },
    "197": {
      "block": "main_getTotalLp_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "199": {
      "op": "!",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "200": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "201": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "203": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "204": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.getTotalLp",
      "op": "callsub getTotalLp",
      "defined_out": [
        "to_encode%10#0"
      ],
      "stack_out": [
        "to_encode%10#0"
      ]
    },
    "207": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0"
      ]
    },
    "208": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "0x151f7c75"
      ]
    },
    "210": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ]
    },
    "211": {
      "op": "concat",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "212": {
      "op": "log",
      "stack_out": []
    },
    "213": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "214": {
      "op": "return",
      "stack_out": []
    },
    "215": {
      "block": "main_getReserveB_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "217": {
      "op": "!",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "218": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "219": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "221": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "222": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.getReserveB",
      "op": "callsub getReserveB",
      "defined_out": [
        "to_encode%9#0"
      ],
      "stack_out": [
        "to_encode%9#0"
      ]
    },
    "225": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "226": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "228": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "229": {
      "op": "concat",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "230": {
      "op": "log",
      "stack_out": []
    },
    "231": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "232": {
      "op": "return",
      "stack_out": []
    },
    "233": {
      "block": "main_getReserveA_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "235": {
      "op": "!",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "236": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "237": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "239": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "240": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.getReserveA",
      "op": "callsub getReserveA",
      "defined_out": [
        "to_encode%8#0"
      ],
      "stack_out": [
        "to_encode%8#0"
      ]
    },
    "243": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "244": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "246": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "247": {
      "op": "concat",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "248": {
      "op": "log",
      "stack_out": []
    },
    "249": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "250": {
      "op": "return",
      "stack_out": []
    },
    "251": {
      "block": "main_getAssetBId_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "253": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "254": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "255": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "257": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "258": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.getAssetBId",
      "op": "callsub getAssetBId",
      "defined_out": [
        "to_encode%7#0"
      ],
      "stack_out": [
        "to_encode%7#0"
      ]
    },
    "261": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "262": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "264": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "265": {
      "op": "concat",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "266": {
      "op": "log",
      "stack_out": []
    },
    "267": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "268": {
      "op": "return",
      "stack_out": []
    },
    "269": {
      "block": "main_getAssetAId_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "271": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "272": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "273": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "275": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "276": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.getAssetAId",
      "op": "callsub getAssetAId",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "279": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "280": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "282": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "283": {
      "op": "concat",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "284": {
      "op": "log",
      "stack_out": []
    },
    "285": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "286": {
      "op": "return",
      "stack_out": []
    },
    "287": {
      "block": "main_getLpBalance_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "289": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "290": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "291": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "293": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "294": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "297": {
      "op": "btoi",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "298": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "300": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.getLpBalance",
      "op": "callsub getLpBalance",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "303": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "304": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "306": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "307": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "308": {
      "op": "log",
      "stack_out": []
    },
    "309": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "310": {
      "op": "return",
      "stack_out": []
    },
    "311": {
      "block": "main_optIn_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "313": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "314": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "315": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "317": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "318": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.optIn",
      "op": "callsub optIn",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "321": {
      "op": "bytec 5 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00"
      ]
    },
    "323": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00",
        "0"
      ]
    },
    "324": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%4#0"
      ]
    },
    "326": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0"
      ]
    },
    "327": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0",
        "0x151f7c75"
      ]
    },
    "329": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ]
    },
    "330": {
      "op": "concat",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "331": {
      "op": "log",
      "stack_out": []
    },
    "332": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "333": {
      "op": "return",
      "stack_out": []
    },
    "334": {
      "block": "main_swap_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "336": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "337": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "338": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "340": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "341": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "344": {
      "op": "btoi",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "345": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "348": {
      "op": "btoi",
      "defined_out": [
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "349": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.swap",
      "op": "callsub swap",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "352": {
      "op": "bytec 5 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00"
      ]
    },
    "354": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00",
        "0"
      ]
    },
    "355": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%3#0"
      ]
    },
    "357": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0"
      ]
    },
    "358": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "0x151f7c75"
      ]
    },
    "360": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ]
    },
    "361": {
      "op": "concat",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "362": {
      "op": "log",
      "stack_out": []
    },
    "363": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "364": {
      "op": "return",
      "stack_out": []
    },
    "365": {
      "block": "main_removeLiquidity_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "367": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "368": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "369": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "371": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "372": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "375": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "376": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.removeLiquidity",
      "op": "callsub removeLiquidity",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "379": {
      "op": "bytec 5 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00"
      ]
    },
    "381": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00",
        "0"
      ]
    },
    "382": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%2#0"
      ]
    },
    "384": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0"
      ]
    },
    "385": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0",
        "0x151f7c75"
      ]
    },
    "387": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ]
    },
    "388": {
      "op": "concat",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "389": {
      "op": "log",
      "stack_out": []
    },
    "390": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "391": {
      "op": "return",
      "stack_out": []
    },
    "392": {
      "block": "main_addLiquidity_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "394": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "395": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "396": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "398": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "399": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "402": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "403": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "406": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "407": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.addLiquidity",
      "op": "callsub addLiquidity",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "410": {
      "op": "bytec 5 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00"
      ]
    },
    "412": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00",
        "0"
      ]
    },
    "413": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%1#0"
      ]
    },
    "415": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "416": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "418": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ]
    },
    "419": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "420": {
      "op": "log",
      "stack_out": []
    },
    "421": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "422": {
      "op": "return",
      "stack_out": []
    },
    "423": {
      "block": "main_createPool_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "425": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "426": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "427": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "429": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "430": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "433": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "434": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "436": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "439": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "440": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "442": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.createPool",
      "op": "callsub createPool",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "445": {
      "op": "bytec 5 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "447": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "448": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "450": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "451": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "453": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "454": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "455": {
      "op": "log",
      "stack_out": []
    },
    "456": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "457": {
      "op": "return",
      "stack_out": []
    },
    "458": {
      "block": "main_bare_routing@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "460": {
      "op": "bnz main_after_if_else@22",
      "stack_out": []
    },
    "463": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "465": {
      "op": "!",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "466": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "467": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "468": {
      "op": "return",
      "stack_out": []
    },
    "469": {
      "subroutine": "_puya_lib.util.ensure_budget",
      "params": {
        "required_budget#0": "uint64",
        "fee_source#0": "uint64"
      },
      "block": "ensure_budget",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "472": {
      "op": "frame_dig -2",
      "defined_out": [
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)"
      ]
    },
    "474": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)",
        "10"
      ]
    },
    "476": {
      "op": "+",
      "defined_out": [
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "477": {
      "block": "ensure_budget_while_top@1",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "required_budget_with_buffer#0"
      ]
    },
    "479": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ]
    },
    "481": {
      "op": ">",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ]
    },
    "482": {
      "op": "bz ensure_budget_after_while@7",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "485": {
      "op": "itxn_begin"
    },
    "486": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "appl"
      ]
    },
    "488": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "490": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "DeleteApplication"
      ]
    },
    "492": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "494": {
      "op": "bytec 10 // 0x068101",
      "defined_out": [
        "0x068101",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "496": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "498": {
      "op": "bytec 10 // 0x068101",
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "500": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "502": {
      "op": "frame_dig -1",
      "defined_out": [
        "fee_source#0 (copy)",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "fee_source#0 (copy)"
      ]
    },
    "504": {
      "op": "switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "510": {
      "block": "ensure_budget_switch_case_next@6",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "itxn_submit"
    },
    "511": {
      "op": "b ensure_budget_while_top@1"
    },
    "514": {
      "block": "ensure_budget_switch_case_1@4",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%2#0"
      ]
    },
    "516": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "518": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "521": {
      "block": "ensure_budget_switch_case_0@3",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0"
      ]
    },
    "522": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "524": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "527": {
      "block": "ensure_budget_after_while@7",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "528": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.createPool",
      "params": {
        "assetIdA#0": "uint64",
        "assetIdB#0": "uint64"
      },
      "block": "createPool",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "531": {
      "op": "pushint 3000 // 3000",
      "defined_out": [
        "3000"
      ],
      "stack_out": [
        "3000"
      ]
    },
    "534": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "3000"
      ],
      "stack_out": [
        "3000",
        "0"
      ]
    },
    "535": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "538": {
      "op": "bytec 8 // \"assetA\"",
      "defined_out": [
        "\"assetA\""
      ],
      "stack_out": [
        "\"assetA\""
      ]
    },
    "540": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"assetA\"",
        "assetIdA#0 (copy)"
      ],
      "stack_out": [
        "\"assetA\"",
        "assetIdA#0 (copy)"
      ]
    },
    "542": {
      "op": "app_global_put",
      "stack_out": []
    },
    "543": {
      "op": "bytec 9 // \"assetB\"",
      "defined_out": [
        "\"assetB\""
      ],
      "stack_out": [
        "\"assetB\""
      ]
    },
    "545": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"assetB\"",
        "assetIdB#0 (copy)"
      ],
      "stack_out": [
        "\"assetB\"",
        "assetIdB#0 (copy)"
      ]
    },
    "547": {
      "op": "app_global_put",
      "stack_out": []
    },
    "548": {
      "op": "frame_dig -2",
      "stack_out": [
        "assetIdA#0 (copy)"
      ]
    },
    "550": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.optInToAsset",
      "op": "callsub optInToAsset",
      "stack_out": []
    },
    "553": {
      "op": "frame_dig -1",
      "stack_out": [
        "assetIdB#0 (copy)"
      ]
    },
    "555": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.optInToAsset",
      "op": "callsub optInToAsset",
      "stack_out": []
    },
    "558": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "559": {
      "retsub": true,
      "op": "retsub"
    },
    "560": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.optInToAsset",
      "params": {
        "assetId#0": "uint64"
      },
      "block": "optInToAsset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "563": {
      "op": "itxn_begin"
    },
    "564": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "566": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetId#0 (copy)",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "assetId#0 (copy)"
      ]
    },
    "568": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "570": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "572": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "573": {
      "op": "itxn_field AssetAmount",
      "stack_out": []
    },
    "575": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "577": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "579": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "580": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "582": {
      "op": "itxn_submit"
    },
    "583": {
      "retsub": true,
      "op": "retsub"
    },
    "584": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.addLiquidity",
      "params": {
        "assetAAmount#0": "uint64",
        "assetBAmount#0": "uint64"
      },
      "block": "addLiquidity",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "587": {
      "op": "intc_3 // 8000",
      "defined_out": [
        "8000"
      ],
      "stack_out": [
        "8000"
      ]
    },
    "588": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "8000"
      ],
      "stack_out": [
        "8000",
        "0"
      ]
    },
    "589": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "592": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "594": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "3"
      ]
    },
    "596": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "597": {
      "error": "Expected group size of 3 (app call + 2 asset transfers)",
      "op": "assert // Expected group size of 3 (app call + 2 asset transfers)",
      "stack_out": []
    },
    "598": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "599": {
      "op": "bytec 8 // \"assetA\"",
      "defined_out": [
        "\"assetA\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"assetA\""
      ]
    },
    "601": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "602": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "604": {
      "op": "bz addLiquidity_bool_false@3",
      "stack_out": []
    },
    "607": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "608": {
      "op": "bytec 9 // \"assetB\"",
      "defined_out": [
        "\"assetB\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"assetB\""
      ]
    },
    "610": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "611": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "613": {
      "op": "bz addLiquidity_bool_false@3",
      "stack_out": []
    },
    "616": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "617": {
      "block": "addLiquidity_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "Pool not initialized",
      "op": "assert // Pool not initialized",
      "defined_out": [],
      "stack_out": []
    },
    "618": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "619": {
      "op": "bytec_2 // \"totalLp\"",
      "defined_out": [
        "\"totalLp\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalLp\""
      ]
    },
    "620": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "621": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "622": {
      "op": "bnz addLiquidity_else_body@6",
      "stack_out": []
    },
    "625": {
      "op": "bytec_0 // \"reserveA\"",
      "defined_out": [
        "\"reserveA\""
      ],
      "stack_out": [
        "\"reserveA\""
      ]
    },
    "626": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"reserveA\"",
        "assetAAmount#0 (copy)"
      ],
      "stack_out": [
        "\"reserveA\"",
        "assetAAmount#0 (copy)"
      ]
    },
    "628": {
      "op": "app_global_put",
      "stack_out": []
    },
    "629": {
      "op": "bytec_1 // \"reserveB\"",
      "defined_out": [
        "\"reserveB\""
      ],
      "stack_out": [
        "\"reserveB\""
      ]
    },
    "630": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"reserveB\"",
        "assetBAmount#0 (copy)"
      ],
      "stack_out": [
        "\"reserveB\"",
        "assetBAmount#0 (copy)"
      ]
    },
    "632": {
      "op": "app_global_put",
      "stack_out": []
    },
    "633": {
      "op": "bytec_2 // \"totalLp\"",
      "stack_out": [
        "\"totalLp\""
      ]
    },
    "634": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "\"totalLp\"",
        "1000"
      ],
      "stack_out": [
        "\"totalLp\"",
        "1000"
      ]
    },
    "635": {
      "op": "app_global_put",
      "stack_out": []
    },
    "636": {
      "op": "bytec_3 // \"lp_\"",
      "defined_out": [
        "\"lp_\""
      ],
      "stack_out": [
        "\"lp_\""
      ]
    },
    "637": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "tmp%3#0"
      ],
      "stack_out": [
        "\"lp_\"",
        "tmp%3#0"
      ]
    },
    "639": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "640": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "tmp%4#0",
        "1000"
      ]
    },
    "641": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_box_value%0#0"
      ]
    },
    "642": {
      "op": "box_put",
      "stack_out": []
    },
    "643": {
      "block": "addLiquidity_after_if_else@10",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "644": {
      "retsub": true,
      "op": "retsub"
    },
    "645": {
      "block": "addLiquidity_else_body@6",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "646": {
      "op": "bytec_2 // \"totalLp\"",
      "defined_out": [
        "\"totalLp\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalLp\""
      ]
    },
    "647": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "648": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "649": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetAAmount#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "assetAAmount#0 (copy)"
      ]
    },
    "651": {
      "op": "*",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "652": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "653": {
      "op": "bytec_0 // \"reserveA\"",
      "defined_out": [
        "\"reserveA\"",
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"reserveA\""
      ]
    },
    "654": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "655": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%4#0"
      ]
    },
    "656": {
      "op": "/",
      "defined_out": [
        "lpMintedA#0"
      ],
      "stack_out": [
        "lpMintedA#0"
      ]
    },
    "657": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lpMintedA#0",
        "0"
      ]
    },
    "658": {
      "op": "bytec_2 // \"totalLp\"",
      "stack_out": [
        "lpMintedA#0",
        "0",
        "\"totalLp\""
      ]
    },
    "659": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lpMintedA#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "lpMintedA#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "660": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lpMintedA#0",
        "maybe_value%5#0"
      ]
    },
    "661": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetBAmount#0 (copy)",
        "lpMintedA#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "lpMintedA#0",
        "maybe_value%5#0",
        "assetBAmount#0 (copy)"
      ]
    },
    "663": {
      "op": "*",
      "defined_out": [
        "lpMintedA#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lpMintedA#0",
        "tmp%6#0"
      ]
    },
    "664": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lpMintedA#0",
        "tmp%6#0",
        "0"
      ]
    },
    "665": {
      "op": "bytec_1 // \"reserveB\"",
      "defined_out": [
        "\"reserveB\"",
        "0",
        "lpMintedA#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lpMintedA#0",
        "tmp%6#0",
        "0",
        "\"reserveB\""
      ]
    },
    "666": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lpMintedA#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lpMintedA#0",
        "tmp%6#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "667": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lpMintedA#0",
        "tmp%6#0",
        "maybe_value%6#0"
      ]
    },
    "668": {
      "op": "/",
      "defined_out": [
        "lpMintedA#0",
        "lpMintedB#0"
      ],
      "stack_out": [
        "lpMintedA#0",
        "lpMintedB#0"
      ]
    },
    "669": {
      "op": "dup2",
      "defined_out": [
        "lpMintedA#0",
        "lpMintedA#0 (copy)",
        "lpMintedB#0",
        "lpMintedB#0 (copy)"
      ],
      "stack_out": [
        "lpMintedA#0",
        "lpMintedB#0",
        "lpMintedA#0 (copy)",
        "lpMintedB#0 (copy)"
      ]
    },
    "670": {
      "op": "<",
      "defined_out": [
        "lpMintedA#0",
        "lpMintedB#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "lpMintedA#0",
        "lpMintedB#0",
        "tmp%7#0"
      ]
    },
    "671": {
      "op": "swap",
      "stack_out": [
        "lpMintedA#0",
        "tmp%7#0",
        "lpMintedB#0"
      ]
    },
    "672": {
      "op": "cover 2",
      "stack_out": [
        "lpMintedB#0",
        "lpMintedA#0",
        "tmp%7#0"
      ]
    },
    "674": {
      "op": "select",
      "defined_out": [
        "lpToMint#0"
      ],
      "stack_out": [
        "lpToMint#0"
      ]
    },
    "675": {
      "op": "dup",
      "defined_out": [
        "lpToMint#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0"
      ]
    },
    "676": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "0"
      ]
    },
    "677": {
      "op": "bytec_0 // \"reserveA\"",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "0",
        "\"reserveA\""
      ]
    },
    "678": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lpToMint#0",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "679": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "maybe_value%7#0"
      ]
    },
    "680": {
      "op": "frame_dig -2",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "maybe_value%7#0",
        "assetAAmount#0 (copy)"
      ]
    },
    "682": {
      "op": "+",
      "defined_out": [
        "lpToMint#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "new_state_value%0#0"
      ]
    },
    "683": {
      "op": "bytec_0 // \"reserveA\"",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "new_state_value%0#0",
        "\"reserveA\""
      ]
    },
    "684": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "\"reserveA\"",
        "new_state_value%0#0"
      ]
    },
    "685": {
      "op": "app_global_put",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0"
      ]
    },
    "686": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "0"
      ]
    },
    "687": {
      "op": "bytec_1 // \"reserveB\"",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "0",
        "\"reserveB\""
      ]
    },
    "688": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lpToMint#0",
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "689": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "maybe_value%8#0"
      ]
    },
    "690": {
      "op": "frame_dig -1",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "maybe_value%8#0",
        "assetBAmount#0 (copy)"
      ]
    },
    "692": {
      "op": "+",
      "defined_out": [
        "lpToMint#0",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "new_state_value%1#0"
      ]
    },
    "693": {
      "op": "bytec_1 // \"reserveB\"",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "new_state_value%1#0",
        "\"reserveB\""
      ]
    },
    "694": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "\"reserveB\"",
        "new_state_value%1#0"
      ]
    },
    "695": {
      "op": "app_global_put",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0"
      ]
    },
    "696": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "0"
      ]
    },
    "697": {
      "op": "bytec_2 // \"totalLp\"",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "0",
        "\"totalLp\""
      ]
    },
    "698": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lpToMint#0",
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "699": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "maybe_value%9#0"
      ]
    },
    "700": {
      "op": "+",
      "defined_out": [
        "lpToMint#0",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "new_state_value%2#0"
      ]
    },
    "701": {
      "op": "bytec_2 // \"totalLp\"",
      "stack_out": [
        "lpToMint#0",
        "new_state_value%2#0",
        "\"totalLp\""
      ]
    },
    "702": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "\"totalLp\"",
        "new_state_value%2#0"
      ]
    },
    "703": {
      "op": "app_global_put",
      "stack_out": [
        "lpToMint#0"
      ]
    },
    "704": {
      "op": "bytec_3 // \"lp_\"",
      "defined_out": [
        "\"lp_\"",
        "lpToMint#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "\"lp_\""
      ]
    },
    "705": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "lpToMint#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "\"lp_\"",
        "tmp%8#0"
      ]
    },
    "707": {
      "op": "concat",
      "defined_out": [
        "lpToMint#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%9#0"
      ]
    },
    "708": {
      "op": "box_len",
      "defined_out": [
        "lpToMint#0",
        "maybe_exists%10#0",
        "maybe_value%10#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "709": {
      "op": "bury 1",
      "stack_out": [
        "lpToMint#0",
        "maybe_exists%10#0"
      ]
    },
    "711": {
      "op": "bnz addLiquidity_else_body@8",
      "stack_out": [
        "lpToMint#0"
      ]
    },
    "714": {
      "op": "bytec_3 // \"lp_\"",
      "stack_out": [
        "lpToMint#0",
        "\"lp_\""
      ]
    },
    "715": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "lpToMint#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "\"lp_\"",
        "tmp%10#0"
      ]
    },
    "717": {
      "op": "concat",
      "defined_out": [
        "lpToMint#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%11#0"
      ]
    },
    "718": {
      "op": "swap",
      "stack_out": [
        "tmp%11#0",
        "lpToMint#0"
      ]
    },
    "719": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "new_box_value%1#0"
      ]
    },
    "720": {
      "op": "box_put",
      "stack_out": []
    },
    "721": {
      "op": "b addLiquidity_after_if_else@10"
    },
    "724": {
      "block": "addLiquidity_else_body@8",
      "stack_in": [
        "lpToMint#0"
      ],
      "op": "bytec_3 // \"lp_\"",
      "defined_out": [
        "\"lp_\""
      ],
      "stack_out": [
        "lpToMint#0",
        "\"lp_\""
      ]
    },
    "725": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "tmp%12#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "\"lp_\"",
        "tmp%12#0"
      ]
    },
    "727": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%13#0"
      ]
    },
    "728": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value%11#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "729": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "maybe_exists%11#0",
        "maybe_value%11#0"
      ]
    },
    "730": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "maybe_exists%11#0",
        "maybe_value_converted%0#0"
      ]
    },
    "731": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "maybe_value_converted%0#0",
        "maybe_exists%11#0"
      ]
    },
    "732": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "lpToMint#0",
        "maybe_value_converted%0#0"
      ]
    },
    "733": {
      "op": "bytec_3 // \"lp_\"",
      "stack_out": [
        "lpToMint#0",
        "maybe_value_converted%0#0",
        "\"lp_\""
      ]
    },
    "734": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "maybe_value_converted%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "maybe_value_converted%0#0",
        "\"lp_\"",
        "tmp%14#0"
      ]
    },
    "736": {
      "op": "concat",
      "defined_out": [
        "maybe_value_converted%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "maybe_value_converted%0#0",
        "tmp%15#0"
      ]
    },
    "737": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "tmp%15#0",
        "maybe_value_converted%0#0"
      ]
    },
    "738": {
      "op": "uncover 2",
      "defined_out": [
        "lpToMint#0",
        "maybe_value_converted%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "maybe_value_converted%0#0",
        "lpToMint#0"
      ]
    },
    "740": {
      "op": "+",
      "defined_out": [
        "new_box_value%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "new_box_value%2#0"
      ]
    },
    "741": {
      "op": "itob",
      "defined_out": [
        "new_box_value%3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "new_box_value%3#0"
      ]
    },
    "742": {
      "op": "box_put",
      "stack_out": []
    },
    "743": {
      "op": "b addLiquidity_after_if_else@10"
    },
    "746": {
      "block": "addLiquidity_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "747": {
      "op": "b addLiquidity_bool_merge@4"
    },
    "750": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.removeLiquidity",
      "params": {
        "lpToBurn#0": "uint64"
      },
      "block": "removeLiquidity",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "753": {
      "op": "intc_3 // 8000",
      "defined_out": [
        "8000"
      ],
      "stack_out": [
        "8000"
      ]
    },
    "754": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "8000"
      ],
      "stack_out": [
        "8000",
        "0"
      ]
    },
    "755": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "758": {
      "op": "bytec_3 // \"lp_\"",
      "defined_out": [
        "\"lp_\""
      ],
      "stack_out": [
        "\"lp_\""
      ]
    },
    "759": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"lp_\"",
        "tmp%0#0"
      ]
    },
    "761": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "762": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "763": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "765": {
      "error": "No LP balance found",
      "op": "assert // No LP balance found",
      "stack_out": []
    },
    "766": {
      "op": "bytec_3 // \"lp_\"",
      "stack_out": [
        "\"lp_\""
      ]
    },
    "767": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "\"lp_\"",
        "tmp%2#0"
      ]
    },
    "769": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "770": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "771": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "772": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "userLp#0"
      ],
      "stack_out": [
        "maybe_exists%1#0",
        "userLp#0"
      ]
    },
    "773": {
      "op": "swap",
      "stack_out": [
        "userLp#0",
        "maybe_exists%1#0"
      ]
    },
    "774": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "userLp#0"
      ]
    },
    "775": {
      "op": "frame_dig -1",
      "defined_out": [
        "lpToBurn#0 (copy)",
        "userLp#0"
      ],
      "stack_out": [
        "userLp#0",
        "lpToBurn#0 (copy)"
      ]
    },
    "777": {
      "error": "Must burn positive amount",
      "op": "assert // Must burn positive amount",
      "stack_out": [
        "userLp#0"
      ]
    },
    "778": {
      "op": "frame_dig -1",
      "stack_out": [
        "userLp#0",
        "lpToBurn#0 (copy)"
      ]
    },
    "780": {
      "op": ">=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "781": {
      "error": "Insufficient LP balance",
      "op": "assert // Insufficient LP balance",
      "stack_out": []
    },
    "782": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "783": {
      "op": "bytec_0 // \"reserveA\"",
      "defined_out": [
        "\"reserveA\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"reserveA\""
      ]
    },
    "784": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "785": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "786": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%2#0",
        "lpToBurn#0 (copy)"
      ]
    },
    "788": {
      "op": "*",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "789": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "790": {
      "op": "bytec_2 // \"totalLp\"",
      "defined_out": [
        "\"totalLp\"",
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0",
        "\"totalLp\""
      ]
    },
    "791": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "792": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "793": {
      "op": "/",
      "defined_out": [
        "amtA#0"
      ],
      "stack_out": [
        "amtA#0"
      ]
    },
    "794": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amtA#0",
        "0"
      ]
    },
    "795": {
      "op": "bytec_1 // \"reserveB\"",
      "defined_out": [
        "\"reserveB\"",
        "0",
        "amtA#0"
      ],
      "stack_out": [
        "amtA#0",
        "0",
        "\"reserveB\""
      ]
    },
    "796": {
      "op": "app_global_get_ex",
      "defined_out": [
        "amtA#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "amtA#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "797": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "amtA#0",
        "maybe_value%4#0"
      ]
    },
    "798": {
      "op": "frame_dig -1",
      "stack_out": [
        "amtA#0",
        "maybe_value%4#0",
        "lpToBurn#0 (copy)"
      ]
    },
    "800": {
      "op": "*",
      "defined_out": [
        "amtA#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "amtA#0",
        "tmp%7#0"
      ]
    },
    "801": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amtA#0",
        "tmp%7#0",
        "0"
      ]
    },
    "802": {
      "op": "bytec_2 // \"totalLp\"",
      "stack_out": [
        "amtA#0",
        "tmp%7#0",
        "0",
        "\"totalLp\""
      ]
    },
    "803": {
      "op": "app_global_get_ex",
      "defined_out": [
        "amtA#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "amtA#0",
        "tmp%7#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "804": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "amtA#0",
        "tmp%7#0",
        "maybe_value%5#0"
      ]
    },
    "805": {
      "op": "/",
      "defined_out": [
        "amtA#0",
        "amtB#0"
      ],
      "stack_out": [
        "amtA#0",
        "amtB#0"
      ]
    },
    "806": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amtA#0",
        "amtB#0",
        "0"
      ]
    },
    "807": {
      "op": "bytec_0 // \"reserveA\"",
      "stack_out": [
        "amtA#0",
        "amtB#0",
        "0",
        "\"reserveA\""
      ]
    },
    "808": {
      "op": "app_global_get_ex",
      "defined_out": [
        "amtA#0",
        "amtB#0",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "amtA#0",
        "amtB#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "809": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "amtA#0",
        "amtB#0",
        "maybe_value%6#0"
      ]
    },
    "810": {
      "op": "uncover 2",
      "stack_out": [
        "amtB#0",
        "maybe_value%6#0",
        "amtA#0"
      ]
    },
    "812": {
      "op": "-",
      "defined_out": [
        "amtB#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "amtB#0",
        "new_state_value%0#0"
      ]
    },
    "813": {
      "op": "bytec_0 // \"reserveA\"",
      "stack_out": [
        "amtB#0",
        "new_state_value%0#0",
        "\"reserveA\""
      ]
    },
    "814": {
      "op": "swap",
      "stack_out": [
        "amtB#0",
        "\"reserveA\"",
        "new_state_value%0#0"
      ]
    },
    "815": {
      "op": "app_global_put",
      "stack_out": [
        "amtB#0"
      ]
    },
    "816": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amtB#0",
        "0"
      ]
    },
    "817": {
      "op": "bytec_1 // \"reserveB\"",
      "stack_out": [
        "amtB#0",
        "0",
        "\"reserveB\""
      ]
    },
    "818": {
      "op": "app_global_get_ex",
      "defined_out": [
        "amtB#0",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "amtB#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "819": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "amtB#0",
        "maybe_value%7#0"
      ]
    },
    "820": {
      "op": "swap",
      "stack_out": [
        "maybe_value%7#0",
        "amtB#0"
      ]
    },
    "821": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "822": {
      "op": "bytec_1 // \"reserveB\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"reserveB\""
      ]
    },
    "823": {
      "op": "swap",
      "stack_out": [
        "\"reserveB\"",
        "new_state_value%1#0"
      ]
    },
    "824": {
      "op": "app_global_put",
      "stack_out": []
    },
    "825": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "826": {
      "op": "bytec_2 // \"totalLp\"",
      "stack_out": [
        "0",
        "\"totalLp\""
      ]
    },
    "827": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "828": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%8#0"
      ]
    },
    "829": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%8#0",
        "lpToBurn#0 (copy)"
      ]
    },
    "831": {
      "op": "-",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "832": {
      "op": "bytec_2 // \"totalLp\"",
      "stack_out": [
        "new_state_value%2#0",
        "\"totalLp\""
      ]
    },
    "833": {
      "op": "swap",
      "stack_out": [
        "\"totalLp\"",
        "new_state_value%2#0"
      ]
    },
    "834": {
      "op": "app_global_put",
      "stack_out": []
    },
    "835": {
      "op": "bytec_3 // \"lp_\"",
      "stack_out": [
        "\"lp_\""
      ]
    },
    "836": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "tmp%8#0"
      ],
      "stack_out": [
        "\"lp_\"",
        "tmp%8#0"
      ]
    },
    "838": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "839": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "840": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ]
    },
    "841": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value_converted%1#0"
      ],
      "stack_out": [
        "maybe_exists%9#0",
        "maybe_value_converted%1#0"
      ]
    },
    "842": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%1#0",
        "maybe_exists%9#0"
      ]
    },
    "843": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value_converted%1#0"
      ]
    },
    "844": {
      "op": "bytec_3 // \"lp_\"",
      "stack_out": [
        "maybe_value_converted%1#0",
        "\"lp_\""
      ]
    },
    "845": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "maybe_value_converted%1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "maybe_value_converted%1#0",
        "\"lp_\"",
        "tmp%10#0"
      ]
    },
    "847": {
      "op": "concat",
      "defined_out": [
        "maybe_value_converted%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "maybe_value_converted%1#0",
        "tmp%11#0"
      ]
    },
    "848": {
      "op": "swap",
      "stack_out": [
        "tmp%11#0",
        "maybe_value_converted%1#0"
      ]
    },
    "849": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%11#0",
        "maybe_value_converted%1#0",
        "lpToBurn#0 (copy)"
      ]
    },
    "851": {
      "op": "-",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "new_box_value%0#0"
      ]
    },
    "852": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "new_box_value%1#0"
      ]
    },
    "853": {
      "op": "box_put",
      "stack_out": []
    },
    "854": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "855": {
      "retsub": true,
      "op": "retsub"
    },
    "856": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.swap",
      "params": {
        "sendAssetType#0": "uint64",
        "swapAmount#0": "uint64"
      },
      "block": "swap",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "859": {
      "op": "pushint 7000 // 7000",
      "defined_out": [
        "7000"
      ],
      "stack_out": [
        "7000"
      ]
    },
    "862": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "7000"
      ],
      "stack_out": [
        "7000",
        "0"
      ]
    },
    "863": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "866": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "868": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "870": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "871": {
      "error": "Expected group size of 2 (app call + asset transfer)",
      "op": "assert // Expected group size of 2 (app call + asset transfer)",
      "stack_out": []
    },
    "872": {
      "op": "frame_dig -2",
      "defined_out": [
        "sendAssetType#0 (copy)"
      ],
      "stack_out": [
        "sendAssetType#0 (copy)"
      ]
    },
    "874": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "sendAssetType#0 (copy)"
      ],
      "stack_out": [
        "sendAssetType#0 (copy)",
        "1"
      ]
    },
    "875": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "876": {
      "op": "bz swap_else_body@2",
      "stack_out": []
    },
    "879": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "880": {
      "op": "bytec_0 // \"reserveA\"",
      "defined_out": [
        "\"reserveA\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"reserveA\""
      ]
    },
    "881": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "882": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "883": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "swapAmount#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "swapAmount#0 (copy)"
      ]
    },
    "885": {
      "op": "+",
      "defined_out": [
        "resA#0"
      ],
      "stack_out": [
        "resA#0"
      ]
    },
    "886": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resA#0",
        "0"
      ]
    },
    "887": {
      "op": "bytec_1 // \"reserveB\"",
      "defined_out": [
        "\"reserveB\"",
        "0",
        "resA#0"
      ],
      "stack_out": [
        "resA#0",
        "0",
        "\"reserveB\""
      ]
    },
    "888": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "resA#0",
        "resB#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "maybe_exists%1#0"
      ]
    },
    "889": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resA#0",
        "resB#0"
      ]
    },
    "890": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resA#0",
        "resB#0",
        "0"
      ]
    },
    "891": {
      "op": "bytec_0 // \"reserveA\"",
      "stack_out": [
        "resA#0",
        "resB#0",
        "0",
        "\"reserveA\""
      ]
    },
    "892": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "resA#0",
        "resB#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "893": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resA#0",
        "resB#0",
        "maybe_value%2#0"
      ]
    },
    "894": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resA#0",
        "resB#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "895": {
      "op": "bytec_1 // \"reserveB\"",
      "stack_out": [
        "resA#0",
        "resB#0",
        "maybe_value%2#0",
        "0",
        "\"reserveB\""
      ]
    },
    "896": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "resA#0",
        "resB#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "897": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resA#0",
        "resB#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "898": {
      "op": "*",
      "defined_out": [
        "k#0",
        "resA#0",
        "resB#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "k#0"
      ]
    },
    "899": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resA#0",
        "resB#0",
        "k#0",
        "0"
      ]
    },
    "900": {
      "op": "bytec 7 // \"FEE_DEN\"",
      "defined_out": [
        "\"FEE_DEN\"",
        "0",
        "k#0",
        "resA#0",
        "resB#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "k#0",
        "0",
        "\"FEE_DEN\""
      ]
    },
    "902": {
      "op": "app_global_get_ex",
      "defined_out": [
        "k#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "resA#0",
        "resB#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "k#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "903": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resA#0",
        "resB#0",
        "k#0",
        "maybe_value%4#0"
      ]
    },
    "904": {
      "op": "*",
      "defined_out": [
        "resA#0",
        "resB#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "tmp%3#0"
      ]
    },
    "905": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resA#0",
        "resB#0",
        "tmp%3#0",
        "0"
      ]
    },
    "906": {
      "op": "bytec 6 // \"FEE_NUM\"",
      "defined_out": [
        "\"FEE_NUM\"",
        "0",
        "resA#0",
        "resB#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "tmp%3#0",
        "0",
        "\"FEE_NUM\""
      ]
    },
    "908": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "resA#0",
        "resB#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "tmp%3#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "909": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resA#0",
        "resB#0",
        "tmp%3#0",
        "maybe_value%5#0"
      ]
    },
    "910": {
      "op": "dig 3",
      "defined_out": [
        "maybe_value%5#0",
        "resA#0",
        "resA#0 (copy)",
        "resB#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "tmp%3#0",
        "maybe_value%5#0",
        "resA#0 (copy)"
      ]
    },
    "912": {
      "op": "*",
      "defined_out": [
        "resA#0",
        "resB#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "913": {
      "op": "/",
      "defined_out": [
        "newB#0",
        "resA#0",
        "resB#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "newB#0"
      ]
    },
    "914": {
      "op": "dig 1",
      "defined_out": [
        "newB#0",
        "resA#0",
        "resB#0",
        "resB#0 (copy)"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "newB#0",
        "resB#0 (copy)"
      ]
    },
    "916": {
      "op": "swap",
      "stack_out": [
        "resA#0",
        "resB#0",
        "resB#0 (copy)",
        "newB#0"
      ]
    },
    "917": {
      "op": "-",
      "defined_out": [
        "outB#0",
        "resA#0",
        "resB#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "outB#0"
      ]
    },
    "918": {
      "op": "bytec_0 // \"reserveA\"",
      "stack_out": [
        "resA#0",
        "resB#0",
        "outB#0",
        "\"reserveA\""
      ]
    },
    "919": {
      "op": "uncover 3",
      "stack_out": [
        "resB#0",
        "outB#0",
        "\"reserveA\"",
        "resA#0"
      ]
    },
    "921": {
      "op": "app_global_put",
      "stack_out": [
        "resB#0",
        "outB#0"
      ]
    },
    "922": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "923": {
      "op": "bytec_1 // \"reserveB\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"reserveB\""
      ]
    },
    "924": {
      "op": "swap",
      "stack_out": [
        "\"reserveB\"",
        "new_state_value%0#0"
      ]
    },
    "925": {
      "op": "app_global_put",
      "stack_out": []
    },
    "926": {
      "block": "swap_after_if_else@3",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "927": {
      "retsub": true,
      "op": "retsub"
    },
    "928": {
      "block": "swap_else_body@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "929": {
      "op": "bytec_1 // \"reserveB\"",
      "defined_out": [
        "\"reserveB\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"reserveB\""
      ]
    },
    "930": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "931": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%6#0"
      ]
    },
    "932": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%6#0",
        "swapAmount#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "swapAmount#0 (copy)"
      ]
    },
    "934": {
      "op": "+",
      "defined_out": [
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0"
      ]
    },
    "935": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resB\u2081#0",
        "0"
      ]
    },
    "936": {
      "op": "bytec_0 // \"reserveA\"",
      "defined_out": [
        "\"reserveA\"",
        "0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "0",
        "\"reserveA\""
      ]
    },
    "937": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "resA\u2081#0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "maybe_exists%7#0"
      ]
    },
    "938": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0"
      ]
    },
    "939": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "0"
      ]
    },
    "940": {
      "op": "bytec_0 // \"reserveA\"",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "0",
        "\"reserveA\""
      ]
    },
    "941": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "resA\u2081#0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "942": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "maybe_value%8#0"
      ]
    },
    "943": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "maybe_value%8#0",
        "0"
      ]
    },
    "944": {
      "op": "bytec_1 // \"reserveB\"",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "maybe_value%8#0",
        "0",
        "\"reserveB\""
      ]
    },
    "945": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "resA\u2081#0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "946": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ]
    },
    "947": {
      "op": "*",
      "defined_out": [
        "k\u2081#0",
        "resA\u2081#0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "k\u2081#0"
      ]
    },
    "948": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "k\u2081#0",
        "0"
      ]
    },
    "949": {
      "op": "bytec 7 // \"FEE_DEN\"",
      "defined_out": [
        "\"FEE_DEN\"",
        "0",
        "k\u2081#0",
        "resA\u2081#0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "k\u2081#0",
        "0",
        "\"FEE_DEN\""
      ]
    },
    "951": {
      "op": "app_global_get_ex",
      "defined_out": [
        "k\u2081#0",
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "resA\u2081#0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "k\u2081#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "952": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "k\u2081#0",
        "maybe_value%10#0"
      ]
    },
    "953": {
      "op": "*",
      "defined_out": [
        "resA\u2081#0",
        "resB\u2081#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "tmp%5#0"
      ]
    },
    "954": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "tmp%5#0",
        "0"
      ]
    },
    "955": {
      "op": "bytec 6 // \"FEE_NUM\"",
      "defined_out": [
        "\"FEE_NUM\"",
        "0",
        "resA\u2081#0",
        "resB\u2081#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "tmp%5#0",
        "0",
        "\"FEE_NUM\""
      ]
    },
    "957": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value%11#0",
        "resA\u2081#0",
        "resB\u2081#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "tmp%5#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "958": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "tmp%5#0",
        "maybe_value%11#0"
      ]
    },
    "959": {
      "op": "dig 3",
      "defined_out": [
        "maybe_value%11#0",
        "resA\u2081#0",
        "resB\u2081#0",
        "resB\u2081#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "tmp%5#0",
        "maybe_value%11#0",
        "resB\u2081#0 (copy)"
      ]
    },
    "961": {
      "op": "*",
      "defined_out": [
        "resA\u2081#0",
        "resB\u2081#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "962": {
      "op": "/",
      "defined_out": [
        "newA#0",
        "resA\u2081#0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "newA#0"
      ]
    },
    "963": {
      "op": "dig 1",
      "defined_out": [
        "newA#0",
        "resA\u2081#0",
        "resA\u2081#0 (copy)",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "newA#0",
        "resA\u2081#0 (copy)"
      ]
    },
    "965": {
      "op": "swap",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "resA\u2081#0 (copy)",
        "newA#0"
      ]
    },
    "966": {
      "op": "-",
      "defined_out": [
        "outA#0",
        "resA\u2081#0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "outA#0"
      ]
    },
    "967": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "new_state_value%1#0"
      ]
    },
    "968": {
      "op": "bytec_0 // \"reserveA\"",
      "stack_out": [
        "resB\u2081#0",
        "new_state_value%1#0",
        "\"reserveA\""
      ]
    },
    "969": {
      "op": "swap",
      "stack_out": [
        "resB\u2081#0",
        "\"reserveA\"",
        "new_state_value%1#0"
      ]
    },
    "970": {
      "op": "app_global_put",
      "stack_out": [
        "resB\u2081#0"
      ]
    },
    "971": {
      "op": "bytec_1 // \"reserveB\"",
      "stack_out": [
        "resB\u2081#0",
        "\"reserveB\""
      ]
    },
    "972": {
      "op": "swap",
      "stack_out": [
        "\"reserveB\"",
        "resB\u2081#0"
      ]
    },
    "973": {
      "op": "app_global_put",
      "stack_out": []
    },
    "974": {
      "op": "b swap_after_if_else@3"
    },
    "977": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.optIn",
      "params": {},
      "block": "optIn",
      "stack_in": [],
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "978": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "1000"
      ],
      "stack_out": [
        "1000",
        "0"
      ]
    },
    "979": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "982": {
      "op": "bytec_3 // \"lp_\"",
      "defined_out": [
        "\"lp_\""
      ],
      "stack_out": [
        "\"lp_\""
      ]
    },
    "983": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"lp_\"",
        "tmp%0#0"
      ]
    },
    "985": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "986": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "987": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "989": {
      "op": "bnz optIn_after_if_else@2",
      "stack_out": []
    },
    "992": {
      "op": "bytec_3 // \"lp_\"",
      "stack_out": [
        "\"lp_\""
      ]
    },
    "993": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "\"lp_\"",
        "tmp%2#0"
      ]
    },
    "995": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "996": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "997": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "new_box_value%0#0"
      ]
    },
    "998": {
      "op": "box_put",
      "stack_out": []
    },
    "999": {
      "block": "optIn_after_if_else@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "1000": {
      "retsub": true,
      "op": "retsub"
    },
    "1001": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.getLpBalance",
      "params": {
        "account#0": "bytes"
      },
      "block": "getLpBalance",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1004": {
      "op": "bytec_3 // \"lp_\"",
      "defined_out": [
        "\"lp_\""
      ],
      "stack_out": [
        "\"lp_\""
      ]
    },
    "1005": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"lp_\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "\"lp_\"",
        "account#0 (copy)"
      ]
    },
    "1007": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1008": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1009": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1010": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1012": {
      "op": "bnz getLpBalance_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1015": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1016": {
      "op": "swap"
    },
    "1017": {
      "retsub": true,
      "op": "retsub"
    },
    "1018": {
      "block": "getLpBalance_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1020": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1021": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "1022": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1023": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1024": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1025": {
      "op": "swap"
    },
    "1026": {
      "retsub": true,
      "op": "retsub"
    },
    "1027": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.getAssetAId",
      "params": {},
      "block": "getAssetAId",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1028": {
      "op": "bytec 8 // \"assetA\"",
      "defined_out": [
        "\"assetA\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"assetA\""
      ]
    },
    "1030": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1031": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1032": {
      "retsub": true,
      "op": "retsub"
    },
    "1033": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.getAssetBId",
      "params": {},
      "block": "getAssetBId",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1034": {
      "op": "bytec 9 // \"assetB\"",
      "defined_out": [
        "\"assetB\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"assetB\""
      ]
    },
    "1036": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1037": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1038": {
      "retsub": true,
      "op": "retsub"
    },
    "1039": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.getReserveA",
      "params": {},
      "block": "getReserveA",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1040": {
      "op": "bytec_0 // \"reserveA\"",
      "defined_out": [
        "\"reserveA\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"reserveA\""
      ]
    },
    "1041": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1042": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1043": {
      "retsub": true,
      "op": "retsub"
    },
    "1044": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.getReserveB",
      "params": {},
      "block": "getReserveB",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1045": {
      "op": "bytec_1 // \"reserveB\"",
      "defined_out": [
        "\"reserveB\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"reserveB\""
      ]
    },
    "1046": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1047": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1048": {
      "retsub": true,
      "op": "retsub"
    },
    "1049": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.getTotalLp",
      "params": {},
      "block": "getTotalLp",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1050": {
      "op": "bytec_2 // \"totalLp\"",
      "defined_out": [
        "\"totalLp\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalLp\""
      ]
    },
    "1051": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1052": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1053": {
      "retsub": true,
      "op": "retsub"
    }
  }
}