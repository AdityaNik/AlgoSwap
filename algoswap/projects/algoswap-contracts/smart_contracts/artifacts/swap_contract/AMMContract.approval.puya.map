{
  "version": 3,
  "sources": [
    "/home/adityanikkam/projects/hack-series/AlgoSwap/algoswap/projects/algoswap-contracts/smart_contracts/swap_contract/AMMContract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoBS;AAAsD;AAA7D;AACO;AAAsD;AAA7D;AACO;AAAqD;AAA5D;AAMiB;;AAAqD;;;AAAtE;AACiB;;AAAqD;AAAtE;AAbF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;AAAA;;AAmKE;;AAAA;AAAA;AAAA;;AAAA;AAnKF;;;AAAA;AAAA;;AAmKE;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA5CA;;AAAA;AAAA;AAAA;;AAAA;AA7GF;;;AAAA;AAAA;;;AAAA;AA6GE;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA1BA;;AAAA;AAAA;AAAA;;AAAA;AAnFF;;;AAAA;AAmFE;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA7CA;;AAAA;AAAA;AAAA;;AAAA;AAtCF;;;AAAA;AAAA;;;AAAA;AAsCE;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAhBF;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAgBE;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAhBF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBE;;;AACe;;;AAAb;AAAA;;;AAfK;;AAgBL;;AAAA;AAfK;;AAgBL;;AAAA;AAEA;;AAAA;;;AACA;;AAAA;;;AACO;AAAP;AAIF;;;AACE;AAEwB;;;;;;;;AADT;;;AADf;;;;AAGO;;;AAHP;;AAUF;;;AAIe;AAAb;AAAA;;;AAEc;;AAAc;;AAArB;AAAP;AA1CK;AAAA;;AA8Cc;AAAA;;AAAZ;;;AA7CF;AAAA;;AA6CsC;AAAA;;AAApC;;;;AAAP;AA1CK;AAAA;AAAA;AAAA;AA4CL;;;AA9CK;AAgDH;;AAAA;AA/CG;AAgDH;;AAAA;AA/CG;AAgDyB;AAA5B;AA7CqD;AAgDjC;;AAhDiC;AAgDV;AAA3C;AAAA;AAsBK;AAAP;AAzEK;AAAA;AAAA;AAAA;AAsDuB;;AAAA;AAxDvB;AAAA;AAAA;AAAA;AAwDuB;AAtDvB;AAAA;AAAA;AAAA;AAuDuB;;AAAA;AAxDvB;AAAA;AAAA;AAAA;AAwDuB;AAGT;AAAA;AAAA;AAAA;;AAAA;AAAA;AA5Dd;AAAA;AAAA;AAAA;AA+DH;;AAAA;AA/DG;AA+DH;AAAA;AA9DG;AAAA;AAAA;AAAA;AA+DH;;AAAA;AA/DG;AA+DH;AAAA;AA9DG;AAAA;AAAA;AAAA;AA+DH;AA/DG;AA+DH;AAAA;AA5DqD;AA+D5B;;AA/D4B;AA+DpB;AAAA;;AAA7B;;;AA/DiD;AAgE/B;;AAhE+B;AAgEnD;AAAA;AAAA;;;;AAhEmD;AAkE/B;;AAlE+B;AAkEvB;AAAA;AAAA;AAAA;AAAA;AAlEuB;AAkE/B;;AAlE+B;AAkEnD;AAAA;;AAAA;AAAA;AAAA;;;;;;;;AAQN;;;AACe;AAAb;AAAA;;;AA3EuD;AA4E5B;;AA5E4B;AA4EpB;AAAA;;AAAnC;AA5EuD;AA6EpB;;AA7EoB;AA6EZ;AAAA;AAAA;AAAA;AAAA;AAG3C;;AAAA;AACO;;AAAA;AAAP;AAtFK;AAAA;AAAA;AAAA;AAyFgB;;AAAA;AAvFhB;AAAA;AAAA;AAAA;AAuFgB;AAxFhB;AAAA;AAAA;AAAA;AAyFgB;;AAAA;AAxFhB;AAAA;AAAA;AAAA;AAwFgB;AA1FhB;AAAA;AAAA;AAAA;AA6FL;;AAAA;AA7FK;AA6FL;AAAA;AA5FK;AAAA;AAAA;AAAA;AA6FL;AAAA;AA7FK;AA6FL;AAAA;AA5FK;AAAA;AAAA;AAAA;AA6FL;;AAAA;AA7FK;AA6FL;AAAA;AA1FuD;AA2FnC;;AA3FmC;AA2F3B;AAAA;AAAA;AAAA;AAAA;AA3F2B;AA2FnC;;AA3FmC;AA2FvD;AAAA;;AAAA;AAAA;AAAA;AAKO;AAAP;AAIF;;;AAIe;;;AAAb;AAAA;;;AAEc;;AAAc;;AAArB;AAAP;AAEI;;AAAyB;AAAzB;AAAJ;;;AAjHK;AAAA;AAAA;AAAA;AAmHG;;AAAe;AAlHlB;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAsHe;AA9GL;AAAA;;AAAA;AAAA;AA+GQ;AAhHR;AAAA;;AAAA;AAAA;AAgH0C;;AAAA;AAAlC;AACf;;AAAA;AAAe;AAzHlB;AA4HH;;AAAA;AACsB;AA5HnB;AA4HH;AAAA;AAoBK;AAAP;AAhJK;AAAA;AAAA;AAAA;AAiIG;;AAAe;AAlIlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAqIe;AA7HL;AAAA;;AAAA;AAAA;AA8HQ;AA/HR;AAAA;;AAAA;AAAA;AA+H0C;;AAAA;AAAlC;AACf;;AAAA;AAAe;AAGC;AA3InB;AA2IH;AAAA;AA1IG;AA2IH;AAAA;;;;AAUW;AAAb;AAAA;;;AAjJuD;AAmJ9B;;AAnJ8B;AAmJtB;AAAA;;AAA7B;;;AAnJmD;AAoJjC;;AApJiC;AAoJV;AAA3C;AAAA;AAEK;AAAP;AAIF;;;AA1JyD;AAAA;;AAAA;AAAA;AA2JzB;AAAA;;AAA1B;;;AACY;AAAd;AAAA;AAE8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAhC;AAAA",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 1000 8000"
    },
    "9": {
      "op": "bytecblock \"reserveA\" \"reserveB\" \"lp_\" \"totalLp\" 0x151f7c75 0x00 \"FEE_NUM\" \"FEE_DEN\" 0x068101 \"assetA\" \"assetB\""
    },
    "82": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "84": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "87": {
      "op": "bytec_0 // \"reserveA\"",
      "defined_out": [
        "\"reserveA\""
      ],
      "stack_out": [
        "\"reserveA\""
      ]
    },
    "88": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"reserveA\"",
        "0"
      ],
      "stack_out": [
        "\"reserveA\"",
        "0"
      ]
    },
    "89": {
      "op": "app_global_put",
      "stack_out": []
    },
    "90": {
      "op": "bytec_1 // \"reserveB\"",
      "defined_out": [
        "\"reserveB\""
      ],
      "stack_out": [
        "\"reserveB\""
      ]
    },
    "91": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"reserveB\"",
        "0"
      ]
    },
    "92": {
      "op": "app_global_put",
      "stack_out": []
    },
    "93": {
      "op": "bytec_3 // \"totalLp\"",
      "defined_out": [
        "\"totalLp\""
      ],
      "stack_out": [
        "\"totalLp\""
      ]
    },
    "94": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"totalLp\"",
        "0"
      ]
    },
    "95": {
      "op": "app_global_put",
      "stack_out": []
    },
    "96": {
      "op": "bytec 6 // \"FEE_NUM\"",
      "defined_out": [
        "\"FEE_NUM\""
      ],
      "stack_out": [
        "\"FEE_NUM\""
      ]
    },
    "98": {
      "op": "pushint 997 // 997",
      "defined_out": [
        "\"FEE_NUM\"",
        "997"
      ],
      "stack_out": [
        "\"FEE_NUM\"",
        "997"
      ]
    },
    "101": {
      "op": "app_global_put",
      "stack_out": []
    },
    "102": {
      "op": "bytec 7 // \"FEE_DEN\"",
      "defined_out": [
        "\"FEE_DEN\""
      ],
      "stack_out": [
        "\"FEE_DEN\""
      ]
    },
    "104": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "\"FEE_DEN\"",
        "1000"
      ],
      "stack_out": [
        "\"FEE_DEN\"",
        "1000"
      ]
    },
    "105": {
      "op": "app_global_put",
      "stack_out": []
    },
    "106": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "108": {
      "op": "bz main_bare_routing@13",
      "stack_out": []
    },
    "111": {
      "op": "pushbytess 0x21d6d0b6 0xd70adabb 0xe4971963 0xfee44ae0 0x43e9d739 0x8241bf3f // method \"createPool(asset,asset)bool\", method \"addLiquidity(uint64,uint64)bool\", method \"removeLiquidity(uint64)bool\", method \"swap(uint64,uint64)bool\", method \"optIn()bool\", method \"getLpBalance(account)uint64\"",
      "defined_out": [
        "Method(addLiquidity(uint64,uint64)bool)",
        "Method(createPool(asset,asset)bool)",
        "Method(getLpBalance(account)uint64)",
        "Method(optIn()bool)",
        "Method(removeLiquidity(uint64)bool)",
        "Method(swap(uint64,uint64)bool)"
      ],
      "stack_out": [
        "Method(createPool(asset,asset)bool)",
        "Method(addLiquidity(uint64,uint64)bool)",
        "Method(removeLiquidity(uint64)bool)",
        "Method(swap(uint64,uint64)bool)",
        "Method(optIn()bool)",
        "Method(getLpBalance(account)uint64)"
      ]
    },
    "143": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addLiquidity(uint64,uint64)bool)",
        "Method(createPool(asset,asset)bool)",
        "Method(getLpBalance(account)uint64)",
        "Method(optIn()bool)",
        "Method(removeLiquidity(uint64)bool)",
        "Method(swap(uint64,uint64)bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createPool(asset,asset)bool)",
        "Method(addLiquidity(uint64,uint64)bool)",
        "Method(removeLiquidity(uint64)bool)",
        "Method(swap(uint64,uint64)bool)",
        "Method(optIn()bool)",
        "Method(getLpBalance(account)uint64)",
        "tmp%2#0"
      ]
    },
    "146": {
      "op": "match main_createPool_route@5 main_addLiquidity_route@6 main_removeLiquidity_route@7 main_swap_route@8 main_optIn_route@9 main_getLpBalance_route@10",
      "stack_out": []
    },
    "160": {
      "block": "main_after_if_else@17",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "161": {
      "op": "return",
      "stack_out": []
    },
    "162": {
      "block": "main_getLpBalance_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "164": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "165": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "166": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "168": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "169": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "172": {
      "op": "btoi",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "173": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "175": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.getLpBalance",
      "op": "callsub getLpBalance",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "178": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "179": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "181": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "182": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "183": {
      "op": "log",
      "stack_out": []
    },
    "184": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "185": {
      "op": "return",
      "stack_out": []
    },
    "186": {
      "block": "main_optIn_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "188": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "189": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "190": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "192": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "193": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.optIn",
      "op": "callsub optIn",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "196": {
      "op": "bytec 5 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00"
      ]
    },
    "198": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0",
        "0x00",
        "0"
      ]
    },
    "199": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%4#0"
      ]
    },
    "201": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0"
      ]
    },
    "202": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0",
        "0x151f7c75"
      ]
    },
    "204": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ]
    },
    "205": {
      "op": "concat",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "206": {
      "op": "log",
      "stack_out": []
    },
    "207": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "208": {
      "op": "return",
      "stack_out": []
    },
    "209": {
      "block": "main_swap_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "211": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "212": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "213": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "215": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "216": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "219": {
      "op": "btoi",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "220": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%4#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "223": {
      "op": "btoi",
      "defined_out": [
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "224": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.swap",
      "op": "callsub swap",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "227": {
      "op": "bytec 5 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00"
      ]
    },
    "229": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00",
        "0"
      ]
    },
    "230": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%3#0"
      ]
    },
    "232": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0"
      ]
    },
    "233": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "0x151f7c75"
      ]
    },
    "235": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ]
    },
    "236": {
      "op": "concat",
      "defined_out": [
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%31#0"
      ]
    },
    "237": {
      "op": "log",
      "stack_out": []
    },
    "238": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "239": {
      "op": "return",
      "stack_out": []
    },
    "240": {
      "block": "main_removeLiquidity_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "242": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "243": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "244": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "246": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "247": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "250": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "251": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.removeLiquidity",
      "op": "callsub removeLiquidity",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "254": {
      "op": "bytec 5 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00"
      ]
    },
    "256": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00",
        "0"
      ]
    },
    "257": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%2#0"
      ]
    },
    "259": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0"
      ]
    },
    "260": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0",
        "0x151f7c75"
      ]
    },
    "262": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ]
    },
    "263": {
      "op": "concat",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "264": {
      "op": "log",
      "stack_out": []
    },
    "265": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "266": {
      "op": "return",
      "stack_out": []
    },
    "267": {
      "block": "main_addLiquidity_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "269": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "270": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "271": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "273": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "274": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "277": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "278": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "281": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "282": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.addLiquidity",
      "op": "callsub addLiquidity",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "285": {
      "op": "bytec 5 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00"
      ]
    },
    "287": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00",
        "0"
      ]
    },
    "288": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%1#0"
      ]
    },
    "290": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "291": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "293": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ]
    },
    "294": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "295": {
      "op": "log",
      "stack_out": []
    },
    "296": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "297": {
      "op": "return",
      "stack_out": []
    },
    "298": {
      "block": "main_createPool_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "300": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "301": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "302": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "304": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "305": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "308": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "309": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "311": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "314": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "315": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "317": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.createPool",
      "op": "callsub createPool",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "320": {
      "op": "bytec 5 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "322": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "323": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "325": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "326": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "328": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "329": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "330": {
      "op": "log",
      "stack_out": []
    },
    "331": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "332": {
      "op": "return",
      "stack_out": []
    },
    "333": {
      "block": "main_bare_routing@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "335": {
      "op": "bnz main_after_if_else@17",
      "stack_out": []
    },
    "338": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "340": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "341": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "342": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "343": {
      "op": "return",
      "stack_out": []
    },
    "344": {
      "subroutine": "_puya_lib.util.ensure_budget",
      "params": {
        "required_budget#0": "uint64",
        "fee_source#0": "uint64"
      },
      "block": "ensure_budget",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "347": {
      "op": "frame_dig -2",
      "defined_out": [
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)"
      ]
    },
    "349": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)",
        "10"
      ]
    },
    "351": {
      "op": "+",
      "defined_out": [
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "352": {
      "block": "ensure_budget_while_top@1",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "required_budget_with_buffer#0"
      ]
    },
    "354": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ]
    },
    "356": {
      "op": ">",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ]
    },
    "357": {
      "op": "bz ensure_budget_after_while@7",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "360": {
      "op": "itxn_begin"
    },
    "361": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "appl"
      ]
    },
    "363": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "365": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "DeleteApplication"
      ]
    },
    "367": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "369": {
      "op": "bytec 8 // 0x068101",
      "defined_out": [
        "0x068101",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "371": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "373": {
      "op": "bytec 8 // 0x068101",
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "375": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "377": {
      "op": "frame_dig -1",
      "defined_out": [
        "fee_source#0 (copy)",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "fee_source#0 (copy)"
      ]
    },
    "379": {
      "op": "switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "385": {
      "block": "ensure_budget_switch_case_next@6",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "itxn_submit"
    },
    "386": {
      "op": "b ensure_budget_while_top@1"
    },
    "389": {
      "block": "ensure_budget_switch_case_1@4",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%2#0"
      ]
    },
    "391": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "393": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "396": {
      "block": "ensure_budget_switch_case_0@3",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0"
      ]
    },
    "397": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "399": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "402": {
      "block": "ensure_budget_after_while@7",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "403": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.createPool",
      "params": {
        "assetIdA#0": "uint64",
        "assetIdB#0": "uint64"
      },
      "block": "createPool",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "406": {
      "op": "pushint 3000 // 3000",
      "defined_out": [
        "3000"
      ],
      "stack_out": [
        "3000"
      ]
    },
    "409": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "3000"
      ],
      "stack_out": [
        "3000",
        "0"
      ]
    },
    "410": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "413": {
      "op": "bytec 9 // \"assetA\"",
      "defined_out": [
        "\"assetA\""
      ],
      "stack_out": [
        "\"assetA\""
      ]
    },
    "415": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"assetA\"",
        "assetIdA#0 (copy)"
      ],
      "stack_out": [
        "\"assetA\"",
        "assetIdA#0 (copy)"
      ]
    },
    "417": {
      "op": "app_global_put",
      "stack_out": []
    },
    "418": {
      "op": "bytec 10 // \"assetB\"",
      "defined_out": [
        "\"assetB\""
      ],
      "stack_out": [
        "\"assetB\""
      ]
    },
    "420": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"assetB\"",
        "assetIdB#0 (copy)"
      ],
      "stack_out": [
        "\"assetB\"",
        "assetIdB#0 (copy)"
      ]
    },
    "422": {
      "op": "app_global_put",
      "stack_out": []
    },
    "423": {
      "op": "frame_dig -2",
      "stack_out": [
        "assetIdA#0 (copy)"
      ]
    },
    "425": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.optInToAsset",
      "op": "callsub optInToAsset",
      "stack_out": []
    },
    "428": {
      "op": "frame_dig -1",
      "stack_out": [
        "assetIdB#0 (copy)"
      ]
    },
    "430": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.optInToAsset",
      "op": "callsub optInToAsset",
      "stack_out": []
    },
    "433": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "434": {
      "retsub": true,
      "op": "retsub"
    },
    "435": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.optInToAsset",
      "params": {
        "assetId#0": "uint64"
      },
      "block": "optInToAsset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "438": {
      "op": "itxn_begin"
    },
    "439": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "441": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetId#0 (copy)",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "assetId#0 (copy)"
      ]
    },
    "443": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "445": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "447": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "448": {
      "op": "itxn_field AssetAmount",
      "stack_out": []
    },
    "450": {
      "op": "pushint 4 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "452": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "454": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "455": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "457": {
      "op": "itxn_submit"
    },
    "458": {
      "retsub": true,
      "op": "retsub"
    },
    "459": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.addLiquidity",
      "params": {
        "assetAAmount#0": "uint64",
        "assetBAmount#0": "uint64"
      },
      "block": "addLiquidity",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "462": {
      "op": "intc_3 // 8000",
      "defined_out": [
        "8000"
      ],
      "stack_out": [
        "8000"
      ]
    },
    "463": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "8000"
      ],
      "stack_out": [
        "8000",
        "0"
      ]
    },
    "464": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "467": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "469": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "3"
      ]
    },
    "471": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "472": {
      "error": "Expected group size of 3 (app call + 2 asset transfers)",
      "op": "assert // Expected group size of 3 (app call + 2 asset transfers)",
      "stack_out": []
    },
    "473": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "474": {
      "op": "bytec 9 // \"assetA\"",
      "defined_out": [
        "\"assetA\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"assetA\""
      ]
    },
    "476": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "477": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "479": {
      "op": "bz addLiquidity_bool_false@3",
      "stack_out": []
    },
    "482": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "483": {
      "op": "bytec 10 // \"assetB\"",
      "defined_out": [
        "\"assetB\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"assetB\""
      ]
    },
    "485": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "486": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%1#0"
      ]
    },
    "488": {
      "op": "bz addLiquidity_bool_false@3",
      "stack_out": []
    },
    "491": {
      "op": "intc_1 // 1",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "492": {
      "block": "addLiquidity_bool_merge@4",
      "stack_in": [
        "and_result%0#0"
      ],
      "error": "Pool not initialized",
      "op": "assert // Pool not initialized",
      "defined_out": [],
      "stack_out": []
    },
    "493": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "494": {
      "op": "bytec_3 // \"totalLp\"",
      "defined_out": [
        "\"totalLp\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalLp\""
      ]
    },
    "495": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "496": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "497": {
      "op": "bnz addLiquidity_else_body@6",
      "stack_out": []
    },
    "500": {
      "op": "bytec_0 // \"reserveA\"",
      "defined_out": [
        "\"reserveA\""
      ],
      "stack_out": [
        "\"reserveA\""
      ]
    },
    "501": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"reserveA\"",
        "assetAAmount#0 (copy)"
      ],
      "stack_out": [
        "\"reserveA\"",
        "assetAAmount#0 (copy)"
      ]
    },
    "503": {
      "op": "app_global_put",
      "stack_out": []
    },
    "504": {
      "op": "bytec_1 // \"reserveB\"",
      "defined_out": [
        "\"reserveB\""
      ],
      "stack_out": [
        "\"reserveB\""
      ]
    },
    "505": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"reserveB\"",
        "assetBAmount#0 (copy)"
      ],
      "stack_out": [
        "\"reserveB\"",
        "assetBAmount#0 (copy)"
      ]
    },
    "507": {
      "op": "app_global_put",
      "stack_out": []
    },
    "508": {
      "op": "bytec_3 // \"totalLp\"",
      "stack_out": [
        "\"totalLp\""
      ]
    },
    "509": {
      "op": "intc_2 // 1000",
      "defined_out": [
        "\"totalLp\"",
        "1000"
      ],
      "stack_out": [
        "\"totalLp\"",
        "1000"
      ]
    },
    "510": {
      "op": "app_global_put",
      "stack_out": []
    },
    "511": {
      "op": "bytec_2 // \"lp_\"",
      "defined_out": [
        "\"lp_\""
      ],
      "stack_out": [
        "\"lp_\""
      ]
    },
    "512": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "tmp%3#0"
      ],
      "stack_out": [
        "\"lp_\"",
        "tmp%3#0"
      ]
    },
    "514": {
      "op": "concat",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "515": {
      "op": "intc_2 // 1000",
      "stack_out": [
        "tmp%4#0",
        "1000"
      ]
    },
    "516": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0",
        "new_box_value%0#0"
      ]
    },
    "517": {
      "op": "box_put",
      "stack_out": []
    },
    "518": {
      "block": "addLiquidity_after_if_else@10",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "519": {
      "retsub": true,
      "op": "retsub"
    },
    "520": {
      "block": "addLiquidity_else_body@6",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "521": {
      "op": "bytec_3 // \"totalLp\"",
      "defined_out": [
        "\"totalLp\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalLp\""
      ]
    },
    "522": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "523": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "524": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetAAmount#0 (copy)",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "assetAAmount#0 (copy)"
      ]
    },
    "526": {
      "op": "*",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "527": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%5#0",
        "0"
      ]
    },
    "528": {
      "op": "bytec_0 // \"reserveA\"",
      "defined_out": [
        "\"reserveA\"",
        "0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "0",
        "\"reserveA\""
      ]
    },
    "529": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "530": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%5#0",
        "maybe_value%4#0"
      ]
    },
    "531": {
      "op": "/",
      "defined_out": [
        "lpMintedA#0"
      ],
      "stack_out": [
        "lpMintedA#0"
      ]
    },
    "532": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lpMintedA#0",
        "0"
      ]
    },
    "533": {
      "op": "bytec_3 // \"totalLp\"",
      "stack_out": [
        "lpMintedA#0",
        "0",
        "\"totalLp\""
      ]
    },
    "534": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lpMintedA#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "lpMintedA#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "535": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lpMintedA#0",
        "maybe_value%5#0"
      ]
    },
    "536": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetBAmount#0 (copy)",
        "lpMintedA#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "lpMintedA#0",
        "maybe_value%5#0",
        "assetBAmount#0 (copy)"
      ]
    },
    "538": {
      "op": "*",
      "defined_out": [
        "lpMintedA#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lpMintedA#0",
        "tmp%6#0"
      ]
    },
    "539": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lpMintedA#0",
        "tmp%6#0",
        "0"
      ]
    },
    "540": {
      "op": "bytec_1 // \"reserveB\"",
      "defined_out": [
        "\"reserveB\"",
        "0",
        "lpMintedA#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lpMintedA#0",
        "tmp%6#0",
        "0",
        "\"reserveB\""
      ]
    },
    "541": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lpMintedA#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lpMintedA#0",
        "tmp%6#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "542": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lpMintedA#0",
        "tmp%6#0",
        "maybe_value%6#0"
      ]
    },
    "543": {
      "op": "/",
      "defined_out": [
        "lpMintedA#0",
        "lpMintedB#0"
      ],
      "stack_out": [
        "lpMintedA#0",
        "lpMintedB#0"
      ]
    },
    "544": {
      "op": "dup2",
      "defined_out": [
        "lpMintedA#0",
        "lpMintedA#0 (copy)",
        "lpMintedB#0",
        "lpMintedB#0 (copy)"
      ],
      "stack_out": [
        "lpMintedA#0",
        "lpMintedB#0",
        "lpMintedA#0 (copy)",
        "lpMintedB#0 (copy)"
      ]
    },
    "545": {
      "op": "<",
      "defined_out": [
        "lpMintedA#0",
        "lpMintedB#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "lpMintedA#0",
        "lpMintedB#0",
        "tmp%7#0"
      ]
    },
    "546": {
      "op": "swap",
      "stack_out": [
        "lpMintedA#0",
        "tmp%7#0",
        "lpMintedB#0"
      ]
    },
    "547": {
      "op": "cover 2",
      "stack_out": [
        "lpMintedB#0",
        "lpMintedA#0",
        "tmp%7#0"
      ]
    },
    "549": {
      "op": "select",
      "defined_out": [
        "lpToMint#0"
      ],
      "stack_out": [
        "lpToMint#0"
      ]
    },
    "550": {
      "op": "dup",
      "defined_out": [
        "lpToMint#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0"
      ]
    },
    "551": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "0"
      ]
    },
    "552": {
      "op": "bytec_0 // \"reserveA\"",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "0",
        "\"reserveA\""
      ]
    },
    "553": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lpToMint#0",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "554": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "maybe_value%7#0"
      ]
    },
    "555": {
      "op": "frame_dig -2",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "maybe_value%7#0",
        "assetAAmount#0 (copy)"
      ]
    },
    "557": {
      "op": "+",
      "defined_out": [
        "lpToMint#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "new_state_value%0#0"
      ]
    },
    "558": {
      "op": "bytec_0 // \"reserveA\"",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "new_state_value%0#0",
        "\"reserveA\""
      ]
    },
    "559": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "\"reserveA\"",
        "new_state_value%0#0"
      ]
    },
    "560": {
      "op": "app_global_put",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0"
      ]
    },
    "561": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "0"
      ]
    },
    "562": {
      "op": "bytec_1 // \"reserveB\"",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "0",
        "\"reserveB\""
      ]
    },
    "563": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lpToMint#0",
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "564": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "maybe_value%8#0"
      ]
    },
    "565": {
      "op": "frame_dig -1",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "maybe_value%8#0",
        "assetBAmount#0 (copy)"
      ]
    },
    "567": {
      "op": "+",
      "defined_out": [
        "lpToMint#0",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "new_state_value%1#0"
      ]
    },
    "568": {
      "op": "bytec_1 // \"reserveB\"",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "new_state_value%1#0",
        "\"reserveB\""
      ]
    },
    "569": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "\"reserveB\"",
        "new_state_value%1#0"
      ]
    },
    "570": {
      "op": "app_global_put",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0"
      ]
    },
    "571": {
      "op": "intc_0 // 0",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "0"
      ]
    },
    "572": {
      "op": "bytec_3 // \"totalLp\"",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "0",
        "\"totalLp\""
      ]
    },
    "573": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lpToMint#0",
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "574": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "lpToMint#0",
        "lpToMint#0",
        "maybe_value%9#0"
      ]
    },
    "575": {
      "op": "+",
      "defined_out": [
        "lpToMint#0",
        "new_state_value%2#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "new_state_value%2#0"
      ]
    },
    "576": {
      "op": "bytec_3 // \"totalLp\"",
      "stack_out": [
        "lpToMint#0",
        "new_state_value%2#0",
        "\"totalLp\""
      ]
    },
    "577": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "\"totalLp\"",
        "new_state_value%2#0"
      ]
    },
    "578": {
      "op": "app_global_put",
      "stack_out": [
        "lpToMint#0"
      ]
    },
    "579": {
      "op": "bytec_2 // \"lp_\"",
      "defined_out": [
        "\"lp_\"",
        "lpToMint#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "\"lp_\""
      ]
    },
    "580": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "lpToMint#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "\"lp_\"",
        "tmp%8#0"
      ]
    },
    "582": {
      "op": "concat",
      "defined_out": [
        "lpToMint#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%9#0"
      ]
    },
    "583": {
      "op": "box_len",
      "defined_out": [
        "lpToMint#0",
        "maybe_exists%10#0",
        "maybe_value%10#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "584": {
      "op": "bury 1",
      "stack_out": [
        "lpToMint#0",
        "maybe_exists%10#0"
      ]
    },
    "586": {
      "op": "bnz addLiquidity_else_body@8",
      "stack_out": [
        "lpToMint#0"
      ]
    },
    "589": {
      "op": "bytec_2 // \"lp_\"",
      "stack_out": [
        "lpToMint#0",
        "\"lp_\""
      ]
    },
    "590": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "lpToMint#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "\"lp_\"",
        "tmp%10#0"
      ]
    },
    "592": {
      "op": "concat",
      "defined_out": [
        "lpToMint#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%11#0"
      ]
    },
    "593": {
      "op": "swap",
      "stack_out": [
        "tmp%11#0",
        "lpToMint#0"
      ]
    },
    "594": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "new_box_value%1#0"
      ]
    },
    "595": {
      "op": "box_put",
      "stack_out": []
    },
    "596": {
      "op": "b addLiquidity_after_if_else@10"
    },
    "599": {
      "block": "addLiquidity_else_body@8",
      "stack_in": [
        "lpToMint#0"
      ],
      "op": "bytec_2 // \"lp_\"",
      "defined_out": [
        "\"lp_\""
      ],
      "stack_out": [
        "lpToMint#0",
        "\"lp_\""
      ]
    },
    "600": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "tmp%12#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "\"lp_\"",
        "tmp%12#0"
      ]
    },
    "602": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%13#0"
      ]
    },
    "603": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value%11#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "604": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "maybe_exists%11#0",
        "maybe_value%11#0"
      ]
    },
    "605": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value_converted%0#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "maybe_exists%11#0",
        "maybe_value_converted%0#0"
      ]
    },
    "606": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "maybe_value_converted%0#0",
        "maybe_exists%11#0"
      ]
    },
    "607": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "lpToMint#0",
        "maybe_value_converted%0#0"
      ]
    },
    "608": {
      "op": "bytec_2 // \"lp_\"",
      "stack_out": [
        "lpToMint#0",
        "maybe_value_converted%0#0",
        "\"lp_\""
      ]
    },
    "609": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "maybe_value_converted%0#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "maybe_value_converted%0#0",
        "\"lp_\"",
        "tmp%14#0"
      ]
    },
    "611": {
      "op": "concat",
      "defined_out": [
        "maybe_value_converted%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "maybe_value_converted%0#0",
        "tmp%15#0"
      ]
    },
    "612": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "tmp%15#0",
        "maybe_value_converted%0#0"
      ]
    },
    "613": {
      "op": "uncover 2",
      "defined_out": [
        "lpToMint#0",
        "maybe_value_converted%0#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "maybe_value_converted%0#0",
        "lpToMint#0"
      ]
    },
    "615": {
      "op": "+",
      "defined_out": [
        "new_box_value%2#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "new_box_value%2#0"
      ]
    },
    "616": {
      "op": "itob",
      "defined_out": [
        "new_box_value%3#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0",
        "new_box_value%3#0"
      ]
    },
    "617": {
      "op": "box_put",
      "stack_out": []
    },
    "618": {
      "op": "b addLiquidity_after_if_else@10"
    },
    "621": {
      "block": "addLiquidity_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "and_result%0#0"
      ],
      "stack_out": [
        "and_result%0#0"
      ]
    },
    "622": {
      "op": "b addLiquidity_bool_merge@4"
    },
    "625": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.removeLiquidity",
      "params": {
        "lpToBurn#0": "uint64"
      },
      "block": "removeLiquidity",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "628": {
      "op": "intc_3 // 8000",
      "defined_out": [
        "8000"
      ],
      "stack_out": [
        "8000"
      ]
    },
    "629": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "8000"
      ],
      "stack_out": [
        "8000",
        "0"
      ]
    },
    "630": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "633": {
      "op": "bytec_2 // \"lp_\"",
      "defined_out": [
        "\"lp_\""
      ],
      "stack_out": [
        "\"lp_\""
      ]
    },
    "634": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"lp_\"",
        "tmp%0#0"
      ]
    },
    "636": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "637": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "638": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "640": {
      "error": "No LP balance found",
      "op": "assert // No LP balance found",
      "stack_out": []
    },
    "641": {
      "op": "bytec_2 // \"lp_\"",
      "stack_out": [
        "\"lp_\""
      ]
    },
    "642": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "\"lp_\"",
        "tmp%2#0"
      ]
    },
    "644": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "645": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "646": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "647": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "userLp#0"
      ],
      "stack_out": [
        "maybe_exists%1#0",
        "userLp#0"
      ]
    },
    "648": {
      "op": "swap",
      "stack_out": [
        "userLp#0",
        "maybe_exists%1#0"
      ]
    },
    "649": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "userLp#0"
      ]
    },
    "650": {
      "op": "frame_dig -1",
      "defined_out": [
        "lpToBurn#0 (copy)",
        "userLp#0"
      ],
      "stack_out": [
        "userLp#0",
        "lpToBurn#0 (copy)"
      ]
    },
    "652": {
      "error": "Must burn positive amount",
      "op": "assert // Must burn positive amount",
      "stack_out": [
        "userLp#0"
      ]
    },
    "653": {
      "op": "frame_dig -1",
      "stack_out": [
        "userLp#0",
        "lpToBurn#0 (copy)"
      ]
    },
    "655": {
      "op": ">=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "656": {
      "error": "Insufficient LP balance",
      "op": "assert // Insufficient LP balance",
      "stack_out": []
    },
    "657": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "658": {
      "op": "bytec_0 // \"reserveA\"",
      "defined_out": [
        "\"reserveA\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"reserveA\""
      ]
    },
    "659": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "660": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "661": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%2#0",
        "lpToBurn#0 (copy)"
      ]
    },
    "663": {
      "op": "*",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "664": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%6#0",
        "0"
      ]
    },
    "665": {
      "op": "bytec_3 // \"totalLp\"",
      "defined_out": [
        "\"totalLp\"",
        "0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "0",
        "\"totalLp\""
      ]
    },
    "666": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "667": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%6#0",
        "maybe_value%3#0"
      ]
    },
    "668": {
      "op": "/",
      "defined_out": [
        "amtA#0"
      ],
      "stack_out": [
        "amtA#0"
      ]
    },
    "669": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amtA#0",
        "0"
      ]
    },
    "670": {
      "op": "bytec_1 // \"reserveB\"",
      "defined_out": [
        "\"reserveB\"",
        "0",
        "amtA#0"
      ],
      "stack_out": [
        "amtA#0",
        "0",
        "\"reserveB\""
      ]
    },
    "671": {
      "op": "app_global_get_ex",
      "defined_out": [
        "amtA#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "amtA#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "672": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "amtA#0",
        "maybe_value%4#0"
      ]
    },
    "673": {
      "op": "frame_dig -1",
      "stack_out": [
        "amtA#0",
        "maybe_value%4#0",
        "lpToBurn#0 (copy)"
      ]
    },
    "675": {
      "op": "*",
      "defined_out": [
        "amtA#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "amtA#0",
        "tmp%7#0"
      ]
    },
    "676": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amtA#0",
        "tmp%7#0",
        "0"
      ]
    },
    "677": {
      "op": "bytec_3 // \"totalLp\"",
      "stack_out": [
        "amtA#0",
        "tmp%7#0",
        "0",
        "\"totalLp\""
      ]
    },
    "678": {
      "op": "app_global_get_ex",
      "defined_out": [
        "amtA#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "amtA#0",
        "tmp%7#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "679": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "amtA#0",
        "tmp%7#0",
        "maybe_value%5#0"
      ]
    },
    "680": {
      "op": "/",
      "defined_out": [
        "amtA#0",
        "amtB#0"
      ],
      "stack_out": [
        "amtA#0",
        "amtB#0"
      ]
    },
    "681": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amtA#0",
        "amtB#0",
        "0"
      ]
    },
    "682": {
      "op": "bytec_0 // \"reserveA\"",
      "stack_out": [
        "amtA#0",
        "amtB#0",
        "0",
        "\"reserveA\""
      ]
    },
    "683": {
      "op": "app_global_get_ex",
      "defined_out": [
        "amtA#0",
        "amtB#0",
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "amtA#0",
        "amtB#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "684": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "amtA#0",
        "amtB#0",
        "maybe_value%6#0"
      ]
    },
    "685": {
      "op": "uncover 2",
      "stack_out": [
        "amtB#0",
        "maybe_value%6#0",
        "amtA#0"
      ]
    },
    "687": {
      "op": "-",
      "defined_out": [
        "amtB#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "amtB#0",
        "new_state_value%0#0"
      ]
    },
    "688": {
      "op": "bytec_0 // \"reserveA\"",
      "stack_out": [
        "amtB#0",
        "new_state_value%0#0",
        "\"reserveA\""
      ]
    },
    "689": {
      "op": "swap",
      "stack_out": [
        "amtB#0",
        "\"reserveA\"",
        "new_state_value%0#0"
      ]
    },
    "690": {
      "op": "app_global_put",
      "stack_out": [
        "amtB#0"
      ]
    },
    "691": {
      "op": "intc_0 // 0",
      "stack_out": [
        "amtB#0",
        "0"
      ]
    },
    "692": {
      "op": "bytec_1 // \"reserveB\"",
      "stack_out": [
        "amtB#0",
        "0",
        "\"reserveB\""
      ]
    },
    "693": {
      "op": "app_global_get_ex",
      "defined_out": [
        "amtB#0",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ],
      "stack_out": [
        "amtB#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "694": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "amtB#0",
        "maybe_value%7#0"
      ]
    },
    "695": {
      "op": "swap",
      "stack_out": [
        "maybe_value%7#0",
        "amtB#0"
      ]
    },
    "696": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "697": {
      "op": "bytec_1 // \"reserveB\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"reserveB\""
      ]
    },
    "698": {
      "op": "swap",
      "stack_out": [
        "\"reserveB\"",
        "new_state_value%1#0"
      ]
    },
    "699": {
      "op": "app_global_put",
      "stack_out": []
    },
    "700": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "701": {
      "op": "bytec_3 // \"totalLp\"",
      "stack_out": [
        "0",
        "\"totalLp\""
      ]
    },
    "702": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ],
      "stack_out": [
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "703": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%8#0"
      ]
    },
    "704": {
      "op": "frame_dig -1",
      "stack_out": [
        "maybe_value%8#0",
        "lpToBurn#0 (copy)"
      ]
    },
    "706": {
      "op": "-",
      "defined_out": [
        "new_state_value%2#0"
      ],
      "stack_out": [
        "new_state_value%2#0"
      ]
    },
    "707": {
      "op": "bytec_3 // \"totalLp\"",
      "stack_out": [
        "new_state_value%2#0",
        "\"totalLp\""
      ]
    },
    "708": {
      "op": "swap",
      "stack_out": [
        "\"totalLp\"",
        "new_state_value%2#0"
      ]
    },
    "709": {
      "op": "app_global_put",
      "stack_out": []
    },
    "710": {
      "op": "bytec_2 // \"lp_\"",
      "stack_out": [
        "\"lp_\""
      ]
    },
    "711": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "tmp%8#0"
      ],
      "stack_out": [
        "\"lp_\"",
        "tmp%8#0"
      ]
    },
    "713": {
      "op": "concat",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "714": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ],
      "stack_out": [
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "715": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0"
      ]
    },
    "716": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value_converted%1#0"
      ],
      "stack_out": [
        "maybe_exists%9#0",
        "maybe_value_converted%1#0"
      ]
    },
    "717": {
      "op": "swap",
      "stack_out": [
        "maybe_value_converted%1#0",
        "maybe_exists%9#0"
      ]
    },
    "718": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "maybe_value_converted%1#0"
      ]
    },
    "719": {
      "op": "bytec_2 // \"lp_\"",
      "stack_out": [
        "maybe_value_converted%1#0",
        "\"lp_\""
      ]
    },
    "720": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "maybe_value_converted%1#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "maybe_value_converted%1#0",
        "\"lp_\"",
        "tmp%10#0"
      ]
    },
    "722": {
      "op": "concat",
      "defined_out": [
        "maybe_value_converted%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "maybe_value_converted%1#0",
        "tmp%11#0"
      ]
    },
    "723": {
      "op": "swap",
      "stack_out": [
        "tmp%11#0",
        "maybe_value_converted%1#0"
      ]
    },
    "724": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%11#0",
        "maybe_value_converted%1#0",
        "lpToBurn#0 (copy)"
      ]
    },
    "726": {
      "op": "-",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "new_box_value%0#0"
      ]
    },
    "727": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0",
        "new_box_value%1#0"
      ]
    },
    "728": {
      "op": "box_put",
      "stack_out": []
    },
    "729": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "730": {
      "retsub": true,
      "op": "retsub"
    },
    "731": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.swap",
      "params": {
        "sendAssetType#0": "uint64",
        "swapAmount#0": "uint64"
      },
      "block": "swap",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "734": {
      "op": "pushint 7000 // 7000",
      "defined_out": [
        "7000"
      ],
      "stack_out": [
        "7000"
      ]
    },
    "737": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "7000"
      ],
      "stack_out": [
        "7000",
        "0"
      ]
    },
    "738": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "741": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "743": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "2"
      ]
    },
    "745": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "746": {
      "error": "Expected group size of 2 (app call + asset transfer)",
      "op": "assert // Expected group size of 2 (app call + asset transfer)",
      "stack_out": []
    },
    "747": {
      "op": "frame_dig -2",
      "defined_out": [
        "sendAssetType#0 (copy)"
      ],
      "stack_out": [
        "sendAssetType#0 (copy)"
      ]
    },
    "749": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "sendAssetType#0 (copy)"
      ],
      "stack_out": [
        "sendAssetType#0 (copy)",
        "1"
      ]
    },
    "750": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "751": {
      "op": "bz swap_else_body@2",
      "stack_out": []
    },
    "754": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "755": {
      "op": "bytec_0 // \"reserveA\"",
      "defined_out": [
        "\"reserveA\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"reserveA\""
      ]
    },
    "756": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "757": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "758": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%0#0",
        "swapAmount#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "swapAmount#0 (copy)"
      ]
    },
    "760": {
      "op": "+",
      "defined_out": [
        "resA#0"
      ],
      "stack_out": [
        "resA#0"
      ]
    },
    "761": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resA#0",
        "0"
      ]
    },
    "762": {
      "op": "bytec_1 // \"reserveB\"",
      "defined_out": [
        "\"reserveB\"",
        "0",
        "resA#0"
      ],
      "stack_out": [
        "resA#0",
        "0",
        "\"reserveB\""
      ]
    },
    "763": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "resA#0",
        "resB#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "maybe_exists%1#0"
      ]
    },
    "764": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resA#0",
        "resB#0"
      ]
    },
    "765": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resA#0",
        "resB#0",
        "0"
      ]
    },
    "766": {
      "op": "bytec_0 // \"reserveA\"",
      "stack_out": [
        "resA#0",
        "resB#0",
        "0",
        "\"reserveA\""
      ]
    },
    "767": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "resA#0",
        "resB#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "768": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resA#0",
        "resB#0",
        "maybe_value%2#0"
      ]
    },
    "769": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resA#0",
        "resB#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "770": {
      "op": "bytec_1 // \"reserveB\"",
      "stack_out": [
        "resA#0",
        "resB#0",
        "maybe_value%2#0",
        "0",
        "\"reserveB\""
      ]
    },
    "771": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "resA#0",
        "resB#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "772": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resA#0",
        "resB#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "773": {
      "op": "*",
      "defined_out": [
        "k#0",
        "resA#0",
        "resB#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "k#0"
      ]
    },
    "774": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resA#0",
        "resB#0",
        "k#0",
        "0"
      ]
    },
    "775": {
      "op": "bytec 7 // \"FEE_DEN\"",
      "defined_out": [
        "\"FEE_DEN\"",
        "0",
        "k#0",
        "resA#0",
        "resB#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "k#0",
        "0",
        "\"FEE_DEN\""
      ]
    },
    "777": {
      "op": "app_global_get_ex",
      "defined_out": [
        "k#0",
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "resA#0",
        "resB#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "k#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "778": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resA#0",
        "resB#0",
        "k#0",
        "maybe_value%4#0"
      ]
    },
    "779": {
      "op": "*",
      "defined_out": [
        "resA#0",
        "resB#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "tmp%3#0"
      ]
    },
    "780": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resA#0",
        "resB#0",
        "tmp%3#0",
        "0"
      ]
    },
    "781": {
      "op": "bytec 6 // \"FEE_NUM\"",
      "defined_out": [
        "\"FEE_NUM\"",
        "0",
        "resA#0",
        "resB#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "tmp%3#0",
        "0",
        "\"FEE_NUM\""
      ]
    },
    "783": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "resA#0",
        "resB#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "tmp%3#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "784": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resA#0",
        "resB#0",
        "tmp%3#0",
        "maybe_value%5#0"
      ]
    },
    "785": {
      "op": "dig 3",
      "defined_out": [
        "maybe_value%5#0",
        "resA#0",
        "resA#0 (copy)",
        "resB#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "tmp%3#0",
        "maybe_value%5#0",
        "resA#0 (copy)"
      ]
    },
    "787": {
      "op": "*",
      "defined_out": [
        "resA#0",
        "resB#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "788": {
      "op": "/",
      "defined_out": [
        "newB#0",
        "resA#0",
        "resB#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "newB#0"
      ]
    },
    "789": {
      "op": "dig 1",
      "defined_out": [
        "newB#0",
        "resA#0",
        "resB#0",
        "resB#0 (copy)"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "newB#0",
        "resB#0 (copy)"
      ]
    },
    "791": {
      "op": "swap",
      "stack_out": [
        "resA#0",
        "resB#0",
        "resB#0 (copy)",
        "newB#0"
      ]
    },
    "792": {
      "op": "-",
      "defined_out": [
        "outB#0",
        "resA#0",
        "resB#0"
      ],
      "stack_out": [
        "resA#0",
        "resB#0",
        "outB#0"
      ]
    },
    "793": {
      "op": "bytec_0 // \"reserveA\"",
      "stack_out": [
        "resA#0",
        "resB#0",
        "outB#0",
        "\"reserveA\""
      ]
    },
    "794": {
      "op": "uncover 3",
      "stack_out": [
        "resB#0",
        "outB#0",
        "\"reserveA\"",
        "resA#0"
      ]
    },
    "796": {
      "op": "app_global_put",
      "stack_out": [
        "resB#0",
        "outB#0"
      ]
    },
    "797": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "798": {
      "op": "bytec_1 // \"reserveB\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"reserveB\""
      ]
    },
    "799": {
      "op": "swap",
      "stack_out": [
        "\"reserveB\"",
        "new_state_value%0#0"
      ]
    },
    "800": {
      "op": "app_global_put",
      "stack_out": []
    },
    "801": {
      "block": "swap_after_if_else@3",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "802": {
      "retsub": true,
      "op": "retsub"
    },
    "803": {
      "block": "swap_else_body@2",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "804": {
      "op": "bytec_1 // \"reserveB\"",
      "defined_out": [
        "\"reserveB\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"reserveB\""
      ]
    },
    "805": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "806": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%6#0"
      ]
    },
    "807": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%6#0",
        "swapAmount#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "swapAmount#0 (copy)"
      ]
    },
    "809": {
      "op": "+",
      "defined_out": [
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0"
      ]
    },
    "810": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resB\u2081#0",
        "0"
      ]
    },
    "811": {
      "op": "bytec_0 // \"reserveA\"",
      "defined_out": [
        "\"reserveA\"",
        "0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "0",
        "\"reserveA\""
      ]
    },
    "812": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "resA\u2081#0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "maybe_exists%7#0"
      ]
    },
    "813": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0"
      ]
    },
    "814": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "0"
      ]
    },
    "815": {
      "op": "bytec_0 // \"reserveA\"",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "0",
        "\"reserveA\""
      ]
    },
    "816": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "resA\u2081#0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "817": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "maybe_value%8#0"
      ]
    },
    "818": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "maybe_value%8#0",
        "0"
      ]
    },
    "819": {
      "op": "bytec_1 // \"reserveB\"",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "maybe_value%8#0",
        "0",
        "\"reserveB\""
      ]
    },
    "820": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "resA\u2081#0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "maybe_value%8#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "821": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "maybe_value%8#0",
        "maybe_value%9#0"
      ]
    },
    "822": {
      "op": "*",
      "defined_out": [
        "k\u2081#0",
        "resA\u2081#0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "k\u2081#0"
      ]
    },
    "823": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "k\u2081#0",
        "0"
      ]
    },
    "824": {
      "op": "bytec 7 // \"FEE_DEN\"",
      "defined_out": [
        "\"FEE_DEN\"",
        "0",
        "k\u2081#0",
        "resA\u2081#0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "k\u2081#0",
        "0",
        "\"FEE_DEN\""
      ]
    },
    "826": {
      "op": "app_global_get_ex",
      "defined_out": [
        "k\u2081#0",
        "maybe_exists%10#0",
        "maybe_value%10#0",
        "resA\u2081#0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "k\u2081#0",
        "maybe_value%10#0",
        "maybe_exists%10#0"
      ]
    },
    "827": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "k\u2081#0",
        "maybe_value%10#0"
      ]
    },
    "828": {
      "op": "*",
      "defined_out": [
        "resA\u2081#0",
        "resB\u2081#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "tmp%5#0"
      ]
    },
    "829": {
      "op": "intc_0 // 0",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "tmp%5#0",
        "0"
      ]
    },
    "830": {
      "op": "bytec 6 // \"FEE_NUM\"",
      "defined_out": [
        "\"FEE_NUM\"",
        "0",
        "resA\u2081#0",
        "resB\u2081#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "tmp%5#0",
        "0",
        "\"FEE_NUM\""
      ]
    },
    "832": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%11#0",
        "maybe_value%11#0",
        "resA\u2081#0",
        "resB\u2081#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "tmp%5#0",
        "maybe_value%11#0",
        "maybe_exists%11#0"
      ]
    },
    "833": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "tmp%5#0",
        "maybe_value%11#0"
      ]
    },
    "834": {
      "op": "dig 3",
      "defined_out": [
        "maybe_value%11#0",
        "resA\u2081#0",
        "resB\u2081#0",
        "resB\u2081#0 (copy)",
        "tmp%5#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "tmp%5#0",
        "maybe_value%11#0",
        "resB\u2081#0 (copy)"
      ]
    },
    "836": {
      "op": "*",
      "defined_out": [
        "resA\u2081#0",
        "resB\u2081#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "837": {
      "op": "/",
      "defined_out": [
        "newA#0",
        "resA\u2081#0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "newA#0"
      ]
    },
    "838": {
      "op": "dig 1",
      "defined_out": [
        "newA#0",
        "resA\u2081#0",
        "resA\u2081#0 (copy)",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "newA#0",
        "resA\u2081#0 (copy)"
      ]
    },
    "840": {
      "op": "swap",
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "resA\u2081#0 (copy)",
        "newA#0"
      ]
    },
    "841": {
      "op": "-",
      "defined_out": [
        "outA#0",
        "resA\u2081#0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "resA\u2081#0",
        "outA#0"
      ]
    },
    "842": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0",
        "resB\u2081#0"
      ],
      "stack_out": [
        "resB\u2081#0",
        "new_state_value%1#0"
      ]
    },
    "843": {
      "op": "bytec_0 // \"reserveA\"",
      "stack_out": [
        "resB\u2081#0",
        "new_state_value%1#0",
        "\"reserveA\""
      ]
    },
    "844": {
      "op": "swap",
      "stack_out": [
        "resB\u2081#0",
        "\"reserveA\"",
        "new_state_value%1#0"
      ]
    },
    "845": {
      "op": "app_global_put",
      "stack_out": [
        "resB\u2081#0"
      ]
    },
    "846": {
      "op": "bytec_1 // \"reserveB\"",
      "stack_out": [
        "resB\u2081#0",
        "\"reserveB\""
      ]
    },
    "847": {
      "op": "swap",
      "stack_out": [
        "\"reserveB\"",
        "resB\u2081#0"
      ]
    },
    "848": {
      "op": "app_global_put",
      "stack_out": []
    },
    "849": {
      "op": "b swap_after_if_else@3"
    },
    "852": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.optIn",
      "params": {},
      "block": "optIn",
      "stack_in": [],
      "op": "intc_2 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "853": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "1000"
      ],
      "stack_out": [
        "1000",
        "0"
      ]
    },
    "854": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "857": {
      "op": "bytec_2 // \"lp_\"",
      "defined_out": [
        "\"lp_\""
      ],
      "stack_out": [
        "\"lp_\""
      ]
    },
    "858": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "tmp%0#0"
      ],
      "stack_out": [
        "\"lp_\"",
        "tmp%0#0"
      ]
    },
    "860": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "861": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "862": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "864": {
      "op": "bnz optIn_after_if_else@2",
      "stack_out": []
    },
    "867": {
      "op": "bytec_2 // \"lp_\"",
      "stack_out": [
        "\"lp_\""
      ]
    },
    "868": {
      "op": "txn Sender",
      "defined_out": [
        "\"lp_\"",
        "tmp%2#0"
      ],
      "stack_out": [
        "\"lp_\"",
        "tmp%2#0"
      ]
    },
    "870": {
      "op": "concat",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "871": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%3#0",
        "0"
      ]
    },
    "872": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "new_box_value%0#0"
      ]
    },
    "873": {
      "op": "box_put",
      "stack_out": []
    },
    "874": {
      "block": "optIn_after_if_else@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "875": {
      "retsub": true,
      "op": "retsub"
    },
    "876": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::AMMContract.getLpBalance",
      "params": {
        "account#0": "bytes"
      },
      "block": "getLpBalance",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "879": {
      "op": "bytec_2 // \"lp_\"",
      "defined_out": [
        "\"lp_\""
      ],
      "stack_out": [
        "\"lp_\""
      ]
    },
    "880": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"lp_\"",
        "account#0 (copy)"
      ],
      "stack_out": [
        "\"lp_\"",
        "account#0 (copy)"
      ]
    },
    "882": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "883": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "884": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "885": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "887": {
      "op": "bnz getLpBalance_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "890": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "891": {
      "op": "swap"
    },
    "892": {
      "retsub": true,
      "op": "retsub"
    },
    "893": {
      "block": "getLpBalance_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "895": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "896": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "897": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "898": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "899": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "900": {
      "op": "swap"
    },
    "901": {
      "retsub": true,
      "op": "retsub"
    }
  }
}