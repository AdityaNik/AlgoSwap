{
    "hints": {
        "createPool(asset,asset)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addLiquidity(asset,asset,uint64,uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "removeLiquidity(asset,asset,uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "swap(asset,asset,asset,uint64)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getLpBalance(asset,asset,account)uint64": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "poolExists(asset,asset)bool": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 0,
            "num_uints": 2
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "FEE_DEN": {
                    "type": "uint64",
                    "key": "FEE_DEN"
                },
                "FEE_NUM": {
                    "type": "uint64",
                    "key": "FEE_NUM"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "MultiPoolAMMContract",
        "methods": [
            {
                "name": "createPool",
                "args": [
                    {
                        "type": "asset",
                        "name": "assetIdA"
                    },
                    {
                        "type": "asset",
                        "name": "assetIdB"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "addLiquidity",
                "args": [
                    {
                        "type": "asset",
                        "name": "assetIdA"
                    },
                    {
                        "type": "asset",
                        "name": "assetIdB"
                    },
                    {
                        "type": "uint64",
                        "name": "assetAAmount"
                    },
                    {
                        "type": "uint64",
                        "name": "assetBAmount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "removeLiquidity",
                "args": [
                    {
                        "type": "asset",
                        "name": "assetIdA"
                    },
                    {
                        "type": "asset",
                        "name": "assetIdB"
                    },
                    {
                        "type": "uint64",
                        "name": "lpToBurn"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "swap",
                "args": [
                    {
                        "type": "asset",
                        "name": "assetIdA"
                    },
                    {
                        "type": "asset",
                        "name": "assetIdB"
                    },
                    {
                        "type": "asset",
                        "name": "sendAssetId"
                    },
                    {
                        "type": "uint64",
                        "name": "swapAmount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "getLpBalance",
                "args": [
                    {
                        "type": "asset",
                        "name": "assetIdA"
                    },
                    {
                        "type": "asset",
                        "name": "assetIdB"
                    },
                    {
                        "type": "account",
                        "name": "account"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "uint64"
                }
            },
            {
                "name": "getPoolInfo",
                "args": [
                    {
                        "type": "asset",
                        "name": "assetIdA"
                    },
                    {
                        "type": "asset",
                        "name": "assetIdB"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint64)"
                }
            },
            {
                "name": "poolExists",
                "args": [
                    {
                        "type": "asset",
                        "name": "assetIdA"
                    },
                    {
                        "type": "asset",
                        "name": "assetIdB"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "bool"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}