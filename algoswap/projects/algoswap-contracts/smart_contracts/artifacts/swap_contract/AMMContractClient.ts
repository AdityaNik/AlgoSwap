/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"AMMContract","structs":{},"methods":[{"name":"createPool","args":[{"type":"asset","name":"assetIdA"},{"type":"asset","name":"assetIdB"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"addLiquidity","args":[{"type":"uint64","name":"assetAAmount"},{"type":"uint64","name":"assetBAmount"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"removeLiquidity","args":[{"type":"uint64","name":"lpToBurn"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"swap","args":[{"type":"uint64","name":"sendAssetType"},{"type":"uint64","name":"swapAmount"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"optIn","args":[],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getLpBalance","args":[{"type":"account","name":"account"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":7,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"assetA":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRB"},"assetB":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXRC"},"reserveA":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmVzZXJ2ZUE="},"reserveB":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmVzZXJ2ZUI="},"totalLp":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxMcA=="},"FEE_NUM":{"keyType":"AVMString","valueType":"AVMUint64","key":"RkVFX05VTQ=="},"FEE_DEN":{"keyType":"AVMString","valueType":"AVMUint64","key":"RkVFX0RFTg=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"lpBalances":{"keyType":"address","valueType":"uint64","prefix":"bHBf"}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[573,615,684,865],"errorMessage":"Box must have value"},{"pc":[712],"errorMessage":"Expected group size of 2 (app call + asset transfer)"},{"pc":[438],"errorMessage":"Expected group size of 3 (app call + 2 asset transfers)"},{"pc":[622],"errorMessage":"Insufficient LP balance"},{"pc":[618],"errorMessage":"Must burn positive amount"},{"pc":[606],"errorMessage":"No LP balance found"},{"pc":[165,189,212,243,270,301],"errorMessage":"OnCompletion is not NoOp"},{"pc":[458],"errorMessage":"Pool not initialized"},{"pc":[341],"errorMessage":"can only call when creating"},{"pc":[168,192,215,246,273,304],"errorMessage":"can only call when not creating"},{"pc":[462,489,496,501,508,520,530,540,626,633,638,645,650,660,669,723,730,734,738,744,750,772,779,783,787,793,799],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxIDEwMDAgODAwMAogICAgYnl0ZWNibG9jayAicmVzZXJ2ZUEiICJyZXNlcnZlQiIgImxwXyIgInRvdGFsTHAiIDB4MTUxZjdjNzUgMHgwMCAiRkVFX05VTSIgIkZFRV9ERU4iIDB4MDY4MTAxICJhc3NldEEiICJhc3NldEIiCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYm56IG1haW5fYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIwCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUEgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGJ5dGVjXzAgLy8gInJlc2VydmVBIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIxCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUIgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGJ5dGVjXzEgLy8gInJlc2VydmVCIgogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIyCiAgICAvLyBwdWJsaWMgdG90YWxMcCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgYnl0ZWNfMyAvLyAidG90YWxMcCIKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyOAogICAgLy8gcHJpdmF0ZSByZWFkb25seSBGRUVfTlVNID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDk5NykgfSk7IC8vIDAuMyUgZmVlCiAgICBieXRlYyA2IC8vICJGRUVfTlVNIgogICAgcHVzaGludCA5OTcgLy8gOTk3CiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyOQogICAgLy8gcHJpdmF0ZSByZWFkb25seSBGRUVfREVOID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDEwMDApIH0pOwogICAgYnl0ZWMgNyAvLyAiRkVFX0RFTiIKICAgIGludGNfMiAvLyAxMDAwCiAgICBhcHBfZ2xvYmFsX3B1dAoKbWFpbl9hZnRlcl9pZl9lbHNlQDI6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE2CiAgICAvLyBleHBvcnQgY2xhc3MgQU1NQ29udHJhY3QgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gTnVtQXBwQXJncwogICAgYnogbWFpbl9iYXJlX3JvdXRpbmdAMTMKICAgIHB1c2hieXRlc3MgMHgyMWQ2ZDBiNiAweGQ3MGFkYWJiIDB4ZTQ5NzE5NjMgMHhmZWU0NGFlMCAweDQzZTlkNzM5IDB4ODI0MWJmM2YgLy8gbWV0aG9kICJjcmVhdGVQb29sKGFzc2V0LGFzc2V0KWJvb2wiLCBtZXRob2QgImFkZExpcXVpZGl0eSh1aW50NjQsdWludDY0KWJvb2wiLCBtZXRob2QgInJlbW92ZUxpcXVpZGl0eSh1aW50NjQpYm9vbCIsIG1ldGhvZCAic3dhcCh1aW50NjQsdWludDY0KWJvb2wiLCBtZXRob2QgIm9wdEluKClib29sIiwgbWV0aG9kICJnZXRMcEJhbGFuY2UoYWNjb3VudCl1aW50NjQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBtYWluX2NyZWF0ZVBvb2xfcm91dGVANSBtYWluX2FkZExpcXVpZGl0eV9yb3V0ZUA2IG1haW5fcmVtb3ZlTGlxdWlkaXR5X3JvdXRlQDcgbWFpbl9zd2FwX3JvdXRlQDggbWFpbl9vcHRJbl9yb3V0ZUA5IG1haW5fZ2V0THBCYWxhbmNlX3JvdXRlQDEwCgptYWluX2FmdGVyX2lmX2Vsc2VAMTc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE2CiAgICAvLyBleHBvcnQgY2xhc3MgQU1NQ29udHJhY3QgZXh0ZW5kcyBDb250cmFjdCB7CiAgICBpbnRjXzAgLy8gMAogICAgcmV0dXJuCgptYWluX2dldExwQmFsYW5jZV9yb3V0ZUAxMDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTY1CiAgICAvLyBwdWJsaWMgZ2V0THBCYWxhbmNlKGFjY291bnQ6IEFjY291bnQpOiB1aW50NjQgewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE2CiAgICAvLyBleHBvcnQgY2xhc3MgQU1NQ29udHJhY3QgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hcyBBY2NvdW50cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNjUKICAgIC8vIHB1YmxpYyBnZXRMcEJhbGFuY2UoYWNjb3VudDogQWNjb3VudCk6IHVpbnQ2NCB7CiAgICBjYWxsc3ViIGdldExwQmFsYW5jZQogICAgaXRvYgogICAgYnl0ZWMgNCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9vcHRJbl9yb3V0ZUA5OgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNTUKICAgIC8vIHB1YmxpYyBvcHRJbigpOiBib29sZWFuIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBvcHRJbgogICAgYnl0ZWMgNSAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjIDQgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fc3dhcF9yb3V0ZUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMTEtMTE0CiAgICAvLyBwdWJsaWMgc3dhcCgKICAgIC8vICAgc2VuZEFzc2V0VHlwZTogdWludDY0LCAvLyAxIGlmIGFzc2V0X2EgLT4gYiwgMiBpZiBhc3NldF9iIC0+IGEKICAgIC8vICAgc3dhcEFtb3VudDogdWludDY0CiAgICAvLyApOiBib29sZWFuIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNgogICAgLy8gZXhwb3J0IGNsYXNzIEFNTUNvbnRyYWN0IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMTEtMTE0CiAgICAvLyBwdWJsaWMgc3dhcCgKICAgIC8vICAgc2VuZEFzc2V0VHlwZTogdWludDY0LCAvLyAxIGlmIGFzc2V0X2EgLT4gYiwgMiBpZiBhc3NldF9iIC0+IGEKICAgIC8vICAgc3dhcEFtb3VudDogdWludDY0CiAgICAvLyApOiBib29sZWFuIHsKICAgIGNhbGxzdWIgc3dhcAogICAgYnl0ZWMgNSAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjIDQgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fcmVtb3ZlTGlxdWlkaXR5X3JvdXRlQDc6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjg1CiAgICAvLyBwdWJsaWMgcmVtb3ZlTGlxdWlkaXR5KGxwVG9CdXJuOiB1aW50NjQpOiBib29sZWFuIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNgogICAgLy8gZXhwb3J0IGNsYXNzIEFNTUNvbnRyYWN0IGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgYnRvaQogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo4NQogICAgLy8gcHVibGljIHJlbW92ZUxpcXVpZGl0eShscFRvQnVybjogdWludDY0KTogYm9vbGVhbiB7CiAgICBjYWxsc3ViIHJlbW92ZUxpcXVpZGl0eQogICAgYnl0ZWMgNSAvLyAweDAwCiAgICBpbnRjXzAgLy8gMAogICAgdW5jb3ZlciAyCiAgICBzZXRiaXQKICAgIGJ5dGVjIDQgLy8gMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fYWRkTGlxdWlkaXR5X3JvdXRlQDY6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjQwLTQzCiAgICAvLyBwdWJsaWMgYWRkTGlxdWlkaXR5KAogICAgLy8gICBhc3NldEFBbW91bnQ6IHVpbnQ2NCwKICAgIC8vICAgYXNzZXRCQW1vdW50OiB1aW50NjQKICAgIC8vICk6IGJvb2xlYW4gewogICAgdHhuIE9uQ29tcGxldGlvbgogICAgIQogICAgYXNzZXJ0IC8vIE9uQ29tcGxldGlvbiBpcyBub3QgTm9PcAogICAgdHhuIEFwcGxpY2F0aW9uSUQKICAgIGFzc2VydCAvLyBjYW4gb25seSBjYWxsIHdoZW4gbm90IGNyZWF0aW5nCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE2CiAgICAvLyBleHBvcnQgY2xhc3MgQU1NQ29udHJhY3QgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICBidG9pCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAyCiAgICBidG9pCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjQwLTQzCiAgICAvLyBwdWJsaWMgYWRkTGlxdWlkaXR5KAogICAgLy8gICBhc3NldEFBbW91bnQ6IHVpbnQ2NCwKICAgIC8vICAgYXNzZXRCQW1vdW50OiB1aW50NjQKICAgIC8vICk6IGJvb2xlYW4gewogICAgY2FsbHN1YiBhZGRMaXF1aWRpdHkKICAgIGJ5dGVjIDUgLy8gMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBieXRlYyA0IC8vIDB4MTUxZjdjNzUKICAgIHN3YXAKICAgIGNvbmNhdAogICAgbG9nCiAgICBpbnRjXzEgLy8gMQogICAgcmV0dXJuCgptYWluX2NyZWF0ZVBvb2xfcm91dGVANToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MzIKICAgIC8vIHB1YmxpYyBjcmVhdGVQb29sKGFzc2V0SWRBOiBBc3NldCwgYXNzZXRJZEI6IEFzc2V0KTogYm9vbGVhbiB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTYKICAgIC8vIGV4cG9ydCBjbGFzcyBBTU1Db250cmFjdCBleHRlbmRzIENvbnRyYWN0IHsKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIHR4bmFzIEFzc2V0cwogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMgogICAgYnRvaQogICAgdHhuYXMgQXNzZXRzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjMyCiAgICAvLyBwdWJsaWMgY3JlYXRlUG9vbChhc3NldElkQTogQXNzZXQsIGFzc2V0SWRCOiBBc3NldCk6IGJvb2xlYW4gewogICAgY2FsbHN1YiBjcmVhdGVQb29sCiAgICBieXRlYyA1IC8vIDB4MDAKICAgIGludGNfMCAvLyAwCiAgICB1bmNvdmVyIDIKICAgIHNldGJpdAogICAgYnl0ZWMgNCAvLyAweDE1MWY3Yzc1CiAgICBzd2FwCiAgICBjb25jYXQKICAgIGxvZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdAMTM6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE2CiAgICAvLyBleHBvcnQgY2xhc3MgQU1NQ29udHJhY3QgZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDE3CiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIF9wdXlhX2xpYi51dGlsLmVuc3VyZV9idWRnZXQocmVxdWlyZWRfYnVkZ2V0OiB1aW50NjQsIGZlZV9zb3VyY2U6IHVpbnQ2NCkgLT4gdm9pZDoKZW5zdXJlX2J1ZGdldDoKICAgIHByb3RvIDIgMAogICAgZnJhbWVfZGlnIC0yCiAgICBwdXNoaW50IDEwIC8vIDEwCiAgICArCgplbnN1cmVfYnVkZ2V0X3doaWxlX3RvcEAxOgogICAgZnJhbWVfZGlnIDAKICAgIGdsb2JhbCBPcGNvZGVCdWRnZXQKICAgID4KICAgIGJ6IGVuc3VyZV9idWRnZXRfYWZ0ZXJfd2hpbGVANwogICAgaXR4bl9iZWdpbgogICAgcHVzaGludCA2IC8vIGFwcGwKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIHB1c2hpbnQgNSAvLyBEZWxldGVBcHBsaWNhdGlvbgogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIGJ5dGVjIDggLy8gMHgwNjgxMDEKICAgIGl0eG5fZmllbGQgQXBwcm92YWxQcm9ncmFtCiAgICBieXRlYyA4IC8vIDB4MDY4MTAxCiAgICBpdHhuX2ZpZWxkIENsZWFyU3RhdGVQcm9ncmFtCiAgICBmcmFtZV9kaWcgLTEKICAgIHN3aXRjaCBlbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlXzBAMyBlbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlXzFANAoKZW5zdXJlX2J1ZGdldF9zd2l0Y2hfY2FzZV9uZXh0QDY6CiAgICBpdHhuX3N1Ym1pdAogICAgYiBlbnN1cmVfYnVkZ2V0X3doaWxlX3RvcEAxCgplbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlXzFANDoKICAgIGdsb2JhbCBNaW5UeG5GZWUKICAgIGl0eG5fZmllbGQgRmVlCiAgICBiIGVuc3VyZV9idWRnZXRfc3dpdGNoX2Nhc2VfbmV4dEA2CgplbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlXzBAMzoKICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgYiBlbnN1cmVfYnVkZ2V0X3N3aXRjaF9jYXNlX25leHRANgoKZW5zdXJlX2J1ZGdldF9hZnRlcl93aGlsZUA3OgogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo6QU1NQ29udHJhY3QuY3JlYXRlUG9vbChhc3NldElkQTogdWludDY0LCBhc3NldElkQjogdWludDY0KSAtPiB1aW50NjQ6CmNyZWF0ZVBvb2w6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjMyCiAgICAvLyBwdWJsaWMgY3JlYXRlUG9vbChhc3NldElkQTogQXNzZXQsIGFzc2V0SWRCOiBBc3NldCk6IGJvb2xlYW4gewogICAgcHJvdG8gMiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjMzCiAgICAvLyBlbnN1cmVCdWRnZXQoMzAwMCkKICAgIHB1c2hpbnQgMzAwMCAvLyAzMDAwCiAgICBpbnRjXzAgLy8gMAogICAgY2FsbHN1YiBlbnN1cmVfYnVkZ2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE4CiAgICAvLyBwdWJsaWMgYXNzZXRBID0gR2xvYmFsU3RhdGU8QXNzZXQ+KCkKICAgIGJ5dGVjIDkgLy8gImFzc2V0QSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MzQKICAgIC8vIHRoaXMuYXNzZXRBLnZhbHVlID0gYXNzZXRJZEEKICAgIGZyYW1lX2RpZyAtMgogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTkKICAgIC8vIHB1YmxpYyBhc3NldEIgPSBHbG9iYWxTdGF0ZTxBc3NldD4oKQogICAgYnl0ZWMgMTAgLy8gImFzc2V0QiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MzUKICAgIC8vIHRoaXMuYXNzZXRCLnZhbHVlID0gYXNzZXRJZEIKICAgIGZyYW1lX2RpZyAtMQogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MzYKICAgIC8vIHJldHVybiB0cnVlCiAgICBpbnRjXzEgLy8gMQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo6QU1NQ29udHJhY3QuYWRkTGlxdWlkaXR5KGFzc2V0QUFtb3VudDogdWludDY0LCBhc3NldEJBbW91bnQ6IHVpbnQ2NCkgLT4gdWludDY0OgphZGRMaXF1aWRpdHk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjQwLTQzCiAgICAvLyBwdWJsaWMgYWRkTGlxdWlkaXR5KAogICAgLy8gICBhc3NldEFBbW91bnQ6IHVpbnQ2NCwKICAgIC8vICAgYXNzZXRCQW1vdW50OiB1aW50NjQKICAgIC8vICk6IGJvb2xlYW4gewogICAgcHJvdG8gMiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjQ0CiAgICAvLyBlbnN1cmVCdWRnZXQoODAwMCkKICAgIGludGNfMyAvLyA4MDAwCiAgICBpbnRjXzAgLy8gMAogICAgY2FsbHN1YiBlbnN1cmVfYnVkZ2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjQ2CiAgICAvLyBhc3NlcnQoR2xvYmFsLmdyb3VwU2l6ZSA9PT0gMywgIkV4cGVjdGVkIGdyb3VwIHNpemUgb2YgMyAoYXBwIGNhbGwgKyAyIGFzc2V0IHRyYW5zZmVycykiKTsKICAgIGdsb2JhbCBHcm91cFNpemUKICAgIHB1c2hpbnQgMyAvLyAzCiAgICA9PQogICAgYXNzZXJ0IC8vIEV4cGVjdGVkIGdyb3VwIHNpemUgb2YgMyAoYXBwIGNhbGwgKyAyIGFzc2V0IHRyYW5zZmVycykKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTgKICAgIC8vIHB1YmxpYyBhc3NldEEgPSBHbG9iYWxTdGF0ZTxBc3NldD4oKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDkgLy8gImFzc2V0QSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6NTAKICAgIC8vIGFzc2VydCh0aGlzLmFzc2V0QS5oYXNWYWx1ZSAmJiB0aGlzLmFzc2V0Qi5oYXNWYWx1ZSwgIlBvb2wgbm90IGluaXRpYWxpemVkIikKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBidXJ5IDEKICAgIGJ6IGFkZExpcXVpZGl0eV9ib29sX2ZhbHNlQDMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTkKICAgIC8vIHB1YmxpYyBhc3NldEIgPSBHbG9iYWxTdGF0ZTxBc3NldD4oKQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDEwIC8vICJhc3NldEIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjUwCiAgICAvLyBhc3NlcnQodGhpcy5hc3NldEEuaGFzVmFsdWUgJiYgdGhpcy5hc3NldEIuaGFzVmFsdWUsICJQb29sIG5vdCBpbml0aWFsaXplZCIpCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYnVyeSAxCiAgICBieiBhZGRMaXF1aWRpdHlfYm9vbF9mYWxzZUAzCiAgICBpbnRjXzEgLy8gMQoKYWRkTGlxdWlkaXR5X2Jvb2xfbWVyZ2VANDoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6NTAKICAgIC8vIGFzc2VydCh0aGlzLmFzc2V0QS5oYXNWYWx1ZSAmJiB0aGlzLmFzc2V0Qi5oYXNWYWx1ZSwgIlBvb2wgbm90IGluaXRpYWxpemVkIikKICAgIGFzc2VydCAvLyBQb29sIG5vdCBpbml0aWFsaXplZAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMgogICAgLy8gcHVibGljIHRvdGFsTHAgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJ0b3RhbExwIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6NTIKICAgIC8vIGlmICh0aGlzLnRvdGFsTHAudmFsdWUgPT09IFVpbnQ2NCgwKSkgewogICAgYm56IGFkZExpcXVpZGl0eV9lbHNlX2JvZHlANgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMAogICAgLy8gcHVibGljIHJlc2VydmVBID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBieXRlY18wIC8vICJyZXNlcnZlQSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6NTQKICAgIC8vIHRoaXMucmVzZXJ2ZUEudmFsdWUgPSBhc3NldEFBbW91bnQKICAgIGZyYW1lX2RpZyAtMgogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjEKICAgIC8vIHB1YmxpYyByZXNlcnZlQiA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgYnl0ZWNfMSAvLyAicmVzZXJ2ZUIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjU1CiAgICAvLyB0aGlzLnJlc2VydmVCLnZhbHVlID0gYXNzZXRCQW1vdW50CiAgICBmcmFtZV9kaWcgLTEKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIyCiAgICAvLyBwdWJsaWMgdG90YWxMcCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgYnl0ZWNfMyAvLyAidG90YWxMcCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6NTYKICAgIC8vIHRoaXMudG90YWxMcC52YWx1ZSA9IFVpbnQ2NCgxMDAwKQogICAgaW50Y18yIC8vIDEwMDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjI1CiAgICAvLyBwdWJsaWMgbHBCYWxhbmNlcyA9IEJveE1hcDxBY2NvdW50LCB1aW50NjQ+KHsga2V5UHJlZml4OiBCeXRlc2BscF9gIH0pCiAgICBieXRlY18yIC8vICJscF8iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjU5CiAgICAvLyB0aGlzLmxwQmFsYW5jZXMoVHhuLnNlbmRlcikudmFsdWUgPSBVaW50NjQoMTAwMCkKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjUKICAgIC8vIHB1YmxpYyBscEJhbGFuY2VzID0gQm94TWFwPEFjY291bnQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6IEJ5dGVzYGxwX2AgfSkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo1OQogICAgLy8gdGhpcy5scEJhbGFuY2VzKFR4bi5zZW5kZXIpLnZhbHVlID0gVWludDY0KDEwMDApCiAgICBpbnRjXzIgLy8gMTAwMAogICAgaXRvYgogICAgYm94X3B1dAoKYWRkTGlxdWlkaXR5X2FmdGVyX2lmX2Vsc2VAMTA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjgxCiAgICAvLyByZXR1cm4gdHJ1ZQogICAgaW50Y18xIC8vIDEKICAgIHJldHN1YgoKYWRkTGlxdWlkaXR5X2Vsc2VfYm9keUA2OgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMgogICAgLy8gcHVibGljIHRvdGFsTHAgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJ0b3RhbExwIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6NjIKICAgIC8vIGNvbnN0IGxwTWludGVkQTogdWludDY0ID0gYXNzZXRBQW1vdW50ICogdGhpcy50b3RhbExwLnZhbHVlIC8gdGhpcy5yZXNlcnZlQS52YWx1ZQogICAgZnJhbWVfZGlnIC0yCiAgICAqCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIwCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUEgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJyZXNlcnZlQSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjYyCiAgICAvLyBjb25zdCBscE1pbnRlZEE6IHVpbnQ2NCA9IGFzc2V0QUFtb3VudCAqIHRoaXMudG90YWxMcC52YWx1ZSAvIHRoaXMucmVzZXJ2ZUEudmFsdWUKICAgIC8KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjIKICAgIC8vIHB1YmxpYyB0b3RhbExwID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAidG90YWxMcCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjYzCiAgICAvLyBjb25zdCBscE1pbnRlZEI6IHVpbnQ2NCA9IGFzc2V0QkFtb3VudCAqIHRoaXMudG90YWxMcC52YWx1ZSAvIHRoaXMucmVzZXJ2ZUIudmFsdWUKICAgIGZyYW1lX2RpZyAtMQogICAgKgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMQogICAgLy8gcHVibGljIHJlc2VydmVCID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAicmVzZXJ2ZUIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo2MwogICAgLy8gY29uc3QgbHBNaW50ZWRCOiB1aW50NjQgPSBhc3NldEJBbW91bnQgKiB0aGlzLnRvdGFsTHAudmFsdWUgLyB0aGlzLnJlc2VydmVCLnZhbHVlCiAgICAvCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjY2CiAgICAvLyBjb25zdCBscFRvTWludCA9IGxwTWludGVkQSA8IGxwTWludGVkQiA/IGxwTWludGVkQSA6IGxwTWludGVkQgogICAgZHVwMgogICAgPAogICAgc3dhcAogICAgY292ZXIgMgogICAgc2VsZWN0CiAgICBkdXAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjAKICAgIC8vIHB1YmxpYyByZXNlcnZlQSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gInJlc2VydmVBIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6NjkKICAgIC8vIHRoaXMucmVzZXJ2ZUEudmFsdWUgKz0gYXNzZXRBQW1vdW50CiAgICBmcmFtZV9kaWcgLTIKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjAKICAgIC8vIHB1YmxpYyByZXNlcnZlQSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgYnl0ZWNfMCAvLyAicmVzZXJ2ZUEiCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjY5CiAgICAvLyB0aGlzLnJlc2VydmVBLnZhbHVlICs9IGFzc2V0QUFtb3VudAogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjEKICAgIC8vIHB1YmxpYyByZXNlcnZlQiA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gInJlc2VydmVCIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6NzAKICAgIC8vIHRoaXMucmVzZXJ2ZUIudmFsdWUgKz0gYXNzZXRCQW1vdW50CiAgICBmcmFtZV9kaWcgLTEKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjEKICAgIC8vIHB1YmxpYyByZXNlcnZlQiA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgYnl0ZWNfMSAvLyAicmVzZXJ2ZUIiCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjcwCiAgICAvLyB0aGlzLnJlc2VydmVCLnZhbHVlICs9IGFzc2V0QkFtb3VudAogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjIKICAgIC8vIHB1YmxpYyB0b3RhbExwID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAidG90YWxMcCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjcxCiAgICAvLyB0aGlzLnRvdGFsTHAudmFsdWUgKz0gbHBUb01pbnQKICAgICsKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjIKICAgIC8vIHB1YmxpYyB0b3RhbExwID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBieXRlY18zIC8vICJ0b3RhbExwIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo3MQogICAgLy8gdGhpcy50b3RhbExwLnZhbHVlICs9IGxwVG9NaW50CiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyNQogICAgLy8gcHVibGljIGxwQmFsYW5jZXMgPSBCb3hNYXA8QWNjb3VudCwgdWludDY0Pih7IGtleVByZWZpeDogQnl0ZXNgbHBfYCB9KQogICAgYnl0ZWNfMiAvLyAibHBfIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo3NAogICAgLy8gaWYgKCF0aGlzLmxwQmFsYW5jZXMoVHhuLnNlbmRlcikuZXhpc3RzKSB7CiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjI1CiAgICAvLyBwdWJsaWMgbHBCYWxhbmNlcyA9IEJveE1hcDxBY2NvdW50LCB1aW50NjQ+KHsga2V5UHJlZml4OiBCeXRlc2BscF9gIH0pCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6NzQKICAgIC8vIGlmICghdGhpcy5scEJhbGFuY2VzKFR4bi5zZW5kZXIpLmV4aXN0cykgewogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICBibnogYWRkTGlxdWlkaXR5X2Vsc2VfYm9keUA4CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjI1CiAgICAvLyBwdWJsaWMgbHBCYWxhbmNlcyA9IEJveE1hcDxBY2NvdW50LCB1aW50NjQ+KHsga2V5UHJlZml4OiBCeXRlc2BscF9gIH0pCiAgICBieXRlY18yIC8vICJscF8iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjc1CiAgICAvLyB0aGlzLmxwQmFsYW5jZXMoVHhuLnNlbmRlcikudmFsdWUgPSBscFRvTWludAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyNQogICAgLy8gcHVibGljIGxwQmFsYW5jZXMgPSBCb3hNYXA8QWNjb3VudCwgdWludDY0Pih7IGtleVByZWZpeDogQnl0ZXNgbHBfYCB9KQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjc1CiAgICAvLyB0aGlzLmxwQmFsYW5jZXMoVHhuLnNlbmRlcikudmFsdWUgPSBscFRvTWludAogICAgc3dhcAogICAgaXRvYgogICAgYm94X3B1dAogICAgYiBhZGRMaXF1aWRpdHlfYWZ0ZXJfaWZfZWxzZUAxMAoKYWRkTGlxdWlkaXR5X2Vsc2VfYm9keUA4OgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyNQogICAgLy8gcHVibGljIGxwQmFsYW5jZXMgPSBCb3hNYXA8QWNjb3VudCwgdWludDY0Pih7IGtleVByZWZpeDogQnl0ZXNgbHBfYCB9KQogICAgYnl0ZWNfMiAvLyAibHBfIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo3NwogICAgLy8gdGhpcy5scEJhbGFuY2VzKFR4bi5zZW5kZXIpLnZhbHVlICs9IGxwVG9NaW50CiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjI1CiAgICAvLyBwdWJsaWMgbHBCYWxhbmNlcyA9IEJveE1hcDxBY2NvdW50LCB1aW50NjQ+KHsga2V5UHJlZml4OiBCeXRlc2BscF9gIH0pCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6NzcKICAgIC8vIHRoaXMubHBCYWxhbmNlcyhUeG4uc2VuZGVyKS52YWx1ZSArPSBscFRvTWludAogICAgYm94X2dldAogICAgc3dhcAogICAgYnRvaQogICAgc3dhcAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjUKICAgIC8vIHB1YmxpYyBscEJhbGFuY2VzID0gQm94TWFwPEFjY291bnQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6IEJ5dGVzYGxwX2AgfSkKICAgIGJ5dGVjXzIgLy8gImxwXyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6NzcKICAgIC8vIHRoaXMubHBCYWxhbmNlcyhUeG4uc2VuZGVyKS52YWx1ZSArPSBscFRvTWludAogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyNQogICAgLy8gcHVibGljIGxwQmFsYW5jZXMgPSBCb3hNYXA8QWNjb3VudCwgdWludDY0Pih7IGtleVByZWZpeDogQnl0ZXNgbHBfYCB9KQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjc3CiAgICAvLyB0aGlzLmxwQmFsYW5jZXMoVHhuLnNlbmRlcikudmFsdWUgKz0gbHBUb01pbnQKICAgIHN3YXAKICAgIHVuY292ZXIgMgogICAgKwogICAgaXRvYgogICAgYm94X3B1dAogICAgYiBhZGRMaXF1aWRpdHlfYWZ0ZXJfaWZfZWxzZUAxMAoKYWRkTGlxdWlkaXR5X2Jvb2xfZmFsc2VAMzoKICAgIGludGNfMCAvLyAwCiAgICBiIGFkZExpcXVpZGl0eV9ib29sX21lcmdlQDQKCgovLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjpBTU1Db250cmFjdC5yZW1vdmVMaXF1aWRpdHkobHBUb0J1cm46IHVpbnQ2NCkgLT4gdWludDY0OgpyZW1vdmVMaXF1aWRpdHk6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjg1CiAgICAvLyBwdWJsaWMgcmVtb3ZlTGlxdWlkaXR5KGxwVG9CdXJuOiB1aW50NjQpOiBib29sZWFuIHsKICAgIHByb3RvIDEgMQogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo4NgogICAgLy8gZW5zdXJlQnVkZ2V0KDgwMDApCiAgICBpbnRjXzMgLy8gODAwMAogICAgaW50Y18wIC8vIDAKICAgIGNhbGxzdWIgZW5zdXJlX2J1ZGdldAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyNQogICAgLy8gcHVibGljIGxwQmFsYW5jZXMgPSBCb3hNYXA8QWNjb3VudCwgdWludDY0Pih7IGtleVByZWZpeDogQnl0ZXNgbHBfYCB9KQogICAgYnl0ZWNfMiAvLyAibHBfIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo4NwogICAgLy8gYXNzZXJ0KHRoaXMubHBCYWxhbmNlcyhUeG4uc2VuZGVyKS5leGlzdHMsICJObyBMUCBiYWxhbmNlIGZvdW5kIikKICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjUKICAgIC8vIHB1YmxpYyBscEJhbGFuY2VzID0gQm94TWFwPEFjY291bnQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6IEJ5dGVzYGxwX2AgfSkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo4NwogICAgLy8gYXNzZXJ0KHRoaXMubHBCYWxhbmNlcyhUeG4uc2VuZGVyKS5leGlzdHMsICJObyBMUCBiYWxhbmNlIGZvdW5kIikKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYXNzZXJ0IC8vIE5vIExQIGJhbGFuY2UgZm91bmQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjUKICAgIC8vIHB1YmxpYyBscEJhbGFuY2VzID0gQm94TWFwPEFjY291bnQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6IEJ5dGVzYGxwX2AgfSkKICAgIGJ5dGVjXzIgLy8gImxwXyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6ODgKICAgIC8vIGNvbnN0IHVzZXJMcCA9IHRoaXMubHBCYWxhbmNlcyhUeG4uc2VuZGVyKS52YWx1ZQogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyNQogICAgLy8gcHVibGljIGxwQmFsYW5jZXMgPSBCb3hNYXA8QWNjb3VudCwgdWludDY0Pih7IGtleVByZWZpeDogQnl0ZXNgbHBfYCB9KQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjg4CiAgICAvLyBjb25zdCB1c2VyTHAgPSB0aGlzLmxwQmFsYW5jZXMoVHhuLnNlbmRlcikudmFsdWUKICAgIGJveF9nZXQKICAgIHN3YXAKICAgIGJ0b2kKICAgIHN3YXAKICAgIGFzc2VydCAvLyBCb3ggbXVzdCBoYXZlIHZhbHVlCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjkxCiAgICAvLyBhc3NlcnQobHBUb0J1cm4gPiBVaW50NjQoMCksICJNdXN0IGJ1cm4gcG9zaXRpdmUgYW1vdW50IikKICAgIGZyYW1lX2RpZyAtMQogICAgYXNzZXJ0IC8vIE11c3QgYnVybiBwb3NpdGl2ZSBhbW91bnQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6OTIKICAgIC8vIGFzc2VydCh1c2VyTHAgPj0gbHBUb0J1cm4sICJJbnN1ZmZpY2llbnQgTFAgYmFsYW5jZSIpCiAgICBmcmFtZV9kaWcgLTEKICAgID49CiAgICBhc3NlcnQgLy8gSW5zdWZmaWNpZW50IExQIGJhbGFuY2UKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjAKICAgIC8vIHB1YmxpYyByZXNlcnZlQSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gInJlc2VydmVBIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6OTUKICAgIC8vIGNvbnN0IGFtdEE6IHVpbnQ2NCA9IHRoaXMucmVzZXJ2ZUEudmFsdWUgKiBscFRvQnVybiAvIHRoaXMudG90YWxMcC52YWx1ZQogICAgZnJhbWVfZGlnIC0xCiAgICAqCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIyCiAgICAvLyBwdWJsaWMgdG90YWxMcCA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzMgLy8gInRvdGFsTHAiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo5NQogICAgLy8gY29uc3QgYW10QTogdWludDY0ID0gdGhpcy5yZXNlcnZlQS52YWx1ZSAqIGxwVG9CdXJuIC8gdGhpcy50b3RhbExwLnZhbHVlCiAgICAvCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIxCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUIgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJyZXNlcnZlQiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjk2CiAgICAvLyBjb25zdCBhbXRCOiB1aW50NjQgPSB0aGlzLnJlc2VydmVCLnZhbHVlICogbHBUb0J1cm4gLyB0aGlzLnRvdGFsTHAudmFsdWUKICAgIGZyYW1lX2RpZyAtMQogICAgKgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMgogICAgLy8gcHVibGljIHRvdGFsTHAgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18zIC8vICJ0b3RhbExwIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6OTYKICAgIC8vIGNvbnN0IGFtdEI6IHVpbnQ2NCA9IHRoaXMucmVzZXJ2ZUIudmFsdWUgKiBscFRvQnVybiAvIHRoaXMudG90YWxMcC52YWx1ZQogICAgLwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMAogICAgLy8gcHVibGljIHJlc2VydmVBID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAicmVzZXJ2ZUEiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo5OQogICAgLy8gdGhpcy5yZXNlcnZlQS52YWx1ZSAtPSBhbXRBCiAgICB1bmNvdmVyIDIKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjAKICAgIC8vIHB1YmxpYyByZXNlcnZlQSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgYnl0ZWNfMCAvLyAicmVzZXJ2ZUEiCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjk5CiAgICAvLyB0aGlzLnJlc2VydmVBLnZhbHVlIC09IGFtdEEKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIxCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUIgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18xIC8vICJyZXNlcnZlQiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjEwMAogICAgLy8gdGhpcy5yZXNlcnZlQi52YWx1ZSAtPSBhbXRCCiAgICBzd2FwCiAgICAtCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIxCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUIgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGJ5dGVjXzEgLy8gInJlc2VydmVCIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMDAKICAgIC8vIHRoaXMucmVzZXJ2ZUIudmFsdWUgLT0gYW10QgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjIKICAgIC8vIHB1YmxpYyB0b3RhbExwID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMyAvLyAidG90YWxMcCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjEwMQogICAgLy8gdGhpcy50b3RhbExwLnZhbHVlIC09IGxwVG9CdXJuCiAgICBmcmFtZV9kaWcgLTEKICAgIC0KICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjIKICAgIC8vIHB1YmxpYyB0b3RhbExwID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBieXRlY18zIC8vICJ0b3RhbExwIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMDEKICAgIC8vIHRoaXMudG90YWxMcC52YWx1ZSAtPSBscFRvQnVybgogICAgc3dhcAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjUKICAgIC8vIHB1YmxpYyBscEJhbGFuY2VzID0gQm94TWFwPEFjY291bnQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6IEJ5dGVzYGxwX2AgfSkKICAgIGJ5dGVjXzIgLy8gImxwXyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTAyCiAgICAvLyB0aGlzLmxwQmFsYW5jZXMoVHhuLnNlbmRlcikudmFsdWUgLT0gbHBUb0J1cm4KICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjUKICAgIC8vIHB1YmxpYyBscEJhbGFuY2VzID0gQm94TWFwPEFjY291bnQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6IEJ5dGVzYGxwX2AgfSkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMDIKICAgIC8vIHRoaXMubHBCYWxhbmNlcyhUeG4uc2VuZGVyKS52YWx1ZSAtPSBscFRvQnVybgogICAgYm94X2dldAogICAgc3dhcAogICAgYnRvaQogICAgc3dhcAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjUKICAgIC8vIHB1YmxpYyBscEJhbGFuY2VzID0gQm94TWFwPEFjY291bnQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6IEJ5dGVzYGxwX2AgfSkKICAgIGJ5dGVjXzIgLy8gImxwXyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTAyCiAgICAvLyB0aGlzLmxwQmFsYW5jZXMoVHhuLnNlbmRlcikudmFsdWUgLT0gbHBUb0J1cm4KICAgIHR4biBTZW5kZXIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjUKICAgIC8vIHB1YmxpYyBscEJhbGFuY2VzID0gQm94TWFwPEFjY291bnQsIHVpbnQ2ND4oeyBrZXlQcmVmaXg6IEJ5dGVzYGxwX2AgfSkKICAgIGNvbmNhdAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMDIKICAgIC8vIHRoaXMubHBCYWxhbmNlcyhUeG4uc2VuZGVyKS52YWx1ZSAtPSBscFRvQnVybgogICAgc3dhcAogICAgZnJhbWVfZGlnIC0xCiAgICAtCiAgICBpdG9iCiAgICBib3hfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjEwNwogICAgLy8gcmV0dXJuIHRydWUKICAgIGludGNfMSAvLyAxCiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjpBTU1Db250cmFjdC5zd2FwKHNlbmRBc3NldFR5cGU6IHVpbnQ2NCwgc3dhcEFtb3VudDogdWludDY0KSAtPiB1aW50NjQ6CnN3YXA6CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjExMS0xMTQKICAgIC8vIHB1YmxpYyBzd2FwKAogICAgLy8gICBzZW5kQXNzZXRUeXBlOiB1aW50NjQsIC8vIDEgaWYgYXNzZXRfYSAtPiBiLCAyIGlmIGFzc2V0X2IgLT4gYQogICAgLy8gICBzd2FwQW1vdW50OiB1aW50NjQKICAgIC8vICk6IGJvb2xlYW4gewogICAgcHJvdG8gMiAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjExNQogICAgLy8gZW5zdXJlQnVkZ2V0KDcwMDApCiAgICBwdXNoaW50IDcwMDAgLy8gNzAwMAogICAgaW50Y18wIC8vIDAKICAgIGNhbGxzdWIgZW5zdXJlX2J1ZGdldAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMTcKICAgIC8vIGFzc2VydChHbG9iYWwuZ3JvdXBTaXplID09PSAyLCAiRXhwZWN0ZWQgZ3JvdXAgc2l6ZSBvZiAyIChhcHAgY2FsbCArIGFzc2V0IHRyYW5zZmVyKSIpOwogICAgZ2xvYmFsIEdyb3VwU2l6ZQogICAgcHVzaGludCAyIC8vIDIKICAgID09CiAgICBhc3NlcnQgLy8gRXhwZWN0ZWQgZ3JvdXAgc2l6ZSBvZiAyIChhcHAgY2FsbCArIGFzc2V0IHRyYW5zZmVyKQogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMTkKICAgIC8vIGlmIChzZW5kQXNzZXRUeXBlID09PSBVaW50NjQoMSkpIHsKICAgIGZyYW1lX2RpZyAtMgogICAgaW50Y18xIC8vIDEKICAgID09CiAgICBieiBzd2FwX2Vsc2VfYm9keUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIwCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUEgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJyZXNlcnZlQSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjEyMQogICAgLy8gY29uc3QgcmVzQTogdWludDY0ID0gdGhpcy5yZXNlcnZlQS52YWx1ZSArIHN3YXBBbW91bnQKICAgIGZyYW1lX2RpZyAtMQogICAgKwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMQogICAgLy8gcHVibGljIHJlc2VydmVCID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAicmVzZXJ2ZUIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMAogICAgLy8gcHVibGljIHJlc2VydmVBID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAicmVzZXJ2ZUEiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMQogICAgLy8gcHVibGljIHJlc2VydmVCID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAicmVzZXJ2ZUIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMjUKICAgIC8vIGNvbnN0IGs6IHVpbnQ2NCA9IHRoaXMucmVzZXJ2ZUEudmFsdWUgKiB0aGlzLnJlc2VydmVCLnZhbHVlCiAgICAqCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjI5CiAgICAvLyBwcml2YXRlIHJlYWRvbmx5IEZFRV9ERU4gPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMTAwMCkgfSk7CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNyAvLyAiRkVFX0RFTiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjEyNgogICAgLy8gY29uc3QgbmV3QjogdWludDY0ID0gayAqIFVpbnQ2NCh0aGlzLkZFRV9ERU4udmFsdWUpIC8gKHJlc0EgKiBVaW50NjQodGhpcy5GRUVfTlVNLnZhbHVlKSkKICAgICoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjgKICAgIC8vIHByaXZhdGUgcmVhZG9ubHkgRkVFX05VTSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCg5OTcpIH0pOyAvLyAwLjMlIGZlZQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDYgLy8gIkZFRV9OVU0iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMjYKICAgIC8vIGNvbnN0IG5ld0I6IHVpbnQ2NCA9IGsgKiBVaW50NjQodGhpcy5GRUVfREVOLnZhbHVlKSAvIChyZXNBICogVWludDY0KHRoaXMuRkVFX05VTS52YWx1ZSkpCiAgICBkaWcgMwogICAgKgogICAgLwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMjcKICAgIC8vIGNvbnN0IG91dEI6IHVpbnQ2NCA9IHJlc0IgLSBuZXdCCiAgICBkaWcgMQogICAgc3dhcAogICAgLQogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMAogICAgLy8gcHVibGljIHJlc2VydmVBID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBieXRlY18wIC8vICJyZXNlcnZlQSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTMwCiAgICAvLyB0aGlzLnJlc2VydmVBLnZhbHVlID0gcmVzQQogICAgdW5jb3ZlciAzCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxMzEKICAgIC8vIHRoaXMucmVzZXJ2ZUIudmFsdWUgPSByZXNCIC0gb3V0QgogICAgLQogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMQogICAgLy8gcHVibGljIHJlc2VydmVCID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBieXRlY18xIC8vICJyZXNlcnZlQiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTMxCiAgICAvLyB0aGlzLnJlc2VydmVCLnZhbHVlID0gcmVzQiAtIG91dEIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0Cgpzd2FwX2FmdGVyX2lmX2Vsc2VAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTUxCiAgICAvLyByZXR1cm4gdHJ1ZQogICAgaW50Y18xIC8vIDEKICAgIHJldHN1YgoKc3dhcF9lbHNlX2JvZHlAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjEKICAgIC8vIHB1YmxpYyByZXNlcnZlQiA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCgwKSB9KQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzEgLy8gInJlc2VydmVCIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBHbG9iYWxTdGF0ZSBleGlzdHMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTM2CiAgICAvLyBjb25zdCByZXNCOiB1aW50NjQgPSB0aGlzLnJlc2VydmVCLnZhbHVlICsgc3dhcEFtb3VudAogICAgZnJhbWVfZGlnIC0xCiAgICArCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIwCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUEgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJyZXNlcnZlQSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAicmVzZXJ2ZUEiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMQogICAgLy8gcHVibGljIHJlc2VydmVCID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMSAvLyAicmVzZXJ2ZUIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNDAKICAgIC8vIGNvbnN0IGs6IHVpbnQ2NCA9IHRoaXMucmVzZXJ2ZUEudmFsdWUgKiB0aGlzLnJlc2VydmVCLnZhbHVlCiAgICAqCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjI5CiAgICAvLyBwcml2YXRlIHJlYWRvbmx5IEZFRV9ERU4gPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMTAwMCkgfSk7CiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNyAvLyAiRkVFX0RFTiIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgR2xvYmFsU3RhdGUgZXhpc3RzCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE0MQogICAgLy8gY29uc3QgbmV3QTogdWludDY0ID0gayAqIFVpbnQ2NCh0aGlzLkZFRV9ERU4udmFsdWUpIC8gKHJlc0IgKiBVaW50NjQodGhpcy5GRUVfTlVNLnZhbHVlKSkKICAgICoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MjgKICAgIC8vIHByaXZhdGUgcmVhZG9ubHkgRkVFX05VTSA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oeyBpbml0aWFsVmFsdWU6IFVpbnQ2NCg5OTcpIH0pOyAvLyAwLjMlIGZlZQogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDYgLy8gIkZFRV9OVU0iCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIEdsb2JhbFN0YXRlIGV4aXN0cwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNDEKICAgIC8vIGNvbnN0IG5ld0E6IHVpbnQ2NCA9IGsgKiBVaW50NjQodGhpcy5GRUVfREVOLnZhbHVlKSAvIChyZXNCICogVWludDY0KHRoaXMuRkVFX05VTS52YWx1ZSkpCiAgICBkaWcgMwogICAgKgogICAgLwogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNDIKICAgIC8vIGNvbnN0IG91dEE6IHVpbnQ2NCA9IHJlc0EgLSBuZXdBCiAgICBkaWcgMQogICAgc3dhcAogICAgLQogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNDUKICAgIC8vIHRoaXMucmVzZXJ2ZUEudmFsdWUgPSByZXNBIC0gb3V0QQogICAgLQogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyMAogICAgLy8gcHVibGljIHJlc2VydmVBID0gR2xvYmFsU3RhdGU8dWludDY0Pih7IGluaXRpYWxWYWx1ZTogVWludDY0KDApIH0pCiAgICBieXRlY18wIC8vICJyZXNlcnZlQSIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTQ1CiAgICAvLyB0aGlzLnJlc2VydmVBLnZhbHVlID0gcmVzQSAtIG91dEEKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjIxCiAgICAvLyBwdWJsaWMgcmVzZXJ2ZUIgPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KHsgaW5pdGlhbFZhbHVlOiBVaW50NjQoMCkgfSkKICAgIGJ5dGVjXzEgLy8gInJlc2VydmVCIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNDYKICAgIC8vIHRoaXMucmVzZXJ2ZUIudmFsdWUgPSByZXNCCiAgICBzd2FwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgYiBzd2FwX2FmdGVyX2lmX2Vsc2VAMwoKCi8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6OkFNTUNvbnRyYWN0Lm9wdEluKCkgLT4gdWludDY0OgpvcHRJbjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTU2CiAgICAvLyBlbnN1cmVCdWRnZXQoMTAwMCkKICAgIGludGNfMiAvLyAxMDAwCiAgICBpbnRjXzAgLy8gMAogICAgY2FsbHN1YiBlbnN1cmVfYnVkZ2V0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjI1CiAgICAvLyBwdWJsaWMgbHBCYWxhbmNlcyA9IEJveE1hcDxBY2NvdW50LCB1aW50NjQ+KHsga2V5UHJlZml4OiBCeXRlc2BscF9gIH0pCiAgICBieXRlY18yIC8vICJscF8iCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE1OAogICAgLy8gaWYgKCF0aGlzLmxwQmFsYW5jZXMoVHhuLnNlbmRlcikuZXhpc3RzKSB7CiAgICB0eG4gU2VuZGVyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjI1CiAgICAvLyBwdWJsaWMgbHBCYWxhbmNlcyA9IEJveE1hcDxBY2NvdW50LCB1aW50NjQ+KHsga2V5UHJlZml4OiBCeXRlc2BscF9gIH0pCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTU4CiAgICAvLyBpZiAoIXRoaXMubHBCYWxhbmNlcyhUeG4uc2VuZGVyKS5leGlzdHMpIHsKICAgIGJveF9sZW4KICAgIGJ1cnkgMQogICAgYm56IG9wdEluX2FmdGVyX2lmX2Vsc2VAMgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyNQogICAgLy8gcHVibGljIGxwQmFsYW5jZXMgPSBCb3hNYXA8QWNjb3VudCwgdWludDY0Pih7IGtleVByZWZpeDogQnl0ZXNgbHBfYCB9KQogICAgYnl0ZWNfMiAvLyAibHBfIgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNTkKICAgIC8vIHRoaXMubHBCYWxhbmNlcyhUeG4uc2VuZGVyKS52YWx1ZSA9IFVpbnQ2NCgwKQogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoyNQogICAgLy8gcHVibGljIGxwQmFsYW5jZXMgPSBCb3hNYXA8QWNjb3VudCwgdWludDY0Pih7IGtleVByZWZpeDogQnl0ZXNgbHBfYCB9KQogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE1OQogICAgLy8gdGhpcy5scEJhbGFuY2VzKFR4bi5zZW5kZXIpLnZhbHVlID0gVWludDY0KDApCiAgICBpbnRjXzAgLy8gMAogICAgaXRvYgogICAgYm94X3B1dAoKb3B0SW5fYWZ0ZXJfaWZfZWxzZUAyOgogICAgLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czoxNjEKICAgIC8vIHJldHVybiB0cnVlCiAgICBpbnRjXzEgLy8gMQogICAgcmV0c3ViCgoKLy8gc21hcnRfY29udHJhY3RzL3N3YXBfY29udHJhY3QvQU1NQ29udHJhY3QuYWxnby50czo6QU1NQ29udHJhY3QuZ2V0THBCYWxhbmNlKGFjY291bnQ6IGJ5dGVzKSAtPiB1aW50NjQ6CmdldExwQmFsYW5jZToKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTY1CiAgICAvLyBwdWJsaWMgZ2V0THBCYWxhbmNlKGFjY291bnQ6IEFjY291bnQpOiB1aW50NjQgewogICAgcHJvdG8gMSAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjI1CiAgICAvLyBwdWJsaWMgbHBCYWxhbmNlcyA9IEJveE1hcDxBY2NvdW50LCB1aW50NjQ+KHsga2V5UHJlZml4OiBCeXRlc2BscF9gIH0pCiAgICBieXRlY18yIC8vICJscF8iCiAgICBmcmFtZV9kaWcgLTEKICAgIGNvbmNhdAogICAgZHVwCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE2NgogICAgLy8gaWYgKCF0aGlzLmxwQmFsYW5jZXMoYWNjb3VudCkuZXhpc3RzKSB7CiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgIGJueiBnZXRMcEJhbGFuY2VfYWZ0ZXJfaWZfZWxzZUAyCiAgICAvLyBzbWFydF9jb250cmFjdHMvc3dhcF9jb250cmFjdC9BTU1Db250cmFjdC5hbGdvLnRzOjE2NwogICAgLy8gcmV0dXJuIFVpbnQ2NCgwKQogICAgaW50Y18wIC8vIDAKICAgIHN3YXAKICAgIHJldHN1YgoKZ2V0THBCYWxhbmNlX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy9zd2FwX2NvbnRyYWN0L0FNTUNvbnRyYWN0LmFsZ28udHM6MTY5CiAgICAvLyByZXR1cm4gdGhpcy5scEJhbGFuY2VzKGFjY291bnQpLnZhbHVlCiAgICBmcmFtZV9kaWcgMAogICAgYm94X2dldAogICAgc3dhcAogICAgYnRvaQogICAgc3dhcAogICAgYXNzZXJ0IC8vIEJveCBtdXN0IGhhdmUgdmFsdWUKICAgIHN3YXAKICAgIHJldHN1Ygo=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAHoB8A+JgsIcmVzZXJ2ZUEIcmVzZXJ2ZUIDbHBfB3RvdGFsTHAEFR98dQEAB0ZFRV9OVU0HRkVFX0RFTgMGgQEGYXNzZXRBBmFzc2V0QjEYQAATKCJnKSJnKyJnJwaB5QdnJwckZzEbQQDeggYEIdbQtgTXCtq7BOSXGWME/uRK4ARD6dc5BIJBvz82GgCOBgCKAGsAUAAxABoAAiJDMRkURDEYRDYaARfAHIgCmBYnBExQsCNDMRkURDEYRIgCbicFIk8CVCcETFCwI0MxGRREMRhENhoBFzYaAheIAdYnBSJPAlQnBExQsCNDMRkURDEYRDYaAReIAVEnBSJPAlQnBExQsCNDMRkURDEYRDYaARc2GgIXiACMJwUiTwJUJwRMULAjQzEZFEQxGEQ2GgEXwDA2GgIXwDCIAFMnBSJPAlQnBExQsCNDMRlA/04xGBREI0OKAgCL/oEKCIsAMgwNQQAqsYEGshCBBbIZJwiyHicIsh+L/40CAAsABLNC/9syALIBQv/1IrIBQv/viYoCAYG4FyKI/7snCYv+ZycKi/9nI4mKAgElIoj/pzIEgQMSRCInCWVFAUEAiyInCmVFAUEAgiNEIitlREAAFCiL/mcpi/9nKyRnKjEAUCQWvyOJIitlRIv+CyIoZUQKIitlRIv/CyIpZUQKSgxMTgJNSSIoZUSL/ggoTGciKWVEi/8IKUxnIitlRAgrTGcqMQBQvUUBQAAKKjEAUEwWv0L/ryoxAFC+TBdMRCoxAFBMTwIIFr9C/5kiQv97igEBJSKI/wEqMQBQvUUBRCoxAFC+TBdMRIv/RIv/D0QiKGVEi/8LIitlRAoiKWVEi/8LIitlRAoiKGVETwIJKExnIillREwJKUxnIitlRIv/CStMZyoxAFC+TBdMRCoxAFBMi/8JFr8jiYoCAYHYNiKI/pUyBIECEkSL/iMSQQAxIihlRIv/CCIpZUQiKGVEIillRAsiJwdlRAsiJwZlREsDCwpLAUwJKE8DZwkpTGcjiSIpZUSL/wgiKGVEIihlRCIpZUQLIicHZUQLIicGZURLAwsKSwFMCQkoTGcpTGdC/80kIoj+ISoxAFC9RQFAAAcqMQBQIha/I4mKAQEqi/9QSb1FAUAAAyJMiYsAvkwXTERMiQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the AmmContract contract
 */
export type AmmContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createPool(asset,asset)bool': {
      assetIdA: bigint
      assetIdB: bigint
    }
    'addLiquidity(uint64,uint64)bool': {
      assetAAmount: bigint | number
      assetBAmount: bigint | number
    }
    'removeLiquidity(uint64)bool': {
      lpToBurn: bigint | number
    }
    'swap(uint64,uint64)bool': {
      sendAssetType: bigint | number
      swapAmount: bigint | number
    }
    'optIn()bool': Record<string, never>
    'getLpBalance(account)uint64': {
      account: Uint8Array | string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createPool(asset,asset)bool': [assetIdA: bigint, assetIdB: bigint]
    'addLiquidity(uint64,uint64)bool': [assetAAmount: bigint | number, assetBAmount: bigint | number]
    'removeLiquidity(uint64)bool': [lpToBurn: bigint | number]
    'swap(uint64,uint64)bool': [sendAssetType: bigint | number, swapAmount: bigint | number]
    'optIn()bool': []
    'getLpBalance(account)uint64': [account: Uint8Array | string]
  }
}

/**
 * The return type for each method
 */
export type AmmContractReturns = {
  'createPool(asset,asset)bool': boolean
  'addLiquidity(uint64,uint64)bool': boolean
  'removeLiquidity(uint64)bool': boolean
  'swap(uint64,uint64)bool': boolean
  'optIn()bool': boolean
  'getLpBalance(account)uint64': bigint
}

/**
 * Defines the types of available calls and state of the AmmContract smart contract.
 */
export type AmmContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createPool(asset,asset)bool' | 'createPool', {
      argsObj: AmmContractArgs['obj']['createPool(asset,asset)bool']
      argsTuple: AmmContractArgs['tuple']['createPool(asset,asset)bool']
      returns: AmmContractReturns['createPool(asset,asset)bool']
    }>
    & Record<'addLiquidity(uint64,uint64)bool' | 'addLiquidity', {
      argsObj: AmmContractArgs['obj']['addLiquidity(uint64,uint64)bool']
      argsTuple: AmmContractArgs['tuple']['addLiquidity(uint64,uint64)bool']
      returns: AmmContractReturns['addLiquidity(uint64,uint64)bool']
    }>
    & Record<'removeLiquidity(uint64)bool' | 'removeLiquidity', {
      argsObj: AmmContractArgs['obj']['removeLiquidity(uint64)bool']
      argsTuple: AmmContractArgs['tuple']['removeLiquidity(uint64)bool']
      returns: AmmContractReturns['removeLiquidity(uint64)bool']
    }>
    & Record<'swap(uint64,uint64)bool' | 'swap', {
      argsObj: AmmContractArgs['obj']['swap(uint64,uint64)bool']
      argsTuple: AmmContractArgs['tuple']['swap(uint64,uint64)bool']
      returns: AmmContractReturns['swap(uint64,uint64)bool']
    }>
    & Record<'optIn()bool' | 'optIn', {
      argsObj: AmmContractArgs['obj']['optIn()bool']
      argsTuple: AmmContractArgs['tuple']['optIn()bool']
      returns: AmmContractReturns['optIn()bool']
    }>
    & Record<'getLpBalance(account)uint64' | 'getLpBalance', {
      argsObj: AmmContractArgs['obj']['getLpBalance(account)uint64']
      argsTuple: AmmContractArgs['tuple']['getLpBalance(account)uint64']
      returns: AmmContractReturns['getLpBalance(account)uint64']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        assetA: bigint
        assetB: bigint
        reserveA: bigint
        reserveB: bigint
        totalLp: bigint
        feeNum: bigint
        feeDen: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        lpBalances: Map<string, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AmmContractSignatures = keyof AmmContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AmmContractNonVoidMethodSignatures = keyof AmmContractTypes['methods'] extends infer T ? T extends keyof AmmContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AmmContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AmmContractSignatures> = AmmContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AmmContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AmmContractSignatures> = AmmContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AmmContractTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = AmmContractTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AmmContractCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AmmContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AmmContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AmmContract smart contract
 */
export abstract class AmmContractParamsFactory {
  /**
   * Constructs a no op call for the createPool(asset,asset)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPool(params: CallParams<AmmContractArgs['obj']['createPool(asset,asset)bool'] | AmmContractArgs['tuple']['createPool(asset,asset)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createPool(asset,asset)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetIdA, params.args.assetIdB],
    }
  }
  /**
   * Constructs a no op call for the addLiquidity(uint64,uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLiquidity(params: CallParams<AmmContractArgs['obj']['addLiquidity(uint64,uint64)bool'] | AmmContractArgs['tuple']['addLiquidity(uint64,uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addLiquidity(uint64,uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetAAmount, params.args.assetBAmount],
    }
  }
  /**
   * Constructs a no op call for the removeLiquidity(uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeLiquidity(params: CallParams<AmmContractArgs['obj']['removeLiquidity(uint64)bool'] | AmmContractArgs['tuple']['removeLiquidity(uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeLiquidity(uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.lpToBurn],
    }
  }
  /**
   * Constructs a no op call for the swap(uint64,uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static swap(params: CallParams<AmmContractArgs['obj']['swap(uint64,uint64)bool'] | AmmContractArgs['tuple']['swap(uint64,uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'swap(uint64,uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.sendAssetType, params.args.swapAmount],
    }
  }
  /**
   * Constructs a no op call for the optIn()bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optIn(params: CallParams<AmmContractArgs['obj']['optIn()bool'] | AmmContractArgs['tuple']['optIn()bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optIn()bool' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getLpBalance(account)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLpBalance(params: CallParams<AmmContractArgs['obj']['getLpBalance(account)uint64'] | AmmContractArgs['tuple']['getLpBalance(account)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLpBalance(account)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.account],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AMMContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AmmContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AmmContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AmmContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AmmContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the AMMContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AmmContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new AmmContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AMMContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AMMContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the AMMContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new AmmContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the AMMContract smart contract
 */
export class AmmContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AmmContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AmmContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AmmContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AmmContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AmmContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AmmContractClient> {
    return new AmmContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AmmContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AmmContractClient> {
    return new AmmContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the AMMContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the AMMContract smart contract using the `createPool(asset,asset)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createPool: (params: CallParams<AmmContractArgs['obj']['createPool(asset,asset)bool'] | AmmContractArgs['tuple']['createPool(asset,asset)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AmmContractParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the AMMContract smart contract using the `addLiquidity(uint64,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLiquidity: (params: CallParams<AmmContractArgs['obj']['addLiquidity(uint64,uint64)bool'] | AmmContractArgs['tuple']['addLiquidity(uint64,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AmmContractParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the AMMContract smart contract using the `removeLiquidity(uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeLiquidity: (params: CallParams<AmmContractArgs['obj']['removeLiquidity(uint64)bool'] | AmmContractArgs['tuple']['removeLiquidity(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AmmContractParamsFactory.removeLiquidity(params))
    },

    /**
     * Makes a call to the AMMContract smart contract using the `swap(uint64,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    swap: (params: CallParams<AmmContractArgs['obj']['swap(uint64,uint64)bool'] | AmmContractArgs['tuple']['swap(uint64,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AmmContractParamsFactory.swap(params))
    },

    /**
     * Makes a call to the AMMContract smart contract using the `optIn()bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optIn: (params: CallParams<AmmContractArgs['obj']['optIn()bool'] | AmmContractArgs['tuple']['optIn()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AmmContractParamsFactory.optIn(params))
    },

    /**
     * Makes a call to the AMMContract smart contract using the `getLpBalance(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLpBalance: (params: CallParams<AmmContractArgs['obj']['getLpBalance(account)uint64'] | AmmContractArgs['tuple']['getLpBalance(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AmmContractParamsFactory.getLpBalance(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the AMMContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the AMMContract smart contract using the `createPool(asset,asset)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createPool: (params: CallParams<AmmContractArgs['obj']['createPool(asset,asset)bool'] | AmmContractArgs['tuple']['createPool(asset,asset)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AmmContractParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the AMMContract smart contract using the `addLiquidity(uint64,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLiquidity: (params: CallParams<AmmContractArgs['obj']['addLiquidity(uint64,uint64)bool'] | AmmContractArgs['tuple']['addLiquidity(uint64,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AmmContractParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the AMMContract smart contract using the `removeLiquidity(uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeLiquidity: (params: CallParams<AmmContractArgs['obj']['removeLiquidity(uint64)bool'] | AmmContractArgs['tuple']['removeLiquidity(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AmmContractParamsFactory.removeLiquidity(params))
    },

    /**
     * Makes a call to the AMMContract smart contract using the `swap(uint64,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    swap: (params: CallParams<AmmContractArgs['obj']['swap(uint64,uint64)bool'] | AmmContractArgs['tuple']['swap(uint64,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AmmContractParamsFactory.swap(params))
    },

    /**
     * Makes a call to the AMMContract smart contract using the `optIn()bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optIn: (params: CallParams<AmmContractArgs['obj']['optIn()bool'] | AmmContractArgs['tuple']['optIn()bool']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AmmContractParamsFactory.optIn(params))
    },

    /**
     * Makes a call to the AMMContract smart contract using the `getLpBalance(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLpBalance: (params: CallParams<AmmContractArgs['obj']['getLpBalance(account)uint64'] | AmmContractArgs['tuple']['getLpBalance(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AmmContractParamsFactory.getLpBalance(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the AMMContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the AMMContract smart contract using the `createPool(asset,asset)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createPool: async (params: CallParams<AmmContractArgs['obj']['createPool(asset,asset)bool'] | AmmContractArgs['tuple']['createPool(asset,asset)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AmmContractParamsFactory.createPool(params))
      return {...result, return: result.return as unknown as (undefined | AmmContractReturns['createPool(asset,asset)bool'])}
    },

    /**
     * Makes a call to the AMMContract smart contract using the `addLiquidity(uint64,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLiquidity: async (params: CallParams<AmmContractArgs['obj']['addLiquidity(uint64,uint64)bool'] | AmmContractArgs['tuple']['addLiquidity(uint64,uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AmmContractParamsFactory.addLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | AmmContractReturns['addLiquidity(uint64,uint64)bool'])}
    },

    /**
     * Makes a call to the AMMContract smart contract using the `removeLiquidity(uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeLiquidity: async (params: CallParams<AmmContractArgs['obj']['removeLiquidity(uint64)bool'] | AmmContractArgs['tuple']['removeLiquidity(uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AmmContractParamsFactory.removeLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | AmmContractReturns['removeLiquidity(uint64)bool'])}
    },

    /**
     * Makes a call to the AMMContract smart contract using the `swap(uint64,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    swap: async (params: CallParams<AmmContractArgs['obj']['swap(uint64,uint64)bool'] | AmmContractArgs['tuple']['swap(uint64,uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AmmContractParamsFactory.swap(params))
      return {...result, return: result.return as unknown as (undefined | AmmContractReturns['swap(uint64,uint64)bool'])}
    },

    /**
     * Makes a call to the AMMContract smart contract using the `optIn()bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optIn: async (params: CallParams<AmmContractArgs['obj']['optIn()bool'] | AmmContractArgs['tuple']['optIn()bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AmmContractParamsFactory.optIn(params))
      return {...result, return: result.return as unknown as (undefined | AmmContractReturns['optIn()bool'])}
    },

    /**
     * Makes a call to the AMMContract smart contract using the `getLpBalance(account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLpBalance: async (params: CallParams<AmmContractArgs['obj']['getLpBalance(account)uint64'] | AmmContractArgs['tuple']['getLpBalance(account)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AmmContractParamsFactory.getLpBalance(params))
      return {...result, return: result.return as unknown as (undefined | AmmContractReturns['getLpBalance(account)uint64'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AmmContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current AMMContract app
   */
  state = {
    /**
     * Methods to access global state for the current AMMContract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          assetA: result.assetA,
          assetB: result.assetB,
          reserveA: result.reserveA,
          reserveB: result.reserveB,
          totalLp: result.totalLp,
          feeNum: result.FEE_NUM,
          feeDen: result.FEE_DEN,
        }
      },
      /**
       * Get the current value of the assetA key in global state
       */
      assetA: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetA")) as bigint | undefined },
      /**
       * Get the current value of the assetB key in global state
       */
      assetB: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("assetB")) as bigint | undefined },
      /**
       * Get the current value of the reserveA key in global state
       */
      reserveA: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("reserveA")) as bigint | undefined },
      /**
       * Get the current value of the reserveB key in global state
       */
      reserveB: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("reserveB")) as bigint | undefined },
      /**
       * Get the current value of the totalLp key in global state
       */
      totalLp: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalLp")) as bigint | undefined },
      /**
       * Get the current value of the FEE_NUM key in global state
       */
      feeNum: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("FEE_NUM")) as bigint | undefined },
      /**
       * Get the current value of the FEE_DEN key in global state
       */
      feeDen: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("FEE_DEN")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current AMMContract app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the lpBalances map in box state
       */
      lpBalances: {
        /**
         * Get all current values of the lpBalances map in box state
         */
        getMap: async (): Promise<Map<string, bigint>> => { return (await this.appClient.state.box.getMap("lpBalances")) as Map<string, bigint> },
        /**
         * Get a current value of the lpBalances map by key from box state
         */
        value: async (key: string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("lpBalances", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): AmmContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createPool(asset,asset)bool method call against the AMMContract contract
       */
      createPool(params: CallParams<AmmContractArgs['obj']['createPool(asset,asset)bool'] | AmmContractArgs['tuple']['createPool(asset,asset)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('createPool(asset,asset)bool', v))
        return this
      },
      /**
       * Add a addLiquidity(uint64,uint64)bool method call against the AMMContract contract
       */
      addLiquidity(params: CallParams<AmmContractArgs['obj']['addLiquidity(uint64,uint64)bool'] | AmmContractArgs['tuple']['addLiquidity(uint64,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLiquidity(params)))
        resultMappers.push((v) => client.decodeReturnValue('addLiquidity(uint64,uint64)bool', v))
        return this
      },
      /**
       * Add a removeLiquidity(uint64)bool method call against the AMMContract contract
       */
      removeLiquidity(params: CallParams<AmmContractArgs['obj']['removeLiquidity(uint64)bool'] | AmmContractArgs['tuple']['removeLiquidity(uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeLiquidity(params)))
        resultMappers.push((v) => client.decodeReturnValue('removeLiquidity(uint64)bool', v))
        return this
      },
      /**
       * Add a swap(uint64,uint64)bool method call against the AMMContract contract
       */
      swap(params: CallParams<AmmContractArgs['obj']['swap(uint64,uint64)bool'] | AmmContractArgs['tuple']['swap(uint64,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.swap(params)))
        resultMappers.push((v) => client.decodeReturnValue('swap(uint64,uint64)bool', v))
        return this
      },
      /**
       * Add a optIn()bool method call against the AMMContract contract
       */
      optIn(params: CallParams<AmmContractArgs['obj']['optIn()bool'] | AmmContractArgs['tuple']['optIn()bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIn(params)))
        resultMappers.push((v) => client.decodeReturnValue('optIn()bool', v))
        return this
      },
      /**
       * Add a getLpBalance(account)uint64 method call against the AMMContract contract
       */
      getLpBalance(params: CallParams<AmmContractArgs['obj']['getLpBalance(account)uint64'] | AmmContractArgs['tuple']['getLpBalance(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLpBalance(params)))
        resultMappers.push((v) => client.decodeReturnValue('getLpBalance(account)uint64', v))
        return this
      },
      /**
       * Add a clear state call to the AMMContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AmmContractComposer
  }
}
export type AmmContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createPool(asset,asset)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPool(params?: CallParams<AmmContractArgs['obj']['createPool(asset,asset)bool'] | AmmContractArgs['tuple']['createPool(asset,asset)bool']>): AmmContractComposer<[...TReturns, AmmContractReturns['createPool(asset,asset)bool'] | undefined]>

  /**
   * Calls the addLiquidity(uint64,uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLiquidity(params?: CallParams<AmmContractArgs['obj']['addLiquidity(uint64,uint64)bool'] | AmmContractArgs['tuple']['addLiquidity(uint64,uint64)bool']>): AmmContractComposer<[...TReturns, AmmContractReturns['addLiquidity(uint64,uint64)bool'] | undefined]>

  /**
   * Calls the removeLiquidity(uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeLiquidity(params?: CallParams<AmmContractArgs['obj']['removeLiquidity(uint64)bool'] | AmmContractArgs['tuple']['removeLiquidity(uint64)bool']>): AmmContractComposer<[...TReturns, AmmContractReturns['removeLiquidity(uint64)bool'] | undefined]>

  /**
   * Calls the swap(uint64,uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swap(params?: CallParams<AmmContractArgs['obj']['swap(uint64,uint64)bool'] | AmmContractArgs['tuple']['swap(uint64,uint64)bool']>): AmmContractComposer<[...TReturns, AmmContractReturns['swap(uint64,uint64)bool'] | undefined]>

  /**
   * Calls the optIn()bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optIn(params?: CallParams<AmmContractArgs['obj']['optIn()bool'] | AmmContractArgs['tuple']['optIn()bool']>): AmmContractComposer<[...TReturns, AmmContractReturns['optIn()bool'] | undefined]>

  /**
   * Calls the getLpBalance(account)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLpBalance(params?: CallParams<AmmContractArgs['obj']['getLpBalance(account)uint64'] | AmmContractArgs['tuple']['getLpBalance(account)uint64']>): AmmContractComposer<[...TReturns, AmmContractReturns['getLpBalance(account)uint64'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AMMContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AmmContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AmmContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AmmContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AmmContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AmmContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AmmContractComposerResults<TReturns>>
}
export type AmmContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

