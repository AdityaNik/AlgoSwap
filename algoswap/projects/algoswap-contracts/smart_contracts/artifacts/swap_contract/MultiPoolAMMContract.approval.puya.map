{
  "version": 3,
  "sources": [
    "/home/adityanikkam/projects/hack-series/AlgoSwap/algoswap/projects/algoswap-contracts/smart_contracts/swap_contract/AMMContract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCmB;;AAAqD;;;AAAtE;AACiB;;AAAqD;AAAtE;AAfF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;;AA8SE;;AAAA;AAAA;AAAA;;AAAA;AA9SF;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AA8SE;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AA1RF;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AA0RE;;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAXA;;AAAA;AAAA;AAAA;;AAAA;AA/QF;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AA+QE;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAjEA;;AAAA;AAAA;AAAA;;AAAA;AA9MF;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AA8ME;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5DA;;AAAA;AAAA;AAAA;;AAAA;AAlJF;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAkJE;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA3DA;;AAAA;AAAA;AAAA;;AAAA;AAvFF;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAuFE;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA3CA;;AAAA;AAAA;AAAA;;AAAA;AA5CF;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AA4CE;;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA5CF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBE;;;AAKM;;AAAA;;AAAA;AAAJ;;;AAEQ;;AAAS;AACT;;AAAS;AACR;AAAP;AAEM;;AAAS;AACT;;AAAS;AACR;AAAA;AAAP;AAaJ;;;AACe;;;AAAb;AAAA;;;AACO;;AAAA;;AAAA;AAAP;AAKM;;AAAA;;AAAU;;;AAhDoC;AAAA;;AAAA;AAiDnB;AAAA;AAAA;;AAA1B;AAAP;AAGsB;;AAAA;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;;AAAA;AAGtB;;AAAA;AAAA;;AAAA;AAAA;AAvDoD;AAAA;;AAAA;AAwDpD;;AAAA;AAAA;AAvDuD;;AAAA;;AAAA;AAwDb;AAA1C;AAAA;AAAA;;AAAA;AAvDuD;;AAAA;;AAAA;AAwDvD;;AAAA;AAvDsD;;AAAA;;AAAA;AAwDtD;;AAAA;AAGgD;;AA1BzC;;AAAA;AAAA;AA7B8C;;AAAA;AAAA;AAwDrD;AAAA;AAGA;AAAA;;;AACA;;;AAEO;AAAP;AAIF;;;AACE;AAEwB;;;;;;;;AADT;;;AADf;;;AAGO;;;AAHP;;AASF;;;;;AAMe;;;AAAb;AAAA;;;AAEc;;AAAc;;AAArB;AAAP;AAKM;;AAAA;;AAAU;;;AAjGoC;AAAA;;AAAA;AAkGpB;AAAA;AAAA;;AAAhC;AAE4C;AAAA;AAAA;AAAA;AAAA;AAnGQ;AAAA;;AAAA;AAoGR;AAAA;;AAAA;AAnGW;;AAAA;;AAAA;AAAA;AAAA;;AAoGX;AAAA;AAAA;AAAA;;AAAA;AAnGW;;AAAA;;AAAA;AAAA;AAAA;;AAoGX;AAAA;AAAA;AAAA;;AAAA;AAnGU;;AAAA;;AAAA;AAAA;AAAA;;AAoGZ;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAEM;;AArEzC;;AAAA;AAAA;AAAA;;AAwES;;AAAA;AAAA;;AAAA;;AAAA;;AAAA;AAAA;;AACA;;AAAA;;AAAA;;AAAA;AAAA;;AAEhB;;;AAEE;AAAA;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;;AAAA;AAAA;AACyC;AAAzC;AAAA;AAAA;;AAAA;AA5GmD;;AAAA;;AAAA;AA8GnD;AAAA;AAqBK;AAAP;;AAAA;AAlB4B;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAApB;;AAAA;AAAA;;AAAoB;AACA;;AAAA;AAAA;;AAAA;;AAAA;AAApB;;AAAA;AAAA;;AAAoB;AAET;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;;AAGkB;;AAAA;;AAAA;AAAnC;AAAA;;AAAA;AAAA;AACmC;AAAA;;AAAA;AAAnC;AAAA;;AAAA;AAAA;AACkC;AAAlC;AAAA;AAzHmD;;AAAA;;AAAA;AAAA;AA4HvB;AAAA;;AAAxB;;;AACF;;AAAA;AAAA;;;;AAEuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAvB;;AAAA;AAAA;AAAA;;;;AAQN;;;AAKe;;;AAAb;AAAA;;;AAKM;;AAAA;;AAAU;;;AAzJoC;AAAA;;AAAA;AA0JpB;AAAA;AAAA;;AAAhC;AAE4C;AAAA;AAAA;AAAA;AAAA;AA3JQ;AAAA;;AAAA;AA4JR;AAAA;AAAA;AAAA;AAAA;AA3JW;;AAAA;;AAAA;AA4JX;AAAA;AAAA;AAAA;AAAA;AAAA;AA3JW;;AAAA;;AAAA;AA4JX;AAAA;AAAA;AAAA;AAAA;AAAA;AA3JU;;AAAA;;AAAA;AA4JZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAEM;;AA7HzC;;AAAA;AAAA;AA7B8C;;AAAA;AAAA;AA4JvB;AAAA;AAAA;;AAA9B;AACsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEtC;;AAAA;AACO;;AAAA;AAAP;AAGqB;;AAAA;;AAAA;AAAf;;AAAe;AACA;;AAAA;;AAAA;AAAf;;AAAe;AAGc;;AAAA;;AAAA;AAAnC;AAAA;;AAAA;AAAA;AACmC;;AAAA;;AAAA;AAAnC;AAAA;;AAAA;AAAA;AACkC;;AAAA;;AAAA;AAAlC;AAAA;;AAAA;AAAA;AAGuB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAvB;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAGA;AAEqB;;AAGJ;;;;;;;;;;;;;AALjB;;;AAGc;;;AAHd;AAQA;AAEqB;;AAGJ;;;;;;;;;;;;AALjB;;;AAGc;;;AAHd;AAQO;AAAP;AAIF;;;;;;AAMe;;;AAAb;AAAA;;;AAEc;;AAAc;;AAArB;AAAP;AAEM;;AAAA;;AAAU;;;AArNoC;AAAA;;AAAA;AAsNpB;AAAA;AAAA;;AAAhC;AAE4C;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAvNQ;AAAA;;AAAA;AAwNR;AAAA;AAAA;AAAA;;AAAA;AAvNW;;AAAA;;AAAA;AAAA;AAAA;;AAwNX;AAAA;AAAA;AAAA;;AAAA;AAvNW;;AAAA;;AAAA;AAAA;AAAA;;AAwNX;AAAA;AAAA;AAAA;;AAAA;AAvNU;;AAAA;AAAA;AAwNZ;AAAA;;AAAA;AAQtC;;AAAA;AAAJ;;;AAEQ;;AAAA;AAAA;;AAAY;AACZ;AAAA;;AAA0B;AA3NnB;AAAA;;AAAA;AAAA;AA4NmB;;AAAA;AA7NnB;AAAA;;AAAA;AAAA;AA6N6C;;AAAA;AAA1B;AAEhC;;AAAA;AAAe;AAAf;AAAA;;AAEA;;AAAA;AAAc;AAAd;;;;;;;;AAeF;;AAAA;AAAA;;AAAA;AAAA;AACA;;AAAA;AAAA;;AAAA;AAAA;AAIA;AAEqB;;AAGJ;;;;;;;;;;;;AALjB;;;AAGc;;;AAHd;AAQO;AAAP;;AAAA;AAxBQ;;AAAA;AAAA;;AAAA;AAAA;;AAAY;AACZ;AAAA;;AAA0B;AArOnB;AAAA;;AAAA;AAAA;AAsOmB;;AAAA;AAvOnB;AAAA;;AAAA;AAAA;AAuO6C;;AAAA;AAA1B;AAEhC;;AAAA;AAAe;AAAf;AAAA;;AACA;;AAAA;AAAc;AAAd;;;;;;;;;;;AAuBJ;;;AACQ;;AAAA;;AAAU;;;AAxOT;;AAAA;AA7B8C;;AAAA;AAAA;AAAA;AAwQzB;AAAA;;AAAxB;;;AACY;AAAd;AAAA;AAE4B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAA9B;AAAA;AAIF;;;AACQ;;AAAA;;AAAU;;;AAxRoC;AAAA;;AAAA;AAyRpB;AAAA;AAAA;;AAAhC;AAE4C;AAAA;AAAA;AAAA;AAAA;AA1RQ;AAAA;;AAAA;AA2RR;AAAA;AAAA;AAAA;AAAA;AA1RW;;AAAA;;AAAA;AA2RX;AAAA;AAAA;AAAA;AAAA;AA1RW;;AAAA;;AAAA;AA2RX;AAAA;AAAA;AAAA;AAAA;AA1RU;;AAAA;;AAAA;AA2RZ;AAAA;AAAA;AAAA;AAAA;AAE1C;AAUF;;;AACQ;;AAAA;;AAAU;;;AA5SoC;AAAA;AAAA;AA6SpB;AAAA;;AAAhC",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 1000"
    },
    "8": {
      "op": "bytecblock 0x151f7c75 \"pa_\" 0x00 \"pb_\" \"ra_\" \"rb_\" \"lp_\" \"bal_\" \"FEE_NUM\" \"FEE_DEN\" 0x068101"
    },
    "62": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "64": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "67": {
      "op": "bytec 8 // \"FEE_NUM\"",
      "defined_out": [
        "\"FEE_NUM\""
      ],
      "stack_out": [
        "\"FEE_NUM\""
      ]
    },
    "69": {
      "op": "pushint 997 // 997",
      "defined_out": [
        "\"FEE_NUM\"",
        "997"
      ],
      "stack_out": [
        "\"FEE_NUM\"",
        "997"
      ]
    },
    "72": {
      "op": "app_global_put",
      "stack_out": []
    },
    "73": {
      "op": "bytec 9 // \"FEE_DEN\"",
      "defined_out": [
        "\"FEE_DEN\""
      ],
      "stack_out": [
        "\"FEE_DEN\""
      ]
    },
    "75": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "\"FEE_DEN\"",
        "1000"
      ],
      "stack_out": [
        "\"FEE_DEN\"",
        "1000"
      ]
    },
    "76": {
      "op": "app_global_put",
      "stack_out": []
    },
    "77": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "79": {
      "op": "bz main_bare_routing@14",
      "stack_out": []
    },
    "82": {
      "op": "pushbytess 0x21d6d0b6 0x5b76a759 0x3d948581 0x75d300f9 0x2faf0305 0x3d9d442c 0xeeabb581 // method \"createPool(asset,asset)bool\", method \"addLiquidity(asset,asset,uint64,uint64)bool\", method \"removeLiquidity(asset,asset,uint64)bool\", method \"swap(asset,asset,asset,uint64)bool\", method \"getLpBalance(asset,asset,account)uint64\", method \"getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)\", method \"poolExists(asset,asset)bool\"",
      "defined_out": [
        "Method(addLiquidity(asset,asset,uint64,uint64)bool)",
        "Method(createPool(asset,asset)bool)",
        "Method(getLpBalance(asset,asset,account)uint64)",
        "Method(getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64))",
        "Method(poolExists(asset,asset)bool)",
        "Method(removeLiquidity(asset,asset,uint64)bool)",
        "Method(swap(asset,asset,asset,uint64)bool)"
      ],
      "stack_out": [
        "Method(createPool(asset,asset)bool)",
        "Method(addLiquidity(asset,asset,uint64,uint64)bool)",
        "Method(removeLiquidity(asset,asset,uint64)bool)",
        "Method(swap(asset,asset,asset,uint64)bool)",
        "Method(getLpBalance(asset,asset,account)uint64)",
        "Method(getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64))",
        "Method(poolExists(asset,asset)bool)"
      ]
    },
    "119": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addLiquidity(asset,asset,uint64,uint64)bool)",
        "Method(createPool(asset,asset)bool)",
        "Method(getLpBalance(asset,asset,account)uint64)",
        "Method(getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64))",
        "Method(poolExists(asset,asset)bool)",
        "Method(removeLiquidity(asset,asset,uint64)bool)",
        "Method(swap(asset,asset,asset,uint64)bool)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createPool(asset,asset)bool)",
        "Method(addLiquidity(asset,asset,uint64,uint64)bool)",
        "Method(removeLiquidity(asset,asset,uint64)bool)",
        "Method(swap(asset,asset,asset,uint64)bool)",
        "Method(getLpBalance(asset,asset,account)uint64)",
        "Method(getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64))",
        "Method(poolExists(asset,asset)bool)",
        "tmp%2#0"
      ]
    },
    "122": {
      "op": "match main_createPool_route@5 main_addLiquidity_route@6 main_removeLiquidity_route@7 main_swap_route@8 main_getLpBalance_route@9 main_getPoolInfo_route@10 main_poolExists_route@11",
      "stack_out": []
    },
    "138": {
      "block": "main_after_if_else@18",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "139": {
      "op": "return",
      "stack_out": []
    },
    "140": {
      "block": "main_poolExists_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "142": {
      "op": "!",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "143": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "144": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "146": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "147": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%14#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%14#0"
      ]
    },
    "150": {
      "op": "btoi",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "151": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "153": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%15#0",
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0",
        "reinterpret_bytes[1]%15#0"
      ]
    },
    "156": {
      "op": "btoi",
      "defined_out": [
        "tmp%70#0",
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%70#0",
        "tmp%71#0"
      ]
    },
    "157": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%70#0",
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%70#0",
        "tmp%72#0"
      ]
    },
    "159": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.poolExists",
      "op": "callsub poolExists",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "162": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "0x00"
      ]
    },
    "163": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0",
        "0x00",
        "0"
      ]
    },
    "164": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%5#0"
      ]
    },
    "166": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0"
      ]
    },
    "167": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ],
      "stack_out": [
        "encoded_bool%4#0",
        "0x151f7c75"
      ]
    },
    "168": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%4#0"
      ]
    },
    "169": {
      "op": "concat",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "170": {
      "op": "log",
      "stack_out": []
    },
    "171": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "172": {
      "op": "return",
      "stack_out": []
    },
    "173": {
      "block": "main_getPoolInfo_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "175": {
      "op": "!",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "176": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "177": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "179": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "180": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%12#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%12#0"
      ]
    },
    "183": {
      "op": "btoi",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "184": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "186": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%13#0",
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0",
        "reinterpret_bytes[1]%13#0"
      ]
    },
    "189": {
      "op": "btoi",
      "defined_out": [
        "tmp%61#0",
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%61#0",
        "tmp%62#0"
      ]
    },
    "190": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%61#0",
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%61#0",
        "tmp%63#0"
      ]
    },
    "192": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.getPoolInfo",
      "op": "callsub getPoolInfo",
      "defined_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0"
      ],
      "stack_out": [
        "elements_to_encode%0#0",
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0"
      ]
    },
    "195": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "elements_to_encode%0#0"
      ]
    },
    "197": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "elements_to_encode%1#0",
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%1#0"
      ]
    },
    "198": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%1#0",
        "elements_to_encode%1#0"
      ]
    },
    "200": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "elements_to_encode%2#0",
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "201": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "elements_to_encode%2#0"
      ]
    },
    "203": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "elements_to_encode%3#0",
        "elements_to_encode%4#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "204": {
      "op": "uncover 4",
      "stack_out": [
        "elements_to_encode%4#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "elements_to_encode%3#0"
      ]
    },
    "206": {
      "op": "itob",
      "defined_out": [
        "elements_to_encode%4#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "elements_to_encode%4#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "207": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "elements_to_encode%4#0"
      ]
    },
    "209": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "210": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%1#0"
      ]
    },
    "212": {
      "op": "uncover 4",
      "stack_out": [
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "214": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "215": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "217": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "218": {
      "op": "uncover 2",
      "stack_out": [
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "220": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "221": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%5#0"
      ]
    },
    "222": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0"
      ]
    },
    "223": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%5#0"
      ],
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "0x151f7c75"
      ]
    },
    "224": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "225": {
      "op": "concat",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "226": {
      "op": "log",
      "stack_out": []
    },
    "227": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "228": {
      "op": "return",
      "stack_out": []
    },
    "229": {
      "block": "main_getLpBalance_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "231": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "232": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "233": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "235": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "236": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%9#0"
      ]
    },
    "239": {
      "op": "btoi",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "240": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "242": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%10#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "reinterpret_bytes[1]%10#0"
      ]
    },
    "245": {
      "op": "btoi",
      "defined_out": [
        "tmp%50#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "tmp%51#0"
      ]
    },
    "246": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%50#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "tmp%52#0"
      ]
    },
    "248": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%11#0",
        "tmp%50#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "tmp%52#0",
        "reinterpret_bytes[1]%11#0"
      ]
    },
    "251": {
      "op": "btoi",
      "defined_out": [
        "tmp%50#0",
        "tmp%52#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "tmp%52#0",
        "tmp%53#0"
      ]
    },
    "252": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%50#0",
        "tmp%52#0",
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%50#0",
        "tmp%52#0",
        "tmp%54#0"
      ]
    },
    "254": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.getLpBalance",
      "op": "callsub getLpBalance",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "257": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "258": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "259": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "260": {
      "op": "concat",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "261": {
      "op": "log",
      "stack_out": []
    },
    "262": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "263": {
      "op": "return",
      "stack_out": []
    },
    "264": {
      "block": "main_swap_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "266": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "267": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "268": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "270": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "271": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "274": {
      "op": "btoi",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "275": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "277": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%7#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "reinterpret_bytes[1]%7#0"
      ]
    },
    "280": {
      "op": "btoi",
      "defined_out": [
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "281": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%38#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%40#0"
      ]
    },
    "283": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%8#0",
        "tmp%38#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%40#0",
        "reinterpret_bytes[1]%8#0"
      ]
    },
    "286": {
      "op": "btoi",
      "defined_out": [
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%40#0",
        "tmp%41#0"
      ]
    },
    "287": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%38#0",
        "tmp%40#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%40#0",
        "tmp%42#0"
      ]
    },
    "289": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%38#0",
        "tmp%40#0",
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%40#0",
        "tmp%42#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "292": {
      "op": "btoi",
      "defined_out": [
        "tmp%38#0",
        "tmp%40#0",
        "tmp%42#0",
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%40#0",
        "tmp%42#0",
        "tmp%43#0"
      ]
    },
    "293": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.swap",
      "op": "callsub swap",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "296": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00"
      ]
    },
    "297": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0",
        "0x00",
        "0"
      ]
    },
    "298": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%3#0"
      ]
    },
    "300": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0"
      ]
    },
    "301": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ],
      "stack_out": [
        "encoded_bool%3#0",
        "0x151f7c75"
      ]
    },
    "302": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%3#0"
      ]
    },
    "303": {
      "op": "concat",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "304": {
      "op": "log",
      "stack_out": []
    },
    "305": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "306": {
      "op": "return",
      "stack_out": []
    },
    "307": {
      "block": "main_removeLiquidity_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "309": {
      "op": "!",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "310": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "311": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "313": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "314": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "317": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "318": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "320": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%5#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "323": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%29#0"
      ]
    },
    "324": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%28#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%30#0"
      ]
    },
    "326": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%28#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%30#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "329": {
      "op": "btoi",
      "defined_out": [
        "tmp%28#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%28#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "330": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.removeLiquidity",
      "op": "callsub removeLiquidity",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "333": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00"
      ]
    },
    "334": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0",
        "0x00",
        "0"
      ]
    },
    "335": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%2#0"
      ]
    },
    "337": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0"
      ]
    },
    "338": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ],
      "stack_out": [
        "encoded_bool%2#0",
        "0x151f7c75"
      ]
    },
    "339": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%2#0"
      ]
    },
    "340": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "341": {
      "op": "log",
      "stack_out": []
    },
    "342": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "343": {
      "op": "return",
      "stack_out": []
    },
    "344": {
      "block": "main_addLiquidity_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "346": {
      "op": "!",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "347": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "348": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "350": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "351": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "354": {
      "op": "btoi",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "355": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "357": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "360": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%18#0"
      ]
    },
    "361": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0"
      ]
    },
    "363": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%17#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "366": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0"
      ]
    },
    "367": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "370": {
      "op": "btoi",
      "defined_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "tmp%19#0",
        "tmp%20#0",
        "tmp%21#0"
      ]
    },
    "371": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.addLiquidity",
      "op": "callsub addLiquidity",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "374": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00"
      ]
    },
    "375": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0",
        "0x00",
        "0"
      ]
    },
    "376": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%1#0"
      ]
    },
    "378": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0"
      ]
    },
    "379": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ],
      "stack_out": [
        "encoded_bool%1#0",
        "0x151f7c75"
      ]
    },
    "380": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%1#0"
      ]
    },
    "381": {
      "op": "concat",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "382": {
      "op": "log",
      "stack_out": []
    },
    "383": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "384": {
      "op": "return",
      "stack_out": []
    },
    "385": {
      "block": "main_createPool_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "387": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "388": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "389": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "391": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "392": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "395": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "396": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "398": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "401": {
      "op": "btoi",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "402": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "404": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.createPool",
      "op": "callsub createPool",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "407": {
      "op": "bytec_2 // 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "408": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "409": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "411": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "412": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "413": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "414": {
      "op": "concat",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "415": {
      "op": "log",
      "stack_out": []
    },
    "416": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "417": {
      "op": "return",
      "stack_out": []
    },
    "418": {
      "block": "main_bare_routing@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "420": {
      "op": "bnz main_after_if_else@18",
      "stack_out": []
    },
    "423": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "425": {
      "op": "!",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "426": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "427": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "428": {
      "op": "return",
      "stack_out": []
    },
    "429": {
      "subroutine": "_puya_lib.util.ensure_budget",
      "params": {
        "required_budget#0": "uint64",
        "fee_source#0": "uint64"
      },
      "block": "ensure_budget",
      "stack_in": [],
      "op": "proto 2 0"
    },
    "432": {
      "op": "frame_dig -2",
      "defined_out": [
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)"
      ]
    },
    "434": {
      "op": "pushint 10 // 10",
      "defined_out": [
        "10",
        "required_budget#0 (copy)"
      ],
      "stack_out": [
        "required_budget#0 (copy)",
        "10"
      ]
    },
    "436": {
      "op": "+",
      "defined_out": [
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "437": {
      "block": "ensure_budget_while_top@1",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "required_budget_with_buffer#0"
      ]
    },
    "439": {
      "op": "global OpcodeBudget",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "required_budget_with_buffer#0",
        "tmp%0#0"
      ]
    },
    "441": {
      "op": ">",
      "defined_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%1#0"
      ]
    },
    "442": {
      "op": "bz ensure_budget_after_while@7",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "445": {
      "op": "itxn_begin"
    },
    "446": {
      "op": "pushint 6 // appl",
      "defined_out": [
        "appl",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "appl"
      ]
    },
    "448": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "450": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "DeleteApplication"
      ]
    },
    "452": {
      "op": "itxn_field OnCompletion",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "454": {
      "op": "bytec 10 // 0x068101",
      "defined_out": [
        "0x068101",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "456": {
      "op": "itxn_field ApprovalProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "458": {
      "op": "bytec 10 // 0x068101",
      "stack_out": [
        "required_budget_with_buffer#0",
        "0x068101"
      ]
    },
    "460": {
      "op": "itxn_field ClearStateProgram",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "462": {
      "op": "frame_dig -1",
      "defined_out": [
        "fee_source#0 (copy)",
        "required_budget_with_buffer#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "fee_source#0 (copy)"
      ]
    },
    "464": {
      "op": "switch ensure_budget_switch_case_0@3 ensure_budget_switch_case_1@4",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "470": {
      "block": "ensure_budget_switch_case_next@6",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "itxn_submit"
    },
    "471": {
      "op": "b ensure_budget_while_top@1"
    },
    "474": {
      "block": "ensure_budget_switch_case_1@4",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "global MinTxnFee",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "tmp%2#0"
      ]
    },
    "476": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "478": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "481": {
      "block": "ensure_budget_switch_case_0@3",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "required_budget_with_buffer#0",
        "0"
      ]
    },
    "482": {
      "op": "itxn_field Fee",
      "stack_out": [
        "required_budget_with_buffer#0"
      ]
    },
    "484": {
      "op": "b ensure_budget_switch_case_next@6"
    },
    "487": {
      "block": "ensure_budget_after_while@7",
      "stack_in": [
        "required_budget_with_buffer#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "488": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.getPoolKey",
      "params": {
        "assetIdA#0": "uint64",
        "assetIdB#0": "uint64"
      },
      "block": "getPoolKey",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "491": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetIdA#0 (copy)"
      ],
      "stack_out": [
        "assetIdA#0 (copy)"
      ]
    },
    "493": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)"
      ],
      "stack_out": [
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)"
      ]
    },
    "495": {
      "op": "<",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "496": {
      "op": "bz getPoolKey_else_body@2",
      "stack_out": []
    },
    "499": {
      "op": "frame_dig -2",
      "stack_out": [
        "assetIdA#0 (copy)"
      ]
    },
    "501": {
      "op": "itob",
      "defined_out": [
        "bytesA#0"
      ],
      "stack_out": [
        "bytesA#0"
      ]
    },
    "502": {
      "op": "frame_dig -1",
      "stack_out": [
        "bytesA#0",
        "assetIdB#0 (copy)"
      ]
    },
    "504": {
      "op": "itob",
      "defined_out": [
        "bytesA#0",
        "bytesB#0"
      ],
      "stack_out": [
        "bytesA#0",
        "bytesB#0"
      ]
    },
    "505": {
      "op": "concat",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "506": {
      "retsub": true,
      "op": "retsub"
    },
    "507": {
      "block": "getPoolKey_else_body@2",
      "stack_in": [],
      "op": "frame_dig -2",
      "defined_out": [
        "assetIdA#0 (copy)"
      ],
      "stack_out": [
        "assetIdA#0 (copy)"
      ]
    },
    "509": {
      "op": "itob",
      "defined_out": [
        "bytesA\u2081#0"
      ],
      "stack_out": [
        "bytesA\u2081#0"
      ]
    },
    "510": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetIdB#0 (copy)",
        "bytesA\u2081#0"
      ],
      "stack_out": [
        "bytesA\u2081#0",
        "assetIdB#0 (copy)"
      ]
    },
    "512": {
      "op": "itob",
      "defined_out": [
        "bytesA\u2081#0",
        "bytesB\u2081#0"
      ],
      "stack_out": [
        "bytesA\u2081#0",
        "bytesB\u2081#0"
      ]
    },
    "513": {
      "op": "swap",
      "stack_out": [
        "bytesB\u2081#0",
        "bytesA\u2081#0"
      ]
    },
    "514": {
      "op": "concat",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "515": {
      "retsub": true,
      "op": "retsub"
    },
    "516": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.createPool",
      "params": {
        "assetIdA#0": "uint64",
        "assetIdB#0": "uint64"
      },
      "block": "createPool",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "519": {
      "op": "pushint 5000 // 5000",
      "defined_out": [
        "5000"
      ],
      "stack_out": [
        "5000"
      ]
    },
    "522": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "5000"
      ],
      "stack_out": [
        "5000",
        "0"
      ]
    },
    "523": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "526": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetIdA#0 (copy)"
      ],
      "stack_out": [
        "assetIdA#0 (copy)"
      ]
    },
    "528": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)"
      ],
      "stack_out": [
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)"
      ]
    },
    "530": {
      "op": "!=",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "531": {
      "error": "Cannot create pool with same asset",
      "op": "assert // Cannot create pool with same asset",
      "stack_out": []
    },
    "532": {
      "op": "frame_dig -2",
      "stack_out": [
        "assetIdA#0 (copy)"
      ]
    },
    "534": {
      "op": "frame_dig -1",
      "stack_out": [
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)"
      ]
    },
    "536": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.getPoolKey",
      "op": "callsub getPoolKey",
      "defined_out": [
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0"
      ]
    },
    "539": {
      "op": "bytec_1 // \"pa_\"",
      "defined_out": [
        "\"pa_\"",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "\"pa_\""
      ]
    },
    "540": {
      "op": "dig 1",
      "defined_out": [
        "\"pa_\"",
        "poolKey#0",
        "poolKey#0 (copy)"
      ],
      "stack_out": [
        "poolKey#0",
        "\"pa_\"",
        "poolKey#0 (copy)"
      ]
    },
    "542": {
      "op": "concat",
      "defined_out": [
        "poolKey#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "poolKey#0",
        "tmp%1#0"
      ]
    },
    "543": {
      "op": "dup",
      "defined_out": [
        "poolKey#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "poolKey#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "544": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "poolKey#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "poolKey#0",
        "tmp%1#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "545": {
      "op": "bury 1",
      "stack_out": [
        "poolKey#0",
        "tmp%1#0",
        "maybe_exists%0#0"
      ]
    },
    "547": {
      "op": "!",
      "defined_out": [
        "poolKey#0",
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "poolKey#0",
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "548": {
      "error": "Pool already exists",
      "op": "assert // Pool already exists",
      "stack_out": [
        "poolKey#0",
        "tmp%1#0"
      ]
    },
    "549": {
      "op": "frame_dig -2",
      "stack_out": [
        "poolKey#0",
        "tmp%1#0",
        "assetIdA#0 (copy)"
      ]
    },
    "551": {
      "op": "frame_dig -1",
      "stack_out": [
        "poolKey#0",
        "tmp%1#0",
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)"
      ]
    },
    "553": {
      "op": "<",
      "defined_out": [
        "poolKey#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "poolKey#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "554": {
      "op": "frame_dig -1",
      "stack_out": [
        "poolKey#0",
        "tmp%1#0",
        "tmp%3#0",
        "assetIdB#0 (copy)"
      ]
    },
    "556": {
      "op": "frame_dig -2",
      "stack_out": [
        "poolKey#0",
        "tmp%1#0",
        "tmp%3#0",
        "assetIdB#0 (copy)",
        "assetIdA#0 (copy)"
      ]
    },
    "558": {
      "op": "dig 2",
      "defined_out": [
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)",
        "poolKey#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "poolKey#0",
        "tmp%1#0",
        "tmp%3#0",
        "assetIdB#0 (copy)",
        "assetIdA#0 (copy)",
        "tmp%3#0 (copy)"
      ]
    },
    "560": {
      "op": "select",
      "defined_out": [
        "orderedAssetA#0",
        "poolKey#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "poolKey#0",
        "tmp%1#0",
        "tmp%3#0",
        "orderedAssetA#0"
      ]
    },
    "561": {
      "op": "frame_dig -2",
      "stack_out": [
        "poolKey#0",
        "tmp%1#0",
        "tmp%3#0",
        "orderedAssetA#0",
        "assetIdA#0 (copy)"
      ]
    },
    "563": {
      "op": "frame_dig -1",
      "stack_out": [
        "poolKey#0",
        "tmp%1#0",
        "tmp%3#0",
        "orderedAssetA#0",
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)"
      ]
    },
    "565": {
      "op": "uncover 3",
      "stack_out": [
        "poolKey#0",
        "tmp%1#0",
        "orderedAssetA#0",
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)",
        "tmp%3#0"
      ]
    },
    "567": {
      "op": "select",
      "defined_out": [
        "orderedAssetA#0",
        "orderedAssetB#0",
        "poolKey#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "poolKey#0",
        "tmp%1#0",
        "orderedAssetA#0",
        "orderedAssetB#0"
      ]
    },
    "568": {
      "op": "dig 1",
      "defined_out": [
        "orderedAssetA#0",
        "orderedAssetA#0 (copy)",
        "orderedAssetB#0",
        "poolKey#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "poolKey#0",
        "tmp%1#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "orderedAssetA#0 (copy)"
      ]
    },
    "570": {
      "op": "itob",
      "defined_out": [
        "new_box_value%0#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "poolKey#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "poolKey#0",
        "tmp%1#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%0#0"
      ]
    },
    "571": {
      "op": "uncover 3",
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%0#0",
        "tmp%1#0"
      ]
    },
    "573": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "tmp%1#0",
        "new_box_value%0#0"
      ]
    },
    "574": {
      "op": "box_put",
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0"
      ]
    },
    "575": {
      "op": "bytec_3 // \"pb_\"",
      "defined_out": [
        "\"pb_\"",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "\"pb_\""
      ]
    },
    "576": {
      "op": "dig 3",
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "\"pb_\"",
        "poolKey#0 (copy)"
      ]
    },
    "578": {
      "op": "concat",
      "defined_out": [
        "orderedAssetA#0",
        "orderedAssetB#0",
        "poolKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "tmp%6#0"
      ]
    },
    "579": {
      "op": "dig 1",
      "defined_out": [
        "orderedAssetA#0",
        "orderedAssetB#0",
        "orderedAssetB#0 (copy)",
        "poolKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "tmp%6#0",
        "orderedAssetB#0 (copy)"
      ]
    },
    "581": {
      "op": "itob",
      "defined_out": [
        "new_box_value%1#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "poolKey#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "tmp%6#0",
        "new_box_value%1#0"
      ]
    },
    "582": {
      "op": "box_put",
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0"
      ]
    },
    "583": {
      "op": "bytec 4 // \"ra_\"",
      "defined_out": [
        "\"ra_\"",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "\"ra_\""
      ]
    },
    "585": {
      "op": "dig 3",
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "\"ra_\"",
        "poolKey#0 (copy)"
      ]
    },
    "587": {
      "op": "concat",
      "defined_out": [
        "orderedAssetA#0",
        "orderedAssetB#0",
        "poolKey#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "tmp%7#0"
      ]
    },
    "588": {
      "op": "intc_0 // 0",
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "tmp%7#0",
        "0"
      ]
    },
    "589": {
      "op": "itob",
      "defined_out": [
        "new_box_value%2#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "poolKey#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "tmp%7#0",
        "new_box_value%2#0"
      ]
    },
    "590": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0",
        "tmp%7#0"
      ]
    },
    "591": {
      "op": "dig 1",
      "defined_out": [
        "new_box_value%2#0",
        "new_box_value%2#0 (copy)",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "poolKey#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0",
        "tmp%7#0",
        "new_box_value%2#0 (copy)"
      ]
    },
    "593": {
      "op": "box_put",
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0"
      ]
    },
    "594": {
      "op": "bytec 5 // \"rb_\"",
      "defined_out": [
        "\"rb_\"",
        "new_box_value%2#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0",
        "\"rb_\""
      ]
    },
    "596": {
      "op": "dig 4",
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0",
        "\"rb_\"",
        "poolKey#0 (copy)"
      ]
    },
    "598": {
      "op": "concat",
      "defined_out": [
        "new_box_value%2#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "poolKey#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0",
        "tmp%8#0"
      ]
    },
    "599": {
      "op": "dig 1",
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0",
        "tmp%8#0",
        "new_box_value%2#0 (copy)"
      ]
    },
    "601": {
      "op": "box_put",
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0"
      ]
    },
    "602": {
      "op": "bytec 6 // \"lp_\"",
      "defined_out": [
        "\"lp_\"",
        "new_box_value%2#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0",
        "\"lp_\""
      ]
    },
    "604": {
      "op": "dig 4",
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0",
        "\"lp_\"",
        "poolKey#0 (copy)"
      ]
    },
    "606": {
      "op": "concat",
      "defined_out": [
        "new_box_value%2#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "poolKey#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0",
        "tmp%9#0"
      ]
    },
    "607": {
      "op": "dig 1",
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0",
        "tmp%9#0",
        "new_box_value%2#0 (copy)"
      ]
    },
    "609": {
      "op": "box_put",
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0"
      ]
    },
    "610": {
      "op": "txn Sender",
      "defined_out": [
        "account#0",
        "new_box_value%2#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0",
        "account#0"
      ]
    },
    "612": {
      "op": "uncover 4",
      "stack_out": [
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0",
        "account#0",
        "poolKey#0"
      ]
    },
    "614": {
      "op": "swap",
      "stack_out": [
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0",
        "poolKey#0",
        "account#0"
      ]
    },
    "615": {
      "op": "concat",
      "defined_out": [
        "lpKey#0",
        "new_box_value%2#0",
        "orderedAssetA#0",
        "orderedAssetB#0"
      ],
      "stack_out": [
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0",
        "lpKey#0"
      ]
    },
    "616": {
      "op": "bytec 7 // \"bal_\"",
      "defined_out": [
        "\"bal_\"",
        "lpKey#0",
        "new_box_value%2#0",
        "orderedAssetA#0",
        "orderedAssetB#0"
      ],
      "stack_out": [
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0",
        "lpKey#0",
        "\"bal_\""
      ]
    },
    "618": {
      "op": "swap",
      "stack_out": [
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0",
        "\"bal_\"",
        "lpKey#0"
      ]
    },
    "619": {
      "op": "concat",
      "defined_out": [
        "new_box_value%2#0",
        "orderedAssetA#0",
        "orderedAssetB#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "orderedAssetA#0",
        "orderedAssetB#0",
        "new_box_value%2#0",
        "tmp%11#0"
      ]
    },
    "620": {
      "op": "swap",
      "stack_out": [
        "orderedAssetA#0",
        "orderedAssetB#0",
        "tmp%11#0",
        "new_box_value%2#0"
      ]
    },
    "621": {
      "op": "box_put",
      "stack_out": [
        "orderedAssetA#0",
        "orderedAssetB#0"
      ]
    },
    "622": {
      "op": "swap",
      "stack_out": [
        "orderedAssetB#0",
        "orderedAssetA#0"
      ]
    },
    "623": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.optInToAsset",
      "op": "callsub optInToAsset",
      "stack_out": [
        "orderedAssetB#0"
      ]
    },
    "626": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.optInToAsset",
      "op": "callsub optInToAsset",
      "stack_out": []
    },
    "629": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "630": {
      "retsub": true,
      "op": "retsub"
    },
    "631": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.optInToAsset",
      "params": {
        "assetId#0": "uint64"
      },
      "block": "optInToAsset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "634": {
      "op": "itxn_begin"
    },
    "635": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "637": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetId#0 (copy)",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "assetId#0 (copy)"
      ]
    },
    "639": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "641": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "643": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "644": {
      "op": "itxn_field AssetAmount",
      "stack_out": []
    },
    "646": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "647": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "649": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "650": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "652": {
      "op": "itxn_submit"
    },
    "653": {
      "retsub": true,
      "op": "retsub"
    },
    "654": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.addLiquidity",
      "params": {
        "assetIdA#0": "uint64",
        "assetIdB#0": "uint64",
        "assetAAmount#0": "uint64",
        "assetBAmount#0": "uint64"
      },
      "block": "addLiquidity",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "657": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "lpToMint#0"
      ]
    },
    "659": {
      "op": "pushint 10000 // 10000",
      "defined_out": [
        "10000"
      ],
      "stack_out": [
        "lpToMint#0",
        "10000"
      ]
    },
    "662": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "10000"
      ],
      "stack_out": [
        "lpToMint#0",
        "10000",
        "0"
      ]
    },
    "663": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": [
        "lpToMint#0"
      ]
    },
    "666": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%0#0"
      ]
    },
    "668": {
      "op": "pushint 3 // 3",
      "defined_out": [
        "3",
        "tmp%0#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%0#0",
        "3"
      ]
    },
    "670": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%1#0"
      ]
    },
    "671": {
      "error": "Expected group size of 3 (app call + 2 asset transfers)",
      "op": "assert // Expected group size of 3 (app call + 2 asset transfers)",
      "stack_out": [
        "lpToMint#0"
      ]
    },
    "672": {
      "op": "frame_dig -4",
      "defined_out": [
        "assetIdA#0 (copy)"
      ],
      "stack_out": [
        "lpToMint#0",
        "assetIdA#0 (copy)"
      ]
    },
    "674": {
      "op": "frame_dig -3",
      "defined_out": [
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)"
      ],
      "stack_out": [
        "lpToMint#0",
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)"
      ]
    },
    "676": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.getPoolKey",
      "op": "callsub getPoolKey",
      "defined_out": [
        "poolKey#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "poolKey#0"
      ]
    },
    "679": {
      "op": "bytec_1 // \"pa_\"",
      "defined_out": [
        "\"pa_\"",
        "poolKey#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "\"pa_\""
      ]
    },
    "680": {
      "op": "dig 1",
      "defined_out": [
        "\"pa_\"",
        "poolKey#0",
        "poolKey#0 (copy)"
      ],
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "\"pa_\"",
        "poolKey#0 (copy)"
      ]
    },
    "682": {
      "op": "concat",
      "defined_out": [
        "poolKey#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "tmp%2#0"
      ]
    },
    "683": {
      "op": "dup",
      "defined_out": [
        "poolKey#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "684": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "poolKey#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "685": {
      "op": "bury 1",
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "tmp%2#0",
        "maybe_exists%0#0"
      ]
    },
    "687": {
      "error": "Pool does not exist",
      "op": "assert // Pool does not exist",
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "tmp%2#0"
      ]
    },
    "688": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "poolKey#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "689": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "690": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "poolAssetA#0",
        "poolKey#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "maybe_exists%1#0",
        "poolAssetA#0"
      ]
    },
    "691": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "poolAssetA#0",
        "maybe_exists%1#0"
      ]
    },
    "692": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "poolAssetA#0"
      ]
    },
    "693": {
      "op": "bytec_3 // \"pb_\"",
      "defined_out": [
        "\"pb_\"",
        "poolAssetA#0",
        "poolKey#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "poolAssetA#0",
        "\"pb_\""
      ]
    },
    "694": {
      "op": "dig 2",
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "poolAssetA#0",
        "\"pb_\"",
        "poolKey#0 (copy)"
      ]
    },
    "696": {
      "op": "concat",
      "defined_out": [
        "poolAssetA#0",
        "poolKey#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "poolAssetA#0",
        "tmp%4#0"
      ]
    },
    "697": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "poolAssetA#0",
        "poolKey#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "poolAssetA#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "698": {
      "op": "bury 1",
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "poolAssetA#0",
        "maybe_exists%2#0"
      ]
    },
    "700": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "poolAssetA#0"
      ]
    },
    "701": {
      "op": "bytec 4 // \"ra_\"",
      "defined_out": [
        "\"ra_\"",
        "poolAssetA#0",
        "poolKey#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "poolAssetA#0",
        "\"ra_\""
      ]
    },
    "703": {
      "op": "dig 2",
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "poolAssetA#0",
        "\"ra_\"",
        "poolKey#0 (copy)"
      ]
    },
    "705": {
      "op": "concat",
      "defined_out": [
        "poolAssetA#0",
        "poolKey#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "poolAssetA#0",
        "tmp%5#0"
      ]
    },
    "706": {
      "op": "dup",
      "stack_out": [
        "lpToMint#0",
        "poolKey#0",
        "poolAssetA#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "707": {
      "op": "cover 3",
      "defined_out": [
        "poolAssetA#0",
        "poolKey#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "poolKey#0",
        "poolAssetA#0",
        "tmp%5#0"
      ]
    },
    "709": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "poolAssetA#0",
        "poolKey#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "poolKey#0",
        "poolAssetA#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "710": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "poolKey#0",
        "poolAssetA#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "711": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%3#0",
        "poolAssetA#0",
        "poolKey#0",
        "reserveA#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "poolKey#0",
        "poolAssetA#0",
        "maybe_exists%3#0",
        "reserveA#0"
      ]
    },
    "712": {
      "op": "cover 3",
      "defined_out": [
        "maybe_exists%3#0",
        "poolAssetA#0",
        "poolKey#0",
        "reserveA#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "poolKey#0",
        "poolAssetA#0",
        "maybe_exists%3#0"
      ]
    },
    "714": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "poolKey#0",
        "poolAssetA#0"
      ]
    },
    "715": {
      "op": "bytec 5 // \"rb_\"",
      "defined_out": [
        "\"rb_\"",
        "poolAssetA#0",
        "poolKey#0",
        "reserveA#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "poolKey#0",
        "poolAssetA#0",
        "\"rb_\""
      ]
    },
    "717": {
      "op": "dig 2",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "poolKey#0",
        "poolAssetA#0",
        "\"rb_\"",
        "poolKey#0 (copy)"
      ]
    },
    "719": {
      "op": "concat",
      "defined_out": [
        "poolAssetA#0",
        "poolKey#0",
        "reserveA#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "poolKey#0",
        "poolAssetA#0",
        "tmp%6#0"
      ]
    },
    "720": {
      "op": "dup",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "poolKey#0",
        "poolAssetA#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "721": {
      "op": "cover 3",
      "defined_out": [
        "poolAssetA#0",
        "poolKey#0",
        "reserveA#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "poolKey#0",
        "poolAssetA#0",
        "tmp%6#0"
      ]
    },
    "723": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "poolAssetA#0",
        "poolKey#0",
        "reserveA#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "poolKey#0",
        "poolAssetA#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "724": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "poolKey#0",
        "poolAssetA#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ]
    },
    "725": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%4#0",
        "poolAssetA#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "poolKey#0",
        "poolAssetA#0",
        "maybe_exists%4#0",
        "reserveB#0"
      ]
    },
    "726": {
      "op": "cover 3",
      "defined_out": [
        "maybe_exists%4#0",
        "poolAssetA#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "poolKey#0",
        "poolAssetA#0",
        "maybe_exists%4#0"
      ]
    },
    "728": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "poolKey#0",
        "poolAssetA#0"
      ]
    },
    "729": {
      "op": "bytec 6 // \"lp_\"",
      "defined_out": [
        "\"lp_\"",
        "poolAssetA#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "poolKey#0",
        "poolAssetA#0",
        "\"lp_\""
      ]
    },
    "731": {
      "op": "dig 2",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "poolKey#0",
        "poolAssetA#0",
        "\"lp_\"",
        "poolKey#0 (copy)"
      ]
    },
    "733": {
      "op": "concat",
      "defined_out": [
        "poolAssetA#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "poolKey#0",
        "poolAssetA#0",
        "tmp%7#0"
      ]
    },
    "734": {
      "op": "dup",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "poolKey#0",
        "poolAssetA#0",
        "tmp%7#0",
        "tmp%7#0"
      ]
    },
    "735": {
      "op": "cover 3",
      "defined_out": [
        "poolAssetA#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "tmp%7#0",
        "poolKey#0",
        "poolAssetA#0",
        "tmp%7#0"
      ]
    },
    "737": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "poolAssetA#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "tmp%7#0",
        "poolKey#0",
        "poolAssetA#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "738": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "tmp%7#0",
        "poolKey#0",
        "poolAssetA#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ]
    },
    "739": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%5#0",
        "poolAssetA#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "tmp%7#0",
        "poolKey#0",
        "poolAssetA#0",
        "maybe_exists%5#0",
        "totalLp#0"
      ]
    },
    "740": {
      "op": "dup",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "tmp%7#0",
        "poolKey#0",
        "poolAssetA#0",
        "maybe_exists%5#0",
        "totalLp#0",
        "totalLp#0 (copy)"
      ]
    },
    "741": {
      "op": "cover 3",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "tmp%7#0",
        "poolKey#0",
        "totalLp#0",
        "poolAssetA#0",
        "maybe_exists%5#0",
        "totalLp#0"
      ]
    },
    "743": {
      "op": "cover 5",
      "defined_out": [
        "maybe_exists%5#0",
        "poolAssetA#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "tmp%7#0",
        "poolKey#0",
        "totalLp#0",
        "poolAssetA#0",
        "maybe_exists%5#0"
      ]
    },
    "745": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "tmp%7#0",
        "poolKey#0",
        "totalLp#0",
        "poolAssetA#0"
      ]
    },
    "746": {
      "op": "txn Sender",
      "defined_out": [
        "account#0",
        "poolAssetA#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "tmp%7#0",
        "poolKey#0",
        "totalLp#0",
        "poolAssetA#0",
        "account#0"
      ]
    },
    "748": {
      "op": "uncover 3",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "tmp%7#0",
        "totalLp#0",
        "poolAssetA#0",
        "account#0",
        "poolKey#0"
      ]
    },
    "750": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "tmp%7#0",
        "totalLp#0",
        "poolAssetA#0",
        "poolKey#0",
        "account#0"
      ]
    },
    "751": {
      "op": "concat",
      "defined_out": [
        "lpKey#0",
        "poolAssetA#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "tmp%7#0",
        "totalLp#0",
        "poolAssetA#0",
        "lpKey#0"
      ]
    },
    "752": {
      "op": "cover 3",
      "defined_out": [
        "lpKey#0",
        "poolAssetA#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "tmp%7#0",
        "totalLp#0",
        "poolAssetA#0"
      ]
    },
    "754": {
      "op": "frame_dig -4",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "tmp%7#0",
        "totalLp#0",
        "poolAssetA#0",
        "assetIdA#0 (copy)"
      ]
    },
    "756": {
      "op": "==",
      "defined_out": [
        "lpKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%9#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "tmp%7#0",
        "totalLp#0",
        "tmp%9#0"
      ]
    },
    "757": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetBAmount#0 (copy)",
        "lpKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%9#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "tmp%7#0",
        "totalLp#0",
        "tmp%9#0",
        "assetBAmount#0 (copy)"
      ]
    },
    "759": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetAAmount#0 (copy)",
        "assetBAmount#0 (copy)",
        "lpKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%9#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "tmp%7#0",
        "totalLp#0",
        "tmp%9#0",
        "assetBAmount#0 (copy)",
        "assetAAmount#0 (copy)"
      ]
    },
    "761": {
      "op": "dig 2",
      "defined_out": [
        "assetAAmount#0 (copy)",
        "assetBAmount#0 (copy)",
        "lpKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%9#0 (copy)",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "tmp%7#0",
        "totalLp#0",
        "tmp%9#0",
        "assetBAmount#0 (copy)",
        "assetAAmount#0 (copy)",
        "tmp%9#0 (copy)"
      ]
    },
    "763": {
      "op": "select",
      "defined_out": [
        "amountA#0",
        "lpKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%9#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "tmp%7#0",
        "totalLp#0",
        "tmp%9#0",
        "amountA#0"
      ]
    },
    "764": {
      "op": "cover 3",
      "defined_out": [
        "amountA#0",
        "lpKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "tmp%9#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountA#0",
        "tmp%7#0",
        "totalLp#0",
        "tmp%9#0"
      ]
    },
    "766": {
      "op": "frame_dig -2",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountA#0",
        "tmp%7#0",
        "totalLp#0",
        "tmp%9#0",
        "assetAAmount#0 (copy)"
      ]
    },
    "768": {
      "op": "frame_dig -1",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountA#0",
        "tmp%7#0",
        "totalLp#0",
        "tmp%9#0",
        "assetAAmount#0 (copy)",
        "assetBAmount#0 (copy)"
      ]
    },
    "770": {
      "op": "uncover 2",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountA#0",
        "tmp%7#0",
        "totalLp#0",
        "assetAAmount#0 (copy)",
        "assetBAmount#0 (copy)",
        "tmp%9#0"
      ]
    },
    "772": {
      "op": "select",
      "defined_out": [
        "amountA#0",
        "amountB#0",
        "lpKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountA#0",
        "tmp%7#0",
        "totalLp#0",
        "amountB#0"
      ]
    },
    "773": {
      "op": "cover 3",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "amountA#0",
        "tmp%7#0",
        "totalLp#0"
      ]
    },
    "775": {
      "op": "bnz addLiquidity_else_body@2",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "amountA#0",
        "tmp%7#0"
      ]
    },
    "778": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountA#0"
      ]
    },
    "779": {
      "op": "itob",
      "defined_out": [
        "amountB#0",
        "lpKey#0",
        "new_box_value%0#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "new_box_value%0#0"
      ]
    },
    "780": {
      "op": "frame_dig 1",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "new_box_value%0#0",
        "tmp%5#0"
      ]
    },
    "782": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "tmp%5#0",
        "new_box_value%0#0"
      ]
    },
    "783": {
      "op": "box_put",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0"
      ]
    },
    "784": {
      "op": "frame_dig 7",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0"
      ]
    },
    "786": {
      "op": "itob",
      "defined_out": [
        "amountB#0",
        "lpKey#0",
        "new_box_value%1#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "new_box_value%1#0"
      ]
    },
    "787": {
      "op": "frame_dig 3",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "new_box_value%1#0",
        "tmp%6#0"
      ]
    },
    "789": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "tmp%6#0",
        "new_box_value%1#0"
      ]
    },
    "790": {
      "op": "box_put",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0"
      ]
    },
    "791": {
      "op": "intc_3 // 1000",
      "defined_out": [
        "1000",
        "amountB#0",
        "lpKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "1000"
      ]
    },
    "792": {
      "op": "itob",
      "defined_out": [
        "amountB#0",
        "lpKey#0",
        "new_box_value%2#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "new_box_value%2#0"
      ]
    },
    "793": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "new_box_value%2#0",
        "tmp%7#0"
      ]
    },
    "794": {
      "op": "dig 1",
      "defined_out": [
        "amountB#0",
        "lpKey#0",
        "new_box_value%2#0",
        "new_box_value%2#0 (copy)",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "new_box_value%2#0",
        "tmp%7#0",
        "new_box_value%2#0 (copy)"
      ]
    },
    "796": {
      "op": "box_put",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "new_box_value%2#0"
      ]
    },
    "797": {
      "op": "bytec 7 // \"bal_\"",
      "defined_out": [
        "\"bal_\"",
        "amountB#0",
        "lpKey#0",
        "new_box_value%2#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "new_box_value%2#0",
        "\"bal_\""
      ]
    },
    "799": {
      "op": "frame_dig 6",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "new_box_value%2#0",
        "\"bal_\"",
        "lpKey#0"
      ]
    },
    "801": {
      "op": "concat",
      "defined_out": [
        "amountB#0",
        "lpKey#0",
        "new_box_value%2#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%15#0",
        "tmp%5#0",
        "tmp%6#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "new_box_value%2#0",
        "tmp%15#0"
      ]
    },
    "802": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%15#0",
        "new_box_value%2#0"
      ]
    },
    "803": {
      "op": "box_put",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0"
      ]
    },
    "804": {
      "block": "addLiquidity_after_if_else@6",
      "stack_in": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "1"
      ]
    },
    "805": {
      "op": "frame_bury 0"
    },
    "807": {
      "retsub": true,
      "op": "retsub"
    },
    "808": {
      "block": "addLiquidity_else_body@2",
      "stack_in": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "amountA#0",
        "tmp%7#0"
      ],
      "op": "swap",
      "defined_out": [
        "amountA#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountA#0"
      ]
    },
    "809": {
      "op": "dup",
      "defined_out": [
        "amountA#0",
        "amountA#0 (copy)"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountA#0",
        "amountA#0 (copy)"
      ]
    },
    "810": {
      "op": "frame_dig 5",
      "defined_out": [
        "amountA#0",
        "amountA#0 (copy)",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountA#0",
        "amountA#0 (copy)",
        "totalLp#0"
      ]
    },
    "812": {
      "op": "dup",
      "defined_out": [
        "amountA#0",
        "amountA#0 (copy)",
        "totalLp#0",
        "totalLp#0 (copy)"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountA#0",
        "amountA#0 (copy)",
        "totalLp#0 (copy)",
        "totalLp#0 (copy)"
      ]
    },
    "813": {
      "op": "cover 2",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountA#0",
        "totalLp#0",
        "amountA#0 (copy)",
        "totalLp#0 (copy)"
      ]
    },
    "815": {
      "op": "*",
      "defined_out": [
        "amountA#0",
        "tmp%16#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountA#0",
        "totalLp#0",
        "tmp%16#0"
      ]
    },
    "816": {
      "op": "frame_dig 2",
      "defined_out": [
        "amountA#0",
        "reserveA#0",
        "tmp%16#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountA#0",
        "totalLp#0",
        "tmp%16#0",
        "reserveA#0"
      ]
    },
    "818": {
      "op": "dup",
      "defined_out": [
        "amountA#0",
        "reserveA#0",
        "reserveA#0 (copy)",
        "tmp%16#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountA#0",
        "totalLp#0",
        "tmp%16#0",
        "reserveA#0 (copy)",
        "reserveA#0 (copy)"
      ]
    },
    "819": {
      "op": "cover 3",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountA#0",
        "reserveA#0",
        "totalLp#0",
        "tmp%16#0",
        "reserveA#0 (copy)"
      ]
    },
    "821": {
      "op": "/",
      "defined_out": [
        "amountA#0",
        "lpMintedA#0",
        "reserveA#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountA#0",
        "reserveA#0",
        "totalLp#0",
        "lpMintedA#0"
      ]
    },
    "822": {
      "op": "frame_dig 7",
      "defined_out": [
        "amountA#0",
        "amountB#0",
        "lpMintedA#0",
        "reserveA#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountA#0",
        "reserveA#0",
        "totalLp#0",
        "lpMintedA#0",
        "amountB#0"
      ]
    },
    "824": {
      "op": "dup",
      "defined_out": [
        "amountA#0",
        "amountB#0",
        "amountB#0 (copy)",
        "lpMintedA#0",
        "reserveA#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountA#0",
        "reserveA#0",
        "totalLp#0",
        "lpMintedA#0",
        "amountB#0 (copy)",
        "amountB#0 (copy)"
      ]
    },
    "825": {
      "op": "cover 5",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "amountA#0",
        "reserveA#0",
        "totalLp#0",
        "lpMintedA#0",
        "amountB#0 (copy)"
      ]
    },
    "827": {
      "op": "dig 2",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "amountA#0",
        "reserveA#0",
        "totalLp#0",
        "lpMintedA#0",
        "amountB#0 (copy)",
        "totalLp#0 (copy)"
      ]
    },
    "829": {
      "op": "*",
      "defined_out": [
        "amountA#0",
        "amountB#0",
        "lpMintedA#0",
        "reserveA#0",
        "tmp%17#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "amountA#0",
        "reserveA#0",
        "totalLp#0",
        "lpMintedA#0",
        "tmp%17#0"
      ]
    },
    "830": {
      "op": "frame_dig 4",
      "defined_out": [
        "amountA#0",
        "amountB#0",
        "lpMintedA#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%17#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "amountA#0",
        "reserveA#0",
        "totalLp#0",
        "lpMintedA#0",
        "tmp%17#0",
        "reserveB#0"
      ]
    },
    "832": {
      "op": "dup",
      "defined_out": [
        "amountA#0",
        "amountB#0",
        "lpMintedA#0",
        "reserveA#0",
        "reserveB#0",
        "reserveB#0 (copy)",
        "tmp%17#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "amountA#0",
        "reserveA#0",
        "totalLp#0",
        "lpMintedA#0",
        "tmp%17#0",
        "reserveB#0 (copy)",
        "reserveB#0 (copy)"
      ]
    },
    "833": {
      "op": "cover 4",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "amountA#0",
        "reserveA#0",
        "reserveB#0",
        "totalLp#0",
        "lpMintedA#0",
        "tmp%17#0",
        "reserveB#0 (copy)"
      ]
    },
    "835": {
      "op": "/",
      "defined_out": [
        "amountA#0",
        "amountB#0",
        "lpMintedA#0",
        "lpMintedB#0",
        "reserveA#0",
        "reserveB#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "amountA#0",
        "reserveA#0",
        "reserveB#0",
        "totalLp#0",
        "lpMintedA#0",
        "lpMintedB#0"
      ]
    },
    "836": {
      "op": "dup2",
      "defined_out": [
        "amountA#0",
        "amountB#0",
        "lpMintedA#0",
        "lpMintedA#0 (copy)",
        "lpMintedB#0",
        "lpMintedB#0 (copy)",
        "reserveA#0",
        "reserveB#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "amountA#0",
        "reserveA#0",
        "reserveB#0",
        "totalLp#0",
        "lpMintedA#0",
        "lpMintedB#0",
        "lpMintedA#0 (copy)",
        "lpMintedB#0 (copy)"
      ]
    },
    "837": {
      "op": "<",
      "defined_out": [
        "amountA#0",
        "amountB#0",
        "lpMintedA#0",
        "lpMintedB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%18#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "amountA#0",
        "reserveA#0",
        "reserveB#0",
        "totalLp#0",
        "lpMintedA#0",
        "lpMintedB#0",
        "tmp%18#0"
      ]
    },
    "838": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "amountA#0",
        "reserveA#0",
        "reserveB#0",
        "totalLp#0",
        "lpMintedA#0",
        "tmp%18#0",
        "lpMintedB#0"
      ]
    },
    "839": {
      "op": "cover 2",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "amountA#0",
        "reserveA#0",
        "reserveB#0",
        "totalLp#0",
        "lpMintedB#0",
        "lpMintedA#0",
        "tmp%18#0"
      ]
    },
    "841": {
      "op": "select",
      "defined_out": [
        "amountA#0",
        "amountB#0",
        "lpToMint#0",
        "reserveA#0",
        "reserveB#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "amountA#0",
        "reserveA#0",
        "reserveB#0",
        "totalLp#0",
        "lpToMint#0"
      ]
    },
    "842": {
      "op": "dup",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "amountA#0",
        "reserveA#0",
        "reserveB#0",
        "totalLp#0",
        "lpToMint#0",
        "lpToMint#0 (copy)"
      ]
    },
    "843": {
      "op": "cover 3",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "amountA#0",
        "reserveA#0",
        "lpToMint#0",
        "reserveB#0",
        "totalLp#0",
        "lpToMint#0"
      ]
    },
    "845": {
      "op": "frame_bury 0",
      "defined_out": [
        "amountA#0",
        "amountB#0",
        "lpToMint#0",
        "reserveA#0",
        "reserveB#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "amountA#0",
        "reserveA#0",
        "lpToMint#0",
        "reserveB#0",
        "totalLp#0"
      ]
    },
    "847": {
      "op": "uncover 3",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "amountA#0",
        "lpToMint#0",
        "reserveB#0",
        "totalLp#0",
        "reserveA#0"
      ]
    },
    "849": {
      "op": "uncover 4",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "lpToMint#0",
        "reserveB#0",
        "totalLp#0",
        "reserveA#0",
        "amountA#0"
      ]
    },
    "851": {
      "op": "+",
      "defined_out": [
        "amountB#0",
        "lpToMint#0",
        "new_box_value%4#0",
        "reserveA#0",
        "reserveB#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "lpToMint#0",
        "reserveB#0",
        "totalLp#0",
        "new_box_value%4#0"
      ]
    },
    "852": {
      "op": "itob",
      "defined_out": [
        "amountB#0",
        "lpToMint#0",
        "new_box_value%5#0",
        "reserveA#0",
        "reserveB#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "lpToMint#0",
        "reserveB#0",
        "totalLp#0",
        "new_box_value%5#0"
      ]
    },
    "853": {
      "op": "frame_dig 1",
      "defined_out": [
        "amountB#0",
        "lpToMint#0",
        "new_box_value%5#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "lpToMint#0",
        "reserveB#0",
        "totalLp#0",
        "new_box_value%5#0",
        "tmp%5#0"
      ]
    },
    "855": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "lpToMint#0",
        "reserveB#0",
        "totalLp#0",
        "tmp%5#0",
        "new_box_value%5#0"
      ]
    },
    "856": {
      "op": "box_put",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "lpToMint#0",
        "reserveB#0",
        "totalLp#0"
      ]
    },
    "857": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "amountB#0",
        "lpToMint#0",
        "totalLp#0",
        "reserveB#0"
      ]
    },
    "858": {
      "op": "uncover 3",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "lpToMint#0",
        "totalLp#0",
        "reserveB#0",
        "amountB#0"
      ]
    },
    "860": {
      "op": "+",
      "defined_out": [
        "amountB#0",
        "lpToMint#0",
        "new_box_value%6#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "lpToMint#0",
        "totalLp#0",
        "new_box_value%6#0"
      ]
    },
    "861": {
      "op": "itob",
      "defined_out": [
        "amountB#0",
        "lpToMint#0",
        "new_box_value%7#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "lpToMint#0",
        "totalLp#0",
        "new_box_value%7#0"
      ]
    },
    "862": {
      "op": "frame_dig 3",
      "defined_out": [
        "amountB#0",
        "lpToMint#0",
        "new_box_value%7#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "lpToMint#0",
        "totalLp#0",
        "new_box_value%7#0",
        "tmp%6#0"
      ]
    },
    "864": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "lpToMint#0",
        "totalLp#0",
        "tmp%6#0",
        "new_box_value%7#0"
      ]
    },
    "865": {
      "op": "box_put",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "lpToMint#0",
        "totalLp#0"
      ]
    },
    "866": {
      "op": "+",
      "defined_out": [
        "amountB#0",
        "lpToMint#0",
        "new_box_value%8#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "new_box_value%8#0"
      ]
    },
    "867": {
      "op": "itob",
      "defined_out": [
        "amountB#0",
        "lpToMint#0",
        "new_box_value%9#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%7#0",
        "new_box_value%9#0"
      ]
    },
    "868": {
      "op": "box_put",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0"
      ]
    },
    "869": {
      "op": "bytec 7 // \"bal_\"",
      "defined_out": [
        "\"bal_\"",
        "amountB#0",
        "lpToMint#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "\"bal_\""
      ]
    },
    "871": {
      "op": "frame_dig 6",
      "defined_out": [
        "\"bal_\"",
        "amountB#0",
        "lpKey#0",
        "lpToMint#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "\"bal_\"",
        "lpKey#0"
      ]
    },
    "873": {
      "op": "concat",
      "defined_out": [
        "amountB#0",
        "lpKey#0",
        "lpToMint#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%22#0",
        "tmp%5#0",
        "tmp%6#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%22#0"
      ]
    },
    "874": {
      "op": "dup",
      "defined_out": [
        "amountB#0",
        "lpKey#0",
        "lpToMint#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%22#0",
        "tmp%5#0",
        "tmp%6#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%22#0",
        "tmp%22#0"
      ]
    },
    "875": {
      "op": "box_len",
      "defined_out": [
        "amountB#0",
        "lpKey#0",
        "lpToMint#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%22#0",
        "tmp%5#0",
        "tmp%6#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%22#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "876": {
      "op": "bury 1",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%22#0",
        "maybe_exists%6#0"
      ]
    },
    "878": {
      "op": "bnz addLiquidity_else_body@4",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%22#0"
      ]
    },
    "881": {
      "op": "frame_dig 0",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%22#0",
        "lpToMint#0"
      ]
    },
    "883": {
      "op": "itob",
      "defined_out": [
        "amountB#0",
        "lpKey#0",
        "lpToMint#0",
        "new_box_value%10#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%22#0",
        "tmp%5#0",
        "tmp%6#0",
        "totalLp#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%22#0",
        "new_box_value%10#0"
      ]
    },
    "884": {
      "op": "box_put",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0"
      ]
    },
    "885": {
      "op": "b addLiquidity_after_if_else@6"
    },
    "888": {
      "block": "addLiquidity_else_body@4",
      "stack_in": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%22#0"
      ],
      "op": "dup",
      "defined_out": [
        "tmp%22#0",
        "tmp%22#0 (copy)"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%22#0",
        "tmp%22#0 (copy)"
      ]
    },
    "889": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%22#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "890": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%22#0",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ]
    },
    "891": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value_converted%5#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%22#0",
        "maybe_exists%7#0",
        "maybe_value_converted%5#0"
      ]
    },
    "892": {
      "op": "swap",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%22#0",
        "maybe_value_converted%5#0",
        "maybe_exists%7#0"
      ]
    },
    "893": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%22#0",
        "maybe_value_converted%5#0"
      ]
    },
    "894": {
      "op": "frame_dig 0",
      "defined_out": [
        "lpToMint#0",
        "maybe_value_converted%5#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%22#0",
        "maybe_value_converted%5#0",
        "lpToMint#0"
      ]
    },
    "896": {
      "op": "+",
      "defined_out": [
        "lpToMint#0",
        "new_box_value%11#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%22#0",
        "new_box_value%11#0"
      ]
    },
    "897": {
      "op": "itob",
      "defined_out": [
        "lpToMint#0",
        "new_box_value%12#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0",
        "tmp%22#0",
        "new_box_value%12#0"
      ]
    },
    "898": {
      "op": "box_put",
      "stack_out": [
        "lpToMint#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "totalLp#0",
        "lpKey#0",
        "amountB#0"
      ]
    },
    "899": {
      "op": "b addLiquidity_after_if_else@6"
    },
    "902": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.removeLiquidity",
      "params": {
        "assetIdA#0": "uint64",
        "assetIdB#0": "uint64",
        "lpToBurn#0": "uint64"
      },
      "block": "removeLiquidity",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "905": {
      "op": "pushint 10000 // 10000",
      "defined_out": [
        "10000"
      ],
      "stack_out": [
        "10000"
      ]
    },
    "908": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "10000"
      ],
      "stack_out": [
        "10000",
        "0"
      ]
    },
    "909": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": []
    },
    "912": {
      "op": "frame_dig -3",
      "defined_out": [
        "assetIdA#0 (copy)"
      ],
      "stack_out": [
        "assetIdA#0 (copy)"
      ]
    },
    "914": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)"
      ],
      "stack_out": [
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)"
      ]
    },
    "916": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.getPoolKey",
      "op": "callsub getPoolKey",
      "defined_out": [
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0"
      ]
    },
    "919": {
      "op": "bytec_1 // \"pa_\"",
      "defined_out": [
        "\"pa_\"",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "\"pa_\""
      ]
    },
    "920": {
      "op": "dig 1",
      "defined_out": [
        "\"pa_\"",
        "poolKey#0",
        "poolKey#0 (copy)"
      ],
      "stack_out": [
        "poolKey#0",
        "\"pa_\"",
        "poolKey#0 (copy)"
      ]
    },
    "922": {
      "op": "concat",
      "defined_out": [
        "poolKey#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "poolKey#0",
        "tmp%0#0"
      ]
    },
    "923": {
      "op": "dup",
      "defined_out": [
        "poolKey#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "poolKey#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "924": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "poolKey#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "poolKey#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "925": {
      "op": "bury 1",
      "stack_out": [
        "poolKey#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "927": {
      "error": "Pool does not exist",
      "op": "assert // Pool does not exist",
      "stack_out": [
        "poolKey#0",
        "tmp%0#0"
      ]
    },
    "928": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "929": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "930": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "poolAssetA#0",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "maybe_exists%1#0",
        "poolAssetA#0"
      ]
    },
    "931": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "maybe_exists%1#0"
      ]
    },
    "932": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0"
      ]
    },
    "933": {
      "op": "bytec_3 // \"pb_\"",
      "defined_out": [
        "\"pb_\"",
        "poolAssetA#0",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "\"pb_\""
      ]
    },
    "934": {
      "op": "dig 2",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "\"pb_\"",
        "poolKey#0 (copy)"
      ]
    },
    "936": {
      "op": "concat",
      "defined_out": [
        "poolAssetA#0",
        "poolKey#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "tmp%2#0"
      ]
    },
    "937": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "poolAssetA#0",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "938": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "939": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%2#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "maybe_exists%2#0",
        "poolAssetB#0"
      ]
    },
    "940": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "maybe_exists%2#0"
      ]
    },
    "941": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0"
      ]
    },
    "942": {
      "op": "bytec 4 // \"ra_\"",
      "defined_out": [
        "\"ra_\"",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "\"ra_\""
      ]
    },
    "944": {
      "op": "dig 3",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "\"ra_\"",
        "poolKey#0 (copy)"
      ]
    },
    "946": {
      "op": "concat",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0"
      ]
    },
    "947": {
      "op": "dup",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "948": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "949": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "950": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%3#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "maybe_exists%3#0",
        "reserveA#0"
      ]
    },
    "951": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "maybe_exists%3#0"
      ]
    },
    "952": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0"
      ]
    },
    "953": {
      "op": "bytec 5 // \"rb_\"",
      "defined_out": [
        "\"rb_\"",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "\"rb_\""
      ]
    },
    "955": {
      "op": "dig 5",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "\"rb_\"",
        "poolKey#0 (copy)"
      ]
    },
    "957": {
      "op": "concat",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0"
      ]
    },
    "958": {
      "op": "dup",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "tmp%4#0 (copy)"
      ]
    },
    "959": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "960": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ]
    },
    "961": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%4#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "maybe_exists%4#0",
        "reserveB#0"
      ]
    },
    "962": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "maybe_exists%4#0"
      ]
    },
    "963": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0"
      ]
    },
    "964": {
      "op": "bytec 6 // \"lp_\"",
      "defined_out": [
        "\"lp_\"",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "\"lp_\""
      ]
    },
    "966": {
      "op": "dig 7",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "\"lp_\"",
        "poolKey#0 (copy)"
      ]
    },
    "968": {
      "op": "concat",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0"
      ]
    },
    "969": {
      "op": "dup",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%5#0 (copy)"
      ]
    },
    "970": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "971": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ]
    },
    "972": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%5#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "maybe_exists%5#0",
        "totalLp#0"
      ]
    },
    "973": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "maybe_exists%5#0"
      ]
    },
    "974": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0"
      ]
    },
    "975": {
      "op": "txn Sender",
      "defined_out": [
        "account#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "account#0"
      ]
    },
    "977": {
      "op": "uncover 9",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "account#0",
        "poolKey#0"
      ]
    },
    "979": {
      "op": "swap",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "poolKey#0",
        "account#0"
      ]
    },
    "980": {
      "op": "concat",
      "defined_out": [
        "lpKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "lpKey#0"
      ]
    },
    "981": {
      "op": "bytec 7 // \"bal_\"",
      "defined_out": [
        "\"bal_\"",
        "lpKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "lpKey#0",
        "\"bal_\""
      ]
    },
    "983": {
      "op": "swap",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "\"bal_\"",
        "lpKey#0"
      ]
    },
    "984": {
      "op": "concat",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0"
      ]
    },
    "985": {
      "op": "dup",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%7#0 (copy)",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "986": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "987": {
      "op": "bury 1",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "maybe_exists%6#0"
      ]
    },
    "989": {
      "error": "No LP balance found",
      "op": "assert // No LP balance found",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0"
      ]
    },
    "990": {
      "op": "dup",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "tmp%7#0 (copy)"
      ]
    },
    "991": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "992": {
      "op": "swap",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "maybe_exists%7#0",
        "maybe_value%7#0"
      ]
    },
    "993": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%7#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "totalLp#0",
        "userLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "maybe_exists%7#0",
        "userLp#0"
      ]
    },
    "994": {
      "op": "swap",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "userLp#0",
        "maybe_exists%7#0"
      ]
    },
    "995": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "userLp#0"
      ]
    },
    "996": {
      "op": "frame_dig -1",
      "defined_out": [
        "lpToBurn#0 (copy)",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "totalLp#0",
        "userLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "userLp#0",
        "lpToBurn#0 (copy)"
      ]
    },
    "998": {
      "error": "Must burn positive amount",
      "op": "assert // Must burn positive amount",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "userLp#0"
      ]
    },
    "999": {
      "op": "frame_dig -1",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "userLp#0",
        "lpToBurn#0 (copy)"
      ]
    },
    "1001": {
      "op": ">=",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%10#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "tmp%10#0"
      ]
    },
    "1002": {
      "error": "Insufficient LP balance",
      "op": "assert // Insufficient LP balance",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0"
      ]
    },
    "1003": {
      "op": "dig 5",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveA#0 (copy)",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "reserveA#0 (copy)"
      ]
    },
    "1005": {
      "op": "frame_dig -1",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "reserveA#0 (copy)",
        "lpToBurn#0 (copy)"
      ]
    },
    "1007": {
      "op": "*",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "tmp%11#0"
      ]
    },
    "1008": {
      "op": "dig 2",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%11#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "totalLp#0",
        "totalLp#0 (copy)"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "tmp%11#0",
        "totalLp#0 (copy)"
      ]
    },
    "1010": {
      "op": "/",
      "defined_out": [
        "amtA#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0"
      ]
    },
    "1011": {
      "op": "dig 4",
      "defined_out": [
        "amtA#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "reserveB#0 (copy)",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0",
        "reserveB#0 (copy)"
      ]
    },
    "1013": {
      "op": "frame_dig -1",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0",
        "reserveB#0 (copy)",
        "lpToBurn#0 (copy)"
      ]
    },
    "1015": {
      "op": "*",
      "defined_out": [
        "amtA#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%12#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0",
        "tmp%12#0"
      ]
    },
    "1016": {
      "op": "dig 3",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0",
        "tmp%12#0",
        "totalLp#0 (copy)"
      ]
    },
    "1018": {
      "op": "/",
      "defined_out": [
        "amtA#0",
        "amtB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "reserveA#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0"
      ]
    },
    "1019": {
      "op": "uncover 7",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "reserveA#0"
      ]
    },
    "1021": {
      "op": "dig 2",
      "defined_out": [
        "amtA#0",
        "amtA#0 (copy)",
        "amtB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "reserveA#0",
        "amtA#0 (copy)"
      ]
    },
    "1023": {
      "op": "-",
      "defined_out": [
        "amtA#0",
        "amtB#0",
        "new_box_value%0#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "new_box_value%0#0"
      ]
    },
    "1024": {
      "op": "itob",
      "defined_out": [
        "amtA#0",
        "amtB#0",
        "new_box_value%1#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveB#0",
        "tmp%3#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "new_box_value%1#0"
      ]
    },
    "1025": {
      "op": "uncover 8",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "new_box_value%1#0",
        "tmp%3#0"
      ]
    },
    "1027": {
      "op": "swap",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "tmp%3#0",
        "new_box_value%1#0"
      ]
    },
    "1028": {
      "op": "box_put",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%4#0",
        "reserveB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0"
      ]
    },
    "1029": {
      "op": "uncover 5",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%4#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "reserveB#0"
      ]
    },
    "1031": {
      "op": "dig 1",
      "defined_out": [
        "amtA#0",
        "amtB#0",
        "amtB#0 (copy)",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveB#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%4#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "reserveB#0",
        "amtB#0 (copy)"
      ]
    },
    "1033": {
      "op": "-",
      "defined_out": [
        "amtA#0",
        "amtB#0",
        "new_box_value%2#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%4#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "new_box_value%2#0"
      ]
    },
    "1034": {
      "op": "itob",
      "defined_out": [
        "amtA#0",
        "amtB#0",
        "new_box_value%3#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%4#0",
        "tmp%5#0",
        "tmp%7#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%4#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "new_box_value%3#0"
      ]
    },
    "1035": {
      "op": "uncover 6",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "new_box_value%3#0",
        "tmp%4#0"
      ]
    },
    "1037": {
      "op": "swap",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "tmp%4#0",
        "new_box_value%3#0"
      ]
    },
    "1038": {
      "op": "box_put",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "totalLp#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0"
      ]
    },
    "1039": {
      "op": "uncover 3",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "totalLp#0"
      ]
    },
    "1041": {
      "op": "frame_dig -1",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "totalLp#0",
        "lpToBurn#0 (copy)"
      ]
    },
    "1043": {
      "op": "-",
      "defined_out": [
        "amtA#0",
        "amtB#0",
        "new_box_value%4#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "new_box_value%4#0"
      ]
    },
    "1044": {
      "op": "itob",
      "defined_out": [
        "amtA#0",
        "amtB#0",
        "new_box_value%5#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "new_box_value%5#0"
      ]
    },
    "1045": {
      "op": "uncover 4",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "new_box_value%5#0",
        "tmp%5#0"
      ]
    },
    "1047": {
      "op": "swap",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "tmp%5#0",
        "new_box_value%5#0"
      ]
    },
    "1048": {
      "op": "box_put",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0"
      ]
    },
    "1049": {
      "op": "dig 2",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "tmp%7#0 (copy)"
      ]
    },
    "1051": {
      "op": "box_get",
      "defined_out": [
        "amtA#0",
        "amtB#0",
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "1052": {
      "op": "swap",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "maybe_exists%8#0",
        "maybe_value%8#0"
      ]
    },
    "1053": {
      "op": "btoi",
      "defined_out": [
        "amtA#0",
        "amtB#0",
        "maybe_exists%8#0",
        "maybe_value_converted%6#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "maybe_exists%8#0",
        "maybe_value_converted%6#0"
      ]
    },
    "1054": {
      "op": "swap",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "maybe_value_converted%6#0",
        "maybe_exists%8#0"
      ]
    },
    "1055": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "maybe_value_converted%6#0"
      ]
    },
    "1056": {
      "op": "frame_dig -1",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "maybe_value_converted%6#0",
        "lpToBurn#0 (copy)"
      ]
    },
    "1058": {
      "op": "-",
      "defined_out": [
        "amtA#0",
        "amtB#0",
        "new_box_value%6#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "new_box_value%6#0"
      ]
    },
    "1059": {
      "op": "itob",
      "defined_out": [
        "amtA#0",
        "amtB#0",
        "new_box_value%7#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%7#0",
        "amtA#0",
        "amtB#0",
        "new_box_value%7#0"
      ]
    },
    "1060": {
      "op": "uncover 3",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "amtA#0",
        "amtB#0",
        "new_box_value%7#0",
        "tmp%7#0"
      ]
    },
    "1062": {
      "op": "swap",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "amtA#0",
        "amtB#0",
        "tmp%7#0",
        "new_box_value%7#0"
      ]
    },
    "1063": {
      "op": "box_put",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "amtA#0",
        "amtB#0"
      ]
    },
    "1064": {
      "op": "itxn_begin"
    },
    "1065": {
      "op": "txn Sender",
      "defined_out": [
        "amtA#0",
        "amtB#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "poolAssetA#0",
        "poolAssetB#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "amtA#0",
        "amtB#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1067": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "amtA#0",
        "amtB#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "poolAssetA#0",
        "poolAssetB#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "amtA#0",
        "amtB#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1069": {
      "op": "itxn_field Sender",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "amtA#0",
        "amtB#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1071": {
      "op": "uncover 4",
      "stack_out": [
        "poolAssetB#0",
        "amtA#0",
        "amtB#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "poolAssetA#0"
      ]
    },
    "1073": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "poolAssetB#0",
        "amtA#0",
        "amtB#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1075": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "poolAssetB#0",
        "amtA#0",
        "amtB#0"
      ]
    },
    "1077": {
      "op": "swap",
      "stack_out": [
        "poolAssetB#0",
        "amtB#0",
        "amtA#0"
      ]
    },
    "1078": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "poolAssetB#0",
        "amtB#0"
      ]
    },
    "1080": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "amtB#0",
        "poolAssetB#0"
      ],
      "stack_out": [
        "poolAssetB#0",
        "amtB#0",
        "4"
      ]
    },
    "1081": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "poolAssetB#0",
        "amtB#0"
      ]
    },
    "1083": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "amtB#0",
        "poolAssetB#0"
      ],
      "stack_out": [
        "poolAssetB#0",
        "amtB#0",
        "1"
      ]
    },
    "1084": {
      "op": "itxn_field Fee",
      "stack_out": [
        "poolAssetB#0",
        "amtB#0"
      ]
    },
    "1086": {
      "op": "itxn_submit"
    },
    "1087": {
      "op": "itxn_begin"
    },
    "1088": {
      "op": "txn Sender",
      "defined_out": [
        "amtB#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "poolAssetB#0"
      ],
      "stack_out": [
        "poolAssetB#0",
        "amtB#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1090": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "amtB#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0",
        "poolAssetB#0"
      ],
      "stack_out": [
        "poolAssetB#0",
        "amtB#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%1%%param_Sender_idx_0#0"
      ]
    },
    "1092": {
      "op": "itxn_field Sender",
      "stack_out": [
        "poolAssetB#0",
        "amtB#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1094": {
      "op": "uncover 2",
      "stack_out": [
        "amtB#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0",
        "poolAssetB#0"
      ]
    },
    "1096": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "amtB#0",
        "inner_txn_params%1%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1098": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "amtB#0"
      ]
    },
    "1100": {
      "op": "itxn_field AssetAmount",
      "stack_out": []
    },
    "1102": {
      "op": "intc_2 // 4",
      "stack_out": [
        "4"
      ]
    },
    "1103": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1105": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1106": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1108": {
      "op": "itxn_submit"
    },
    "1109": {
      "op": "intc_1 // 1",
      "stack_out": [
        "1"
      ]
    },
    "1110": {
      "retsub": true,
      "op": "retsub"
    },
    "1111": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.swap",
      "params": {
        "assetIdA#0": "uint64",
        "assetIdB#0": "uint64",
        "sendAssetId#0": "uint64",
        "swapAmount#0": "uint64"
      },
      "block": "swap",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "1114": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "newReserveA#1"
      ]
    },
    "1116": {
      "op": "dup",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0"
      ]
    },
    "1117": {
      "op": "pushint 8000 // 8000",
      "defined_out": [
        "8000"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "8000"
      ]
    },
    "1120": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "8000"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "8000",
        "0"
      ]
    },
    "1121": {
      "callsub": "_puya_lib.util.ensure_budget",
      "op": "callsub ensure_budget",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0"
      ]
    },
    "1124": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "tmp%0#0"
      ]
    },
    "1126": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%0#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "tmp%0#0",
        "2"
      ]
    },
    "1128": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "tmp%1#0"
      ]
    },
    "1129": {
      "error": "Expected group size of 2 (app call + asset transfer)",
      "op": "assert // Expected group size of 2 (app call + asset transfer)",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0"
      ]
    },
    "1130": {
      "op": "frame_dig -4",
      "defined_out": [
        "assetIdA#0 (copy)"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "assetIdA#0 (copy)"
      ]
    },
    "1132": {
      "op": "frame_dig -3",
      "defined_out": [
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)"
      ]
    },
    "1134": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.getPoolKey",
      "op": "callsub getPoolKey",
      "defined_out": [
        "poolKey#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolKey#0"
      ]
    },
    "1137": {
      "op": "bytec_1 // \"pa_\"",
      "defined_out": [
        "\"pa_\"",
        "poolKey#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolKey#0",
        "\"pa_\""
      ]
    },
    "1138": {
      "op": "dig 1",
      "defined_out": [
        "\"pa_\"",
        "poolKey#0",
        "poolKey#0 (copy)"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolKey#0",
        "\"pa_\"",
        "poolKey#0 (copy)"
      ]
    },
    "1140": {
      "op": "concat",
      "defined_out": [
        "poolKey#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolKey#0",
        "tmp%2#0"
      ]
    },
    "1141": {
      "op": "dup",
      "defined_out": [
        "poolKey#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolKey#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "1142": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "poolKey#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolKey#0",
        "tmp%2#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1143": {
      "op": "bury 1",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolKey#0",
        "tmp%2#0",
        "maybe_exists%0#0"
      ]
    },
    "1145": {
      "error": "Pool does not exist",
      "op": "assert // Pool does not exist",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolKey#0",
        "tmp%2#0"
      ]
    },
    "1146": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "poolKey#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolKey#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1147": {
      "op": "swap",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "1148": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "poolAssetA#0",
        "poolKey#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolKey#0",
        "maybe_exists%1#0",
        "poolAssetA#0"
      ]
    },
    "1149": {
      "op": "dup",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolKey#0",
        "maybe_exists%1#0",
        "poolAssetA#0",
        "poolAssetA#0 (copy)"
      ]
    },
    "1150": {
      "op": "cover 3",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolKey#0",
        "maybe_exists%1#0",
        "poolAssetA#0"
      ]
    },
    "1152": {
      "op": "cover 3",
      "defined_out": [
        "maybe_exists%1#0",
        "poolAssetA#0",
        "poolKey#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetA#0",
        "poolKey#0",
        "maybe_exists%1#0"
      ]
    },
    "1154": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetA#0",
        "poolKey#0"
      ]
    },
    "1155": {
      "op": "bytec_3 // \"pb_\"",
      "defined_out": [
        "\"pb_\"",
        "poolAssetA#0",
        "poolKey#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetA#0",
        "poolKey#0",
        "\"pb_\""
      ]
    },
    "1156": {
      "op": "dig 1",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetA#0",
        "poolKey#0",
        "\"pb_\"",
        "poolKey#0 (copy)"
      ]
    },
    "1158": {
      "op": "concat",
      "defined_out": [
        "poolAssetA#0",
        "poolKey#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetA#0",
        "poolKey#0",
        "tmp%4#0"
      ]
    },
    "1159": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "poolAssetA#0",
        "poolKey#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetA#0",
        "poolKey#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1160": {
      "op": "swap",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetA#0",
        "poolKey#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "1161": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%2#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetA#0",
        "poolKey#0",
        "maybe_exists%2#0",
        "poolAssetB#0"
      ]
    },
    "1162": {
      "op": "cover 3",
      "defined_out": [
        "maybe_exists%2#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolAssetA#0",
        "poolKey#0",
        "maybe_exists%2#0"
      ]
    },
    "1164": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolAssetA#0",
        "poolKey#0"
      ]
    },
    "1165": {
      "op": "bytec 4 // \"ra_\"",
      "defined_out": [
        "\"ra_\"",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolAssetA#0",
        "poolKey#0",
        "\"ra_\""
      ]
    },
    "1167": {
      "op": "dig 1",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolAssetA#0",
        "poolKey#0",
        "\"ra_\"",
        "poolKey#0 (copy)"
      ]
    },
    "1169": {
      "op": "concat",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolAssetA#0",
        "poolKey#0",
        "tmp%5#0"
      ]
    },
    "1170": {
      "op": "dup",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolAssetA#0",
        "poolKey#0",
        "tmp%5#0",
        "tmp%5#0"
      ]
    },
    "1171": {
      "op": "cover 3",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "poolAssetA#0",
        "poolKey#0",
        "tmp%5#0"
      ]
    },
    "1173": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "poolAssetA#0",
        "poolKey#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1174": {
      "op": "swap",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "poolAssetA#0",
        "poolKey#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "1175": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%3#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "poolAssetA#0",
        "poolKey#0",
        "maybe_exists%3#0",
        "reserveA#0"
      ]
    },
    "1176": {
      "op": "cover 3",
      "defined_out": [
        "maybe_exists%3#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "poolAssetA#0",
        "poolKey#0",
        "maybe_exists%3#0"
      ]
    },
    "1178": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "poolAssetA#0",
        "poolKey#0"
      ]
    },
    "1179": {
      "op": "bytec 5 // \"rb_\"",
      "defined_out": [
        "\"rb_\"",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "poolAssetA#0",
        "poolKey#0",
        "\"rb_\""
      ]
    },
    "1181": {
      "op": "dig 1",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "poolAssetA#0",
        "poolKey#0",
        "\"rb_\"",
        "poolKey#0 (copy)"
      ]
    },
    "1183": {
      "op": "concat",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "poolAssetA#0",
        "poolKey#0",
        "tmp%6#0"
      ]
    },
    "1184": {
      "op": "dup",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "poolAssetA#0",
        "poolKey#0",
        "tmp%6#0",
        "tmp%6#0"
      ]
    },
    "1185": {
      "op": "cover 3",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "poolAssetA#0",
        "poolKey#0",
        "tmp%6#0"
      ]
    },
    "1187": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "poolAssetA#0",
        "poolKey#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1188": {
      "op": "swap",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "poolAssetA#0",
        "poolKey#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ]
    },
    "1189": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%4#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "poolAssetA#0",
        "poolKey#0",
        "maybe_exists%4#0",
        "reserveB#0"
      ]
    },
    "1190": {
      "op": "cover 3",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "poolAssetA#0",
        "poolKey#0",
        "maybe_exists%4#0"
      ]
    },
    "1192": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "poolAssetA#0",
        "poolKey#0"
      ]
    },
    "1193": {
      "op": "bytec 6 // \"lp_\"",
      "defined_out": [
        "\"lp_\"",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "poolAssetA#0",
        "poolKey#0",
        "\"lp_\""
      ]
    },
    "1195": {
      "op": "swap",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "poolAssetA#0",
        "\"lp_\"",
        "poolKey#0"
      ]
    },
    "1196": {
      "op": "concat",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "poolAssetA#0",
        "tmp%7#0"
      ]
    },
    "1197": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "poolAssetA#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1198": {
      "op": "bury 1",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "poolAssetA#0",
        "maybe_exists%5#0"
      ]
    },
    "1200": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "poolAssetA#0"
      ]
    },
    "1201": {
      "op": "frame_dig -2",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "sendAssetId#0 (copy)",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "poolAssetA#0",
        "sendAssetId#0 (copy)"
      ]
    },
    "1203": {
      "op": "==",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "tmp%8#0"
      ]
    },
    "1204": {
      "op": "bz swap_else_body@2",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0"
      ]
    },
    "1207": {
      "op": "frame_dig 5",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "reserveA#0"
      ]
    },
    "1209": {
      "op": "dup",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveA#0 (copy)",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "reserveA#0",
        "reserveA#0 (copy)"
      ]
    },
    "1210": {
      "op": "dig 2",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveA#0 (copy)",
        "reserveB#0",
        "reserveB#0 (copy)",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "reserveA#0",
        "reserveA#0 (copy)",
        "reserveB#0 (copy)"
      ]
    },
    "1212": {
      "op": "*",
      "defined_out": [
        "k#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "reserveA#0",
        "k#0"
      ]
    },
    "1213": {
      "op": "swap",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "k#0",
        "reserveA#0"
      ]
    },
    "1214": {
      "op": "frame_dig -1",
      "defined_out": [
        "k#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "swapAmount#0 (copy)",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "k#0",
        "reserveA#0",
        "swapAmount#0 (copy)"
      ]
    },
    "1216": {
      "op": "+",
      "defined_out": [
        "k#0",
        "newReserveATemp#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "k#0",
        "newReserveATemp#0"
      ]
    },
    "1217": {
      "op": "intc_0 // 0",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "k#0",
        "newReserveATemp#0",
        "0"
      ]
    },
    "1218": {
      "op": "bytec 9 // \"FEE_DEN\"",
      "defined_out": [
        "\"FEE_DEN\"",
        "0",
        "k#0",
        "newReserveATemp#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "k#0",
        "newReserveATemp#0",
        "0",
        "\"FEE_DEN\""
      ]
    },
    "1220": {
      "op": "app_global_get_ex",
      "defined_out": [
        "k#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "newReserveATemp#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "k#0",
        "newReserveATemp#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1221": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "k#0",
        "newReserveATemp#0",
        "maybe_value%6#0"
      ]
    },
    "1222": {
      "op": "uncover 2",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "newReserveATemp#0",
        "maybe_value%6#0",
        "k#0"
      ]
    },
    "1224": {
      "op": "*",
      "defined_out": [
        "newReserveATemp#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "newReserveATemp#0",
        "tmp%9#0"
      ]
    },
    "1225": {
      "op": "intc_0 // 0",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "newReserveATemp#0",
        "tmp%9#0",
        "0"
      ]
    },
    "1226": {
      "op": "bytec 8 // \"FEE_NUM\"",
      "defined_out": [
        "\"FEE_NUM\"",
        "0",
        "newReserveATemp#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "newReserveATemp#0",
        "tmp%9#0",
        "0",
        "\"FEE_NUM\""
      ]
    },
    "1228": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "newReserveATemp#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "newReserveATemp#0",
        "tmp%9#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1229": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "newReserveATemp#0",
        "tmp%9#0",
        "maybe_value%7#0"
      ]
    },
    "1230": {
      "op": "dig 2",
      "defined_out": [
        "maybe_value%7#0",
        "newReserveATemp#0",
        "newReserveATemp#0 (copy)",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "newReserveATemp#0",
        "tmp%9#0",
        "maybe_value%7#0",
        "newReserveATemp#0 (copy)"
      ]
    },
    "1232": {
      "op": "*",
      "defined_out": [
        "newReserveATemp#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%10#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "newReserveATemp#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "1233": {
      "op": "/",
      "defined_out": [
        "newReserveATemp#0",
        "newReserveBTemp#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "newReserveATemp#0",
        "newReserveBTemp#0"
      ]
    },
    "1234": {
      "op": "dig 2",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "newReserveATemp#0",
        "newReserveBTemp#0",
        "reserveB#0 (copy)"
      ]
    },
    "1236": {
      "op": "swap",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "newReserveATemp#0",
        "reserveB#0 (copy)",
        "newReserveBTemp#0"
      ]
    },
    "1237": {
      "op": "-",
      "defined_out": [
        "newReserveATemp#0",
        "outputAmount#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "newReserveATemp#0",
        "outputAmount#0"
      ]
    },
    "1238": {
      "op": "dup",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "newReserveATemp#0",
        "outputAmount#0",
        "outputAmount#0"
      ]
    },
    "1239": {
      "op": "cover 3",
      "defined_out": [
        "newReserveATemp#0",
        "outputAmount#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAmount#0",
        "reserveB#0",
        "newReserveATemp#0",
        "outputAmount#0"
      ]
    },
    "1241": {
      "op": "uncover 2",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAmount#0",
        "newReserveATemp#0",
        "outputAmount#0",
        "reserveB#0"
      ]
    },
    "1243": {
      "op": "swap",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAmount#0",
        "newReserveATemp#0",
        "reserveB#0",
        "outputAmount#0"
      ]
    },
    "1244": {
      "op": "-",
      "defined_out": [
        "newReserveATemp#0",
        "newReserveB#0",
        "outputAmount#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAmount#0",
        "newReserveATemp#0",
        "newReserveB#0"
      ]
    },
    "1245": {
      "op": "frame_bury 1",
      "defined_out": [
        "newReserveATemp#0",
        "newReserveB#0",
        "outputAmount#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAmount#0",
        "newReserveATemp#0"
      ]
    },
    "1247": {
      "op": "frame_dig 3",
      "defined_out": [
        "newReserveATemp#0",
        "newReserveB#0",
        "outputAmount#0",
        "outputAsset#2",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAmount#0",
        "newReserveATemp#0",
        "outputAsset#2"
      ]
    },
    "1249": {
      "op": "cover 2",
      "defined_out": [
        "newReserveA#1",
        "newReserveB#0",
        "outputAmount#0",
        "outputAsset#2",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAsset#2",
        "outputAmount#0",
        "newReserveA#1"
      ]
    },
    "1251": {
      "op": "frame_bury 0",
      "defined_out": [
        "newReserveA#1",
        "newReserveB#0",
        "outputAmount#0",
        "outputAsset#2",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAsset#2",
        "outputAmount#0"
      ]
    },
    "1253": {
      "block": "swap_after_if_else@3",
      "stack_in": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAsset#2",
        "outputAmount#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "newReserveA#1"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAsset#2",
        "outputAmount#0",
        "newReserveA#1"
      ]
    },
    "1255": {
      "op": "itob",
      "defined_out": [
        "newReserveA#1",
        "new_box_value%0#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAsset#2",
        "outputAmount#0",
        "new_box_value%0#0"
      ]
    },
    "1256": {
      "op": "frame_dig 4",
      "defined_out": [
        "newReserveA#1",
        "new_box_value%0#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAsset#2",
        "outputAmount#0",
        "new_box_value%0#0",
        "tmp%5#0"
      ]
    },
    "1258": {
      "op": "swap",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAsset#2",
        "outputAmount#0",
        "tmp%5#0",
        "new_box_value%0#0"
      ]
    },
    "1259": {
      "op": "box_put",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAsset#2",
        "outputAmount#0"
      ]
    },
    "1260": {
      "op": "frame_dig 1",
      "defined_out": [
        "newReserveA#1",
        "newReserveB#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAsset#2",
        "outputAmount#0",
        "newReserveB#0"
      ]
    },
    "1262": {
      "op": "itob",
      "defined_out": [
        "newReserveA#1",
        "newReserveB#0",
        "new_box_value%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAsset#2",
        "outputAmount#0",
        "new_box_value%1#0"
      ]
    },
    "1263": {
      "op": "frame_dig 6",
      "defined_out": [
        "newReserveA#1",
        "newReserveB#0",
        "new_box_value%1#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAsset#2",
        "outputAmount#0",
        "new_box_value%1#0",
        "tmp%6#0"
      ]
    },
    "1265": {
      "op": "swap",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAsset#2",
        "outputAmount#0",
        "tmp%6#0",
        "new_box_value%1#0"
      ]
    },
    "1266": {
      "op": "box_put",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAsset#2",
        "outputAmount#0"
      ]
    },
    "1267": {
      "op": "itxn_begin"
    },
    "1268": {
      "op": "txn Sender",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "newReserveA#1",
        "newReserveB#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAsset#2",
        "outputAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1270": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "newReserveA#1",
        "newReserveB#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAsset#2",
        "outputAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "1272": {
      "op": "itxn_field Sender",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAsset#2",
        "outputAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1274": {
      "op": "uncover 2",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "newReserveA#1",
        "newReserveB#0",
        "outputAsset#2",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "outputAsset#2"
      ]
    },
    "1276": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1278": {
      "op": "itxn_field AssetReceiver",
      "defined_out": [
        "newReserveA#1",
        "newReserveB#0",
        "outputAmount#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAmount#0"
      ]
    },
    "1280": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0"
      ]
    },
    "1282": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "newReserveA#1",
        "newReserveB#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "4"
      ]
    },
    "1283": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0"
      ]
    },
    "1285": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "newReserveA#1",
        "newReserveB#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "1"
      ]
    },
    "1286": {
      "op": "itxn_field Fee",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0"
      ]
    },
    "1288": {
      "op": "itxn_submit"
    },
    "1289": {
      "op": "intc_1 // 1",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "1"
      ]
    },
    "1290": {
      "op": "frame_bury 0"
    },
    "1292": {
      "retsub": true,
      "op": "retsub"
    },
    "1293": {
      "block": "swap_else_body@2",
      "stack_in": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0"
      ],
      "op": "frame_dig 5",
      "defined_out": [
        "reserveA#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "reserveA#0"
      ]
    },
    "1295": {
      "op": "dup",
      "defined_out": [
        "reserveA#0",
        "reserveA#0 (copy)"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveB#0",
        "reserveA#0",
        "reserveA#0 (copy)"
      ]
    },
    "1296": {
      "op": "uncover 2",
      "defined_out": [
        "reserveA#0",
        "reserveA#0 (copy)",
        "reserveB#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "reserveA#0 (copy)",
        "reserveB#0"
      ]
    },
    "1298": {
      "op": "dup",
      "defined_out": [
        "reserveA#0",
        "reserveA#0 (copy)",
        "reserveB#0 (copy)"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "reserveA#0 (copy)",
        "reserveB#0 (copy)",
        "reserveB#0 (copy)"
      ]
    },
    "1299": {
      "op": "cover 2",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "reserveB#0",
        "reserveA#0 (copy)",
        "reserveB#0 (copy)"
      ]
    },
    "1301": {
      "op": "*",
      "defined_out": [
        "k\u2081#0",
        "reserveA#0",
        "reserveB#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "reserveB#0",
        "k\u2081#0"
      ]
    },
    "1302": {
      "op": "swap",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "k\u2081#0",
        "reserveB#0"
      ]
    },
    "1303": {
      "op": "frame_dig -1",
      "defined_out": [
        "k\u2081#0",
        "reserveA#0",
        "reserveB#0",
        "swapAmount#0 (copy)"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "k\u2081#0",
        "reserveB#0",
        "swapAmount#0 (copy)"
      ]
    },
    "1305": {
      "op": "+",
      "defined_out": [
        "k\u2081#0",
        "newReserveBTemp\u2081#0",
        "reserveA#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "k\u2081#0",
        "newReserveBTemp\u2081#0"
      ]
    },
    "1306": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "k\u2081#0",
        "newReserveBTemp\u2081#0",
        "reserveA#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "k\u2081#0",
        "newReserveBTemp\u2081#0",
        "0"
      ]
    },
    "1307": {
      "op": "bytec 9 // \"FEE_DEN\"",
      "defined_out": [
        "\"FEE_DEN\"",
        "0",
        "k\u2081#0",
        "newReserveBTemp\u2081#0",
        "reserveA#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "k\u2081#0",
        "newReserveBTemp\u2081#0",
        "0",
        "\"FEE_DEN\""
      ]
    },
    "1309": {
      "op": "app_global_get_ex",
      "defined_out": [
        "k\u2081#0",
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "newReserveBTemp\u2081#0",
        "reserveA#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "k\u2081#0",
        "newReserveBTemp\u2081#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "1310": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "k\u2081#0",
        "newReserveBTemp\u2081#0",
        "maybe_value%8#0"
      ]
    },
    "1311": {
      "op": "uncover 2",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "newReserveBTemp\u2081#0",
        "maybe_value%8#0",
        "k\u2081#0"
      ]
    },
    "1313": {
      "op": "*",
      "defined_out": [
        "newReserveBTemp\u2081#0",
        "reserveA#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "newReserveBTemp\u2081#0",
        "tmp%11#0"
      ]
    },
    "1314": {
      "op": "intc_0 // 0",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "newReserveBTemp\u2081#0",
        "tmp%11#0",
        "0"
      ]
    },
    "1315": {
      "op": "bytec 8 // \"FEE_NUM\"",
      "defined_out": [
        "\"FEE_NUM\"",
        "0",
        "newReserveBTemp\u2081#0",
        "reserveA#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "newReserveBTemp\u2081#0",
        "tmp%11#0",
        "0",
        "\"FEE_NUM\""
      ]
    },
    "1317": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%9#0",
        "maybe_value%9#0",
        "newReserveBTemp\u2081#0",
        "reserveA#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "newReserveBTemp\u2081#0",
        "tmp%11#0",
        "maybe_value%9#0",
        "maybe_exists%9#0"
      ]
    },
    "1318": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "newReserveBTemp\u2081#0",
        "tmp%11#0",
        "maybe_value%9#0"
      ]
    },
    "1319": {
      "op": "dig 2",
      "defined_out": [
        "maybe_value%9#0",
        "newReserveBTemp\u2081#0",
        "newReserveBTemp\u2081#0 (copy)",
        "reserveA#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "newReserveBTemp\u2081#0",
        "tmp%11#0",
        "maybe_value%9#0",
        "newReserveBTemp\u2081#0 (copy)"
      ]
    },
    "1321": {
      "op": "*",
      "defined_out": [
        "newReserveBTemp\u2081#0",
        "reserveA#0",
        "tmp%11#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "newReserveBTemp\u2081#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "1322": {
      "op": "/",
      "defined_out": [
        "newReserveATemp\u2081#0",
        "newReserveBTemp\u2081#0",
        "reserveA#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "newReserveBTemp\u2081#0",
        "newReserveATemp\u2081#0"
      ]
    },
    "1323": {
      "op": "dig 2",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "newReserveBTemp\u2081#0",
        "newReserveATemp\u2081#0",
        "reserveA#0 (copy)"
      ]
    },
    "1325": {
      "op": "swap",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "newReserveBTemp\u2081#0",
        "reserveA#0 (copy)",
        "newReserveATemp\u2081#0"
      ]
    },
    "1326": {
      "op": "-",
      "defined_out": [
        "newReserveBTemp\u2081#0",
        "outputAmount#0",
        "reserveA#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "newReserveBTemp\u2081#0",
        "outputAmount#0"
      ]
    },
    "1327": {
      "op": "dup",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "reserveA#0",
        "newReserveBTemp\u2081#0",
        "outputAmount#0",
        "outputAmount#0"
      ]
    },
    "1328": {
      "op": "cover 3",
      "defined_out": [
        "newReserveBTemp\u2081#0",
        "outputAmount#0",
        "reserveA#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAmount#0",
        "reserveA#0",
        "newReserveBTemp\u2081#0",
        "outputAmount#0"
      ]
    },
    "1330": {
      "op": "uncover 2",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAmount#0",
        "newReserveBTemp\u2081#0",
        "outputAmount#0",
        "reserveA#0"
      ]
    },
    "1332": {
      "op": "swap",
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAmount#0",
        "newReserveBTemp\u2081#0",
        "reserveA#0",
        "outputAmount#0"
      ]
    },
    "1333": {
      "op": "-",
      "defined_out": [
        "newReserveA#1",
        "newReserveBTemp\u2081#0",
        "outputAmount#0",
        "reserveA#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAmount#0",
        "newReserveBTemp\u2081#0",
        "newReserveA#1"
      ]
    },
    "1334": {
      "op": "frame_bury 0",
      "defined_out": [
        "newReserveA#1",
        "newReserveBTemp\u2081#0",
        "outputAmount#0",
        "reserveA#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAmount#0",
        "newReserveBTemp\u2081#0"
      ]
    },
    "1336": {
      "op": "frame_dig 2",
      "defined_out": [
        "newReserveA#1",
        "newReserveBTemp\u2081#0",
        "outputAmount#0",
        "outputAsset#2",
        "reserveA#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAmount#0",
        "newReserveBTemp\u2081#0",
        "outputAsset#2"
      ]
    },
    "1338": {
      "op": "cover 2",
      "defined_out": [
        "newReserveA#1",
        "newReserveB#0",
        "outputAmount#0",
        "outputAsset#2",
        "reserveA#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAsset#2",
        "outputAmount#0",
        "newReserveB#0"
      ]
    },
    "1340": {
      "op": "frame_bury 1",
      "defined_out": [
        "newReserveA#1",
        "newReserveB#0",
        "outputAmount#0",
        "outputAsset#2",
        "reserveA#0"
      ],
      "stack_out": [
        "newReserveA#1",
        "newReserveB#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%5#0",
        "reserveA#0",
        "tmp%6#0",
        "outputAsset#2",
        "outputAmount#0"
      ]
    },
    "1342": {
      "op": "b swap_after_if_else@3"
    },
    "1345": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.getLpBalance",
      "params": {
        "assetIdA#0": "uint64",
        "assetIdB#0": "uint64",
        "account#0": "bytes"
      },
      "block": "getLpBalance",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "1348": {
      "op": "frame_dig -3",
      "defined_out": [
        "assetIdA#0 (copy)"
      ],
      "stack_out": [
        "assetIdA#0 (copy)"
      ]
    },
    "1350": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)"
      ],
      "stack_out": [
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)"
      ]
    },
    "1352": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.getPoolKey",
      "op": "callsub getPoolKey",
      "defined_out": [
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0"
      ]
    },
    "1355": {
      "op": "frame_dig -1",
      "defined_out": [
        "account#0 (copy)",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "account#0 (copy)"
      ]
    },
    "1357": {
      "op": "concat",
      "defined_out": [
        "lpKey#0"
      ],
      "stack_out": [
        "lpKey#0"
      ]
    },
    "1358": {
      "op": "bytec 7 // \"bal_\"",
      "defined_out": [
        "\"bal_\"",
        "lpKey#0"
      ],
      "stack_out": [
        "lpKey#0",
        "\"bal_\""
      ]
    },
    "1360": {
      "op": "swap",
      "stack_out": [
        "\"bal_\"",
        "lpKey#0"
      ]
    },
    "1361": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1362": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1363": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1364": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1366": {
      "op": "bnz getLpBalance_after_if_else@2",
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1369": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "1370": {
      "op": "swap"
    },
    "1371": {
      "retsub": true,
      "op": "retsub"
    },
    "1372": {
      "block": "getLpBalance_after_if_else@2",
      "stack_in": [
        "tmp%0#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%0#0"
      ]
    },
    "1374": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1375": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "1376": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value_converted%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_exists%1#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1377": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "maybe_value_converted%0#0",
        "maybe_exists%1#0"
      ]
    },
    "1378": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "maybe_value_converted%0#0"
      ]
    },
    "1379": {
      "op": "swap"
    },
    "1380": {
      "retsub": true,
      "op": "retsub"
    },
    "1381": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.getPoolInfo",
      "params": {
        "assetIdA#0": "uint64",
        "assetIdB#0": "uint64"
      },
      "block": "getPoolInfo",
      "stack_in": [],
      "op": "proto 2 5"
    },
    "1384": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetIdA#0 (copy)"
      ],
      "stack_out": [
        "assetIdA#0 (copy)"
      ]
    },
    "1386": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)"
      ],
      "stack_out": [
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)"
      ]
    },
    "1388": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.getPoolKey",
      "op": "callsub getPoolKey",
      "defined_out": [
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0"
      ]
    },
    "1391": {
      "op": "bytec_1 // \"pa_\"",
      "defined_out": [
        "\"pa_\"",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "\"pa_\""
      ]
    },
    "1392": {
      "op": "dig 1",
      "defined_out": [
        "\"pa_\"",
        "poolKey#0",
        "poolKey#0 (copy)"
      ],
      "stack_out": [
        "poolKey#0",
        "\"pa_\"",
        "poolKey#0 (copy)"
      ]
    },
    "1394": {
      "op": "concat",
      "defined_out": [
        "poolKey#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "poolKey#0",
        "tmp%0#0"
      ]
    },
    "1395": {
      "op": "dup",
      "defined_out": [
        "poolKey#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ],
      "stack_out": [
        "poolKey#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "1396": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "poolKey#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "poolKey#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1397": {
      "op": "bury 1",
      "stack_out": [
        "poolKey#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1399": {
      "error": "Pool does not exist",
      "op": "assert // Pool does not exist",
      "stack_out": [
        "poolKey#0",
        "tmp%0#0"
      ]
    },
    "1400": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1401": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ]
    },
    "1402": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%1#0",
        "poolAssetA#0",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "maybe_exists%1#0",
        "poolAssetA#0"
      ]
    },
    "1403": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "maybe_exists%1#0"
      ]
    },
    "1404": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0"
      ]
    },
    "1405": {
      "op": "bytec_3 // \"pb_\"",
      "defined_out": [
        "\"pb_\"",
        "poolAssetA#0",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "\"pb_\""
      ]
    },
    "1406": {
      "op": "dig 2",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "\"pb_\"",
        "poolKey#0 (copy)"
      ]
    },
    "1408": {
      "op": "concat",
      "defined_out": [
        "poolAssetA#0",
        "poolKey#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "tmp%2#0"
      ]
    },
    "1409": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "poolAssetA#0",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1410": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ]
    },
    "1411": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%2#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "maybe_exists%2#0",
        "poolAssetB#0"
      ]
    },
    "1412": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "maybe_exists%2#0"
      ]
    },
    "1413": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0"
      ]
    },
    "1414": {
      "op": "bytec 4 // \"ra_\"",
      "defined_out": [
        "\"ra_\"",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "\"ra_\""
      ]
    },
    "1416": {
      "op": "dig 3",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "\"ra_\"",
        "poolKey#0 (copy)"
      ]
    },
    "1418": {
      "op": "concat",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "tmp%3#0"
      ]
    },
    "1419": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1420": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ]
    },
    "1421": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%3#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "maybe_exists%3#0",
        "reserveA#0"
      ]
    },
    "1422": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "maybe_exists%3#0"
      ]
    },
    "1423": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0"
      ]
    },
    "1424": {
      "op": "bytec 5 // \"rb_\"",
      "defined_out": [
        "\"rb_\"",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "\"rb_\""
      ]
    },
    "1426": {
      "op": "dig 4",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "\"rb_\"",
        "poolKey#0 (copy)"
      ]
    },
    "1428": {
      "op": "concat",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "tmp%4#0"
      ]
    },
    "1429": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1430": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ]
    },
    "1431": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%4#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "maybe_exists%4#0",
        "reserveB#0"
      ]
    },
    "1432": {
      "op": "swap",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "maybe_exists%4#0"
      ]
    },
    "1433": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0"
      ]
    },
    "1434": {
      "op": "bytec 6 // \"lp_\"",
      "defined_out": [
        "\"lp_\"",
        "poolAssetA#0",
        "poolAssetB#0",
        "poolKey#0",
        "reserveA#0",
        "reserveB#0"
      ],
      "stack_out": [
        "poolKey#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "\"lp_\""
      ]
    },
    "1436": {
      "op": "uncover 5",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "\"lp_\"",
        "poolKey#0"
      ]
    },
    "1438": {
      "op": "concat",
      "defined_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "tmp%5#0"
      ]
    },
    "1439": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1440": {
      "op": "swap",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "maybe_exists%5#0",
        "maybe_value%5#0"
      ]
    },
    "1441": {
      "op": "btoi",
      "defined_out": [
        "maybe_exists%5#0",
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "totalLp#0"
      ],
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "maybe_exists%5#0",
        "totalLp#0"
      ]
    },
    "1442": {
      "op": "swap",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "totalLp#0",
        "maybe_exists%5#0"
      ]
    },
    "1443": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "poolAssetA#0",
        "poolAssetB#0",
        "reserveA#0",
        "reserveB#0",
        "totalLp#0"
      ]
    },
    "1444": {
      "retsub": true,
      "op": "retsub"
    },
    "1445": {
      "subroutine": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.poolExists",
      "params": {
        "assetIdA#0": "uint64",
        "assetIdB#0": "uint64"
      },
      "block": "poolExists",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "1448": {
      "op": "frame_dig -2",
      "defined_out": [
        "assetIdA#0 (copy)"
      ],
      "stack_out": [
        "assetIdA#0 (copy)"
      ]
    },
    "1450": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)"
      ],
      "stack_out": [
        "assetIdA#0 (copy)",
        "assetIdB#0 (copy)"
      ]
    },
    "1452": {
      "callsub": "smart_contracts/swap_contract/AMMContract.algo.ts::MultiPoolAMMContract.getPoolKey",
      "op": "callsub getPoolKey",
      "defined_out": [
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0"
      ]
    },
    "1455": {
      "op": "bytec_1 // \"pa_\"",
      "defined_out": [
        "\"pa_\"",
        "poolKey#0"
      ],
      "stack_out": [
        "poolKey#0",
        "\"pa_\""
      ]
    },
    "1456": {
      "op": "swap",
      "stack_out": [
        "\"pa_\"",
        "poolKey#0"
      ]
    },
    "1457": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1458": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1459": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "1461": {
      "retsub": true,
      "op": "retsub"
    }
  }
}