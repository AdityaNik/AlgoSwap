{
    "name": "AMMContract",
    "structs": {},
    "methods": [
        {
            "name": "createPool",
            "args": [
                {
                    "type": "asset",
                    "name": "assetIdA"
                },
                {
                    "type": "asset",
                    "name": "assetIdB"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addLiquidity",
            "args": [
                {
                    "type": "uint64",
                    "name": "assetAAmount"
                },
                {
                    "type": "uint64",
                    "name": "assetBAmount"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "removeLiquidity",
            "args": [
                {
                    "type": "uint64",
                    "name": "lpToBurn"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "swap",
            "args": [
                {
                    "type": "uint64",
                    "name": "sendAssetType"
                },
                {
                    "type": "uint64",
                    "name": "swapAmount"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "optIn",
            "args": [
                {
                    "type": "asset",
                    "name": "assetIdA"
                },
                {
                    "type": "asset",
                    "name": "assetIdB"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getLpBalance",
            "args": [
                {
                    "type": "account",
                    "name": "account"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getPoolInfo",
            "args": [],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateReserveB",
            "args": [
                {
                    "type": "uint64",
                    "name": "assetBAmount"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 7,
                "bytes": 0
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "assetA": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRB"
                },
                "assetB": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRC"
                },
                "reserveA": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cmVzZXJ2ZUE="
                },
                "reserveB": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cmVzZXJ2ZUI="
                },
                "totalLp": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxMcA=="
                },
                "FEE_NUM": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "RkVFX05VTQ=="
                },
                "FEE_DEN": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "RkVFX0RFTg=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "lpBalances": {
                    "keyType": "address",
                    "valueType": "uint64",
                    "prefix": "bHBf"
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        712,
                        756,
                        825,
                        1071
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        853
                    ],
                    "errorMessage": "Expected group size of 2 (app call + asset transfer)"
                },
                {
                    "pc": [
                        577
                    ],
                    "errorMessage": "Expected group size of 3 (app call + 2 asset transfers)"
                },
                {
                    "pc": [
                        763
                    ],
                    "errorMessage": "Insufficient LP balance"
                },
                {
                    "pc": [
                        759
                    ],
                    "errorMessage": "Must burn positive amount"
                },
                {
                    "pc": [
                        747
                    ],
                    "errorMessage": "No LP balance found"
                },
                {
                    "pc": [
                        178,
                        205,
                        250,
                        274,
                        309,
                        340,
                        367,
                        398
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        597,
                        1093
                    ],
                    "errorMessage": "Pool not initialized"
                },
                {
                    "pc": [
                        438
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        181,
                        208,
                        253,
                        277,
                        312,
                        343,
                        370,
                        401
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        601,
                        628,
                        635,
                        640,
                        647,
                        659,
                        669,
                        679,
                        767,
                        774,
                        779,
                        786,
                        791,
                        801,
                        810,
                        864,
                        871,
                        875,
                        879,
                        885,
                        891,
                        907,
                        939,
                        946,
                        950,
                        954,
                        960,
                        966,
                        982,
                        1098,
                        1103,
                        1107,
                        1111,
                        1115
                    ],
                    "errorMessage": "check GlobalState exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAHoBwQmCwhyZXNlcnZlQghyZXNlcnZlQQNscF8HdG90YWxMcAQVH3x1AQAGYXNzZXRBBmFzc2V0QgdGRUVfTlVNB0ZFRV9ERU4DBoEBMRhAABMpImcoImcrImcnCIHlB2cnCSRnMRtBAUCCCAQh1tC2BNcK2rsE5JcZYwT+5ErgBD2DDNsEgkG/PwTCBRF7BJB0rHE2GgCOCADeAL8ApACFAGIASgAdAAIiQzEZFEQxGEQ2GgEXiAOkJwUiTwJUJwRMULAjQzEZFEQxGESIA15PBBZPBBZPBBZPBBZPBBZPBE8EUE8DUE8CUExQJwRMULAjQzEZFEQxGEQ2GgEXwByIAxEWJwRMULAjQzEZFEQxGEQ2GgEXwDA2GgIXwDCIAs4nBSJPAlQnBExQsCNDMRkURDEYRDYaARc2GgIXiAICJwUiTwJUJwRMULAjQzEZFEQxGEQ2GgEXiAF7JwUiTwJUJwRMULAjQzEZFEQxGEQ2GgEXNhoCF4gAtCcFIk8CVCcETFCwI0MxGRREMRhENhoBF8AwNhoCF8AwiABTJwUiTwJUJwRMULAjQzEZQP76MRgURCNDigIAi/6BCgiLADIMDUEAKrGBBrIQgQWyGScKsh4nCrIfi/+NAgALAASzQv/bMgCyAUL/9SKyAUL/74mKAgGBuBciiP+7KjEAUL1FAUAAByoxAFAiFr8nBov+ZycHi/9nI4mKAQCxMgqL/7IRshQishIlshAisgGziYoCAYHAPiKI/30yBIEDEkQiJwZlRQFBAIsiJwdlRQFBAIIjRCIrZURAABQpi/5nKIv/ZyskZyoxAFAkFr8jiSIrZUSL/gsiKWVECiIrZUSL/wsiKGVECkoMTE4CTUkiKWVEi/4IKUxnIihlRIv/CChMZyIrZUQIK0xnKjEAUL1FAUAACioxAFBMFr9C/68qMQBQvkwXTEQqMQBQTE8CCBa/Qv+ZIkL/e4oBAYHAPiKI/tUqMQBQvUUBRCoxAFC+TBdMRIv/RIv/D0QiKWVEi/8LIitlRAoiKGVEi/8LIitlRAoiKWVETwIJKUxnIihlREwJKExnIitlRIv/CStMZyoxAFC+TBdMRCoxAFBMi/8JFr8jiYoCAYHYNiKI/mkyBIECEkSL/iMSQQBLIillRIv/CCIoZUQiKWVEIihlRAsiJwllRAsiJwhlREsDCwpLAUwJsTEAIicHZUQyCrIAshGyFEmyEiWyECOyAbMpTwNnCShMZyOJIihlRIv/CCIpZUQiKWVEIihlRAsiJwllRAsiJwhlREsDCwpLAUwJsTEAIicGZUQyCrIAshGyFEmyEiWyECOyAbMJKUxnKExnQv+zigIBJCKI/b4qMQBQvUUBQAAHKjEAUCIWv4v+iP4Ki/+I/gUjiYoBASqL/1BJvUUBQAADIkyJiwC+TBdMREyJIicGZUUBQQAiIicHZUUBQQAZI0QiJwZlRCInB2VEIillRCIoZUQiK2VEiSJC/+SKAQEoi/9nI4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}