/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"MultiPoolAMMContract","structs":{},"methods":[{"name":"createPool","args":[{"type":"asset","name":"assetIdA"},{"type":"asset","name":"assetIdB"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"addLiquidity","args":[{"type":"asset","name":"assetIdA"},{"type":"asset","name":"assetIdB"},{"type":"uint64","name":"assetAAmount"},{"type":"uint64","name":"assetBAmount"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"removeLiquidity","args":[{"type":"asset","name":"assetIdA"},{"type":"asset","name":"assetIdB"},{"type":"uint64","name":"lpToBurn"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"swap","args":[{"type":"asset","name":"assetIdA"},{"type":"asset","name":"assetIdB"},{"type":"asset","name":"sendAssetId"},{"type":"uint64","name":"swapAmount"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getLpBalance","args":[{"type":"asset","name":"assetIdA"},{"type":"asset","name":"assetIdB"},{"type":"account","name":"account"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"getPoolInfo","args":[{"type":"asset","name":"assetIdA"},{"type":"asset","name":"assetIdB"}],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"poolExists","args":[{"type":"asset","name":"assetIdA"},{"type":"asset","name":"assetIdB"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"FEE_NUM":{"keyType":"AVMString","valueType":"AVMUint64","key":"RkVFX05VTQ=="},"FEE_DEN":{"keyType":"AVMString","valueType":"AVMUint64","key":"RkVFX0RFTg=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"poolAssetA":{"keyType":"AVMBytes","valueType":"uint64","prefix":"cGFf"},"poolAssetB":{"keyType":"AVMBytes","valueType":"uint64","prefix":"cGJf"},"poolReserveA":{"keyType":"AVMBytes","valueType":"uint64","prefix":"cmFf"},"poolReserveB":{"keyType":"AVMBytes","valueType":"uint64","prefix":"cmJf"},"poolTotalLp":{"keyType":"AVMBytes","valueType":"uint64","prefix":"bHBf"},"lpBalances":{"keyType":"AVMBytes","valueType":"uint64","prefix":"YmFsXw=="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[692,700,714,728,745,893,932,941,952,963,974,995,1055,1154,1164,1178,1192,1200,1378,1404,1413,1423,1433,1443],"errorMessage":"Box must have value"},{"pc":[531],"errorMessage":"Cannot create pool with same asset"},{"pc":[1129],"errorMessage":"Expected group size of 2 (app call + asset transfer)"},{"pc":[671],"errorMessage":"Expected group size of 3 (app call + 2 asset transfers)"},{"pc":[1002],"errorMessage":"Insufficient LP balance"},{"pc":[998],"errorMessage":"Must burn positive amount"},{"pc":[989],"errorMessage":"No LP balance found"},{"pc":[143,176,232,267,310,347,388],"errorMessage":"OnCompletion is not NoOp"},{"pc":[548],"errorMessage":"Pool already exists"},{"pc":[687,927,1145,1399],"errorMessage":"Pool does not exist"},{"pc":[426],"errorMessage":"can only call when creating"},{"pc":[146,179,235,270,313,350,391],"errorMessage":"can only call when not creating"},{"pc":[1221,1229,1310,1318],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAEE6AcmCwQVH3x1A3BhXwEAA3BiXwNyYV8DcmJfA2xwXwRiYWxfB0ZFRV9OVU0HRkVFX0RFTgMGgQExGEAACicIgeUHZycJJWcxG0EBUIIHBCHW0LYEW3anWQQ9lIWBBHXTAPkEL68DBQQ9nUQsBO6rtYE2GgCOBwD3AM4AqQB+AFsAIwACIkMxGRREMRhENhoBF8AwNhoCF8AwiAUDKiJPAlQoTFCwI0MxGRREMRhENhoBF8AwNhoCF8AwiASiTwQWTwQWTwQWTwQWTwQWTwRPBFBPA1BPAlBMUChMULAjQzEZFEQxGEQ2GgEXwDA2GgIXwDA2GgMXwByIBEAWKExQsCNDMRkURDEYRDYaARfAMDYaAhfAMDYaAxfAMDYaBBeIAy8qIk8CVChMULAjQzEZFEQxGEQ2GgEXwDA2GgIXwDA2GgMXiAI5KiJPAlQoTFCwI0MxGRREMRhENhoBF8AwNhoCF8AwNhoDFzYaBBeIARgqIk8CVChMULAjQzEZFEQxGEQ2GgEXwDA2GgIXwDCIAG0qIk8CVChMULAjQzEZQP7jMRgURCNDigIAi/6BCgiLADIMDUEAKrGBBrIQgQWyGScKsh4nCrIfi/+NAgALAASzQv/bMgCyAUL/9SKyAUL/74mKAgGL/ov/DEEACIv+Fov/FlCJi/4Wi/8WTFCJigIBgYgnIoj/n4v+i/8TRIv+i/+I/80pSwFQSb1FARREi/6L/wyL/4v+SwJNi/6L/08DTUsBFk8DTL8rSwNQSwEWvycESwNQIhZMSwG/JwVLBFBLAb8nBksEUEsBvzEATwRMUCcHTFBMv0yIAAWIAAIjiYoBALEyCov/shGyFCKyEiSyECKyAbOJigQBgACBkE4iiP8TMgSBAxJEi/yL/Yj/QSlLAVBJvUUBRL5MF0xEK0sCUL5FAUQnBEsCUElOA75MF04DRCcFSwJQSU4DvkwXTgNEJwZLAlBJTgO+TBdJTgNOBUQxAE8DTFBOA4v8Eov/i/5LAk1OA4v+i/9PAk1OA0AAHkwWiwFMv4sHFosDTL8lFkxLAb8nB4sGUEy/I4wAiUxJiwVJTgILiwJJTgMKiwdJTgVLAguLBElOBApKDExOAk1JTgOMAE8DTwQIFosBTL9MTwMIFosDTL8IFr8nB4sGUEm9RQFAAAeLABa/Qv+sSb5MF0xEiwAIFr9C/56KAwGBkE4iiP4di/2L/oj+USlLAVBJvUUBRL5MF0xEK0sCUL5MF0xEJwRLA1BJvkwXTEQnBUsFUEm+TBdMRCcGSwdQSb5MF0xEMQBPCUxQJwdMUEm9RQFESb5MF0xEi/9Ei/8PREsFi/8LSwIKSwSL/wtLAwpPB0sCCRZPCEy/TwVLAQkWTwZMv08Di/8JFk8ETL9LAr5MF0xEi/8JFk8DTL+xMQAyCrIATwSyEbIUTLISJLIQI7IBs7ExADIKsgBPArIRshSyEiSyECOyAbMjiYoEAYAASYHAPiKI/UkyBIECEkSL/Iv9iP13KUsBUEm9RQFEvkwXSU4DTgNEK0sBUL5MF04DRCcESwFQSU4DvkwXTgNEJwVLAVBJTgO+TBdOA0QnBkxQvkUBRIv+EkEAVosFSUsCC0yL/wgiJwllRE8CCyInCGVESwILCksCTAlJTgNPAkwJjAGLA04CjACLABaLBEy/iwEWiwZMv7ExADIKsgBPArIRshSyEiSyECOyAbMjjACJiwVJTwJJTgILTIv/CCInCWVETwILIicIZURLAgsKSwJMCUlOA08CTAmMAIsCTgKMAUL/pIoDAYv9i/6I/J2L/1AnB0xQSb1FAUAAAyJMiYsAvkwXTERMiYoCBYv+i/+I/HkpSwFQSb1FAUS+TBdMRCtLAlC+TBdMRCcESwNQvkwXTEQnBUsEUL5MF0xEJwZPBVC+TBdMRImKAgGL/ov/iPw5KUxQvUUBiQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


/**
 * The argument types for the MultiPoolAmmContract contract
 */
export type MultiPoolAmmContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createPool(asset,asset)bool': {
      assetIdA: bigint
      assetIdB: bigint
    }
    'addLiquidity(asset,asset,uint64,uint64)bool': {
      assetIdA: bigint
      assetIdB: bigint
      assetAAmount: bigint | number
      assetBAmount: bigint | number
    }
    'removeLiquidity(asset,asset,uint64)bool': {
      assetIdA: bigint
      assetIdB: bigint
      lpToBurn: bigint | number
    }
    'swap(asset,asset,asset,uint64)bool': {
      assetIdA: bigint
      assetIdB: bigint
      sendAssetId: bigint
      swapAmount: bigint | number
    }
    'getLpBalance(asset,asset,account)uint64': {
      assetIdA: bigint
      assetIdB: bigint
      account: Uint8Array | string
    }
    'getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)': {
      assetIdA: bigint
      assetIdB: bigint
    }
    'poolExists(asset,asset)bool': {
      assetIdA: bigint
      assetIdB: bigint
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createPool(asset,asset)bool': [assetIdA: bigint, assetIdB: bigint]
    'addLiquidity(asset,asset,uint64,uint64)bool': [assetIdA: bigint, assetIdB: bigint, assetAAmount: bigint | number, assetBAmount: bigint | number]
    'removeLiquidity(asset,asset,uint64)bool': [assetIdA: bigint, assetIdB: bigint, lpToBurn: bigint | number]
    'swap(asset,asset,asset,uint64)bool': [assetIdA: bigint, assetIdB: bigint, sendAssetId: bigint, swapAmount: bigint | number]
    'getLpBalance(asset,asset,account)uint64': [assetIdA: bigint, assetIdB: bigint, account: Uint8Array | string]
    'getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)': [assetIdA: bigint, assetIdB: bigint]
    'poolExists(asset,asset)bool': [assetIdA: bigint, assetIdB: bigint]
  }
}

/**
 * The return type for each method
 */
export type MultiPoolAmmContractReturns = {
  'createPool(asset,asset)bool': boolean
  'addLiquidity(asset,asset,uint64,uint64)bool': boolean
  'removeLiquidity(asset,asset,uint64)bool': boolean
  'swap(asset,asset,asset,uint64)bool': boolean
  'getLpBalance(asset,asset,account)uint64': bigint
  'getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)': [bigint, bigint, bigint, bigint, bigint]
  'poolExists(asset,asset)bool': boolean
}

/**
 * Defines the types of available calls and state of the MultiPoolAmmContract smart contract.
 */
export type MultiPoolAmmContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createPool(asset,asset)bool' | 'createPool', {
      argsObj: MultiPoolAmmContractArgs['obj']['createPool(asset,asset)bool']
      argsTuple: MultiPoolAmmContractArgs['tuple']['createPool(asset,asset)bool']
      returns: MultiPoolAmmContractReturns['createPool(asset,asset)bool']
    }>
    & Record<'addLiquidity(asset,asset,uint64,uint64)bool' | 'addLiquidity', {
      argsObj: MultiPoolAmmContractArgs['obj']['addLiquidity(asset,asset,uint64,uint64)bool']
      argsTuple: MultiPoolAmmContractArgs['tuple']['addLiquidity(asset,asset,uint64,uint64)bool']
      returns: MultiPoolAmmContractReturns['addLiquidity(asset,asset,uint64,uint64)bool']
    }>
    & Record<'removeLiquidity(asset,asset,uint64)bool' | 'removeLiquidity', {
      argsObj: MultiPoolAmmContractArgs['obj']['removeLiquidity(asset,asset,uint64)bool']
      argsTuple: MultiPoolAmmContractArgs['tuple']['removeLiquidity(asset,asset,uint64)bool']
      returns: MultiPoolAmmContractReturns['removeLiquidity(asset,asset,uint64)bool']
    }>
    & Record<'swap(asset,asset,asset,uint64)bool' | 'swap', {
      argsObj: MultiPoolAmmContractArgs['obj']['swap(asset,asset,asset,uint64)bool']
      argsTuple: MultiPoolAmmContractArgs['tuple']['swap(asset,asset,asset,uint64)bool']
      returns: MultiPoolAmmContractReturns['swap(asset,asset,asset,uint64)bool']
    }>
    & Record<'getLpBalance(asset,asset,account)uint64' | 'getLpBalance', {
      argsObj: MultiPoolAmmContractArgs['obj']['getLpBalance(asset,asset,account)uint64']
      argsTuple: MultiPoolAmmContractArgs['tuple']['getLpBalance(asset,asset,account)uint64']
      returns: MultiPoolAmmContractReturns['getLpBalance(asset,asset,account)uint64']
    }>
    & Record<'getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)' | 'getPoolInfo', {
      argsObj: MultiPoolAmmContractArgs['obj']['getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)']
      argsTuple: MultiPoolAmmContractArgs['tuple']['getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)']
      returns: MultiPoolAmmContractReturns['getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'poolExists(asset,asset)bool' | 'poolExists', {
      argsObj: MultiPoolAmmContractArgs['obj']['poolExists(asset,asset)bool']
      argsTuple: MultiPoolAmmContractArgs['tuple']['poolExists(asset,asset)bool']
      returns: MultiPoolAmmContractReturns['poolExists(asset,asset)bool']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        feeNum: bigint
        feeDen: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        poolAssetA: Map<Uint8Array | string, bigint>
        poolAssetB: Map<Uint8Array | string, bigint>
        poolReserveA: Map<Uint8Array | string, bigint>
        poolReserveB: Map<Uint8Array | string, bigint>
        poolTotalLp: Map<Uint8Array | string, bigint>
        lpBalances: Map<Uint8Array | string, bigint>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type MultiPoolAmmContractSignatures = keyof MultiPoolAmmContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type MultiPoolAmmContractNonVoidMethodSignatures = keyof MultiPoolAmmContractTypes['methods'] extends infer T ? T extends keyof MultiPoolAmmContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the MultiPoolAmmContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends MultiPoolAmmContractSignatures> = MultiPoolAmmContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the MultiPoolAmmContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends MultiPoolAmmContractSignatures> = MultiPoolAmmContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = MultiPoolAmmContractTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = MultiPoolAmmContractTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type MultiPoolAmmContractCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type MultiPoolAmmContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: MultiPoolAmmContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the MultiPoolAmmContract smart contract
 */
export abstract class MultiPoolAmmContractParamsFactory {
  /**
   * Constructs a no op call for the createPool(asset,asset)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPool(params: CallParams<MultiPoolAmmContractArgs['obj']['createPool(asset,asset)bool'] | MultiPoolAmmContractArgs['tuple']['createPool(asset,asset)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createPool(asset,asset)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetIdA, params.args.assetIdB],
    }
  }
  /**
   * Constructs a no op call for the addLiquidity(asset,asset,uint64,uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addLiquidity(params: CallParams<MultiPoolAmmContractArgs['obj']['addLiquidity(asset,asset,uint64,uint64)bool'] | MultiPoolAmmContractArgs['tuple']['addLiquidity(asset,asset,uint64,uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addLiquidity(asset,asset,uint64,uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetIdA, params.args.assetIdB, params.args.assetAAmount, params.args.assetBAmount],
    }
  }
  /**
   * Constructs a no op call for the removeLiquidity(asset,asset,uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static removeLiquidity(params: CallParams<MultiPoolAmmContractArgs['obj']['removeLiquidity(asset,asset,uint64)bool'] | MultiPoolAmmContractArgs['tuple']['removeLiquidity(asset,asset,uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'removeLiquidity(asset,asset,uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetIdA, params.args.assetIdB, params.args.lpToBurn],
    }
  }
  /**
   * Constructs a no op call for the swap(asset,asset,asset,uint64)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static swap(params: CallParams<MultiPoolAmmContractArgs['obj']['swap(asset,asset,asset,uint64)bool'] | MultiPoolAmmContractArgs['tuple']['swap(asset,asset,asset,uint64)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'swap(asset,asset,asset,uint64)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetIdA, params.args.assetIdB, params.args.sendAssetId, params.args.swapAmount],
    }
  }
  /**
   * Constructs a no op call for the getLpBalance(asset,asset,account)uint64 ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getLpBalance(params: CallParams<MultiPoolAmmContractArgs['obj']['getLpBalance(asset,asset,account)uint64'] | MultiPoolAmmContractArgs['tuple']['getLpBalance(asset,asset,account)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getLpBalance(asset,asset,account)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetIdA, params.args.assetIdB, params.args.account],
    }
  }
  /**
   * Constructs a no op call for the getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPoolInfo(params: CallParams<MultiPoolAmmContractArgs['obj']['getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)'] | MultiPoolAmmContractArgs['tuple']['getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetIdA, params.args.assetIdB],
    }
  }
  /**
   * Constructs a no op call for the poolExists(asset,asset)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static poolExists(params: CallParams<MultiPoolAmmContractArgs['obj']['poolExists(asset,asset)bool'] | MultiPoolAmmContractArgs['tuple']['poolExists(asset,asset)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'poolExists(asset,asset)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.assetIdA, params.args.assetIdB],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the MultiPoolAMMContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class MultiPoolAmmContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `MultiPoolAmmContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new MultiPoolAmmContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new MultiPoolAmmContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the MultiPoolAMMContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: MultiPoolAmmContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new MultiPoolAmmContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MultiPoolAMMContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MultiPoolAMMContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the MultiPoolAMMContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new MultiPoolAmmContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the MultiPoolAMMContract smart contract
 */
export class MultiPoolAmmContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `MultiPoolAmmContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the MultiPoolAmmContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `MultiPoolAmmContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends MultiPoolAmmContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `MultiPoolAmmContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<MultiPoolAmmContractClient> {
    return new MultiPoolAmmContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `MultiPoolAmmContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<MultiPoolAmmContractClient> {
    return new MultiPoolAmmContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the MultiPoolAMMContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `createPool(asset,asset)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createPool: (params: CallParams<MultiPoolAmmContractArgs['obj']['createPool(asset,asset)bool'] | MultiPoolAmmContractArgs['tuple']['createPool(asset,asset)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MultiPoolAmmContractParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `addLiquidity(asset,asset,uint64,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addLiquidity: (params: CallParams<MultiPoolAmmContractArgs['obj']['addLiquidity(asset,asset,uint64,uint64)bool'] | MultiPoolAmmContractArgs['tuple']['addLiquidity(asset,asset,uint64,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MultiPoolAmmContractParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `removeLiquidity(asset,asset,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    removeLiquidity: (params: CallParams<MultiPoolAmmContractArgs['obj']['removeLiquidity(asset,asset,uint64)bool'] | MultiPoolAmmContractArgs['tuple']['removeLiquidity(asset,asset,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MultiPoolAmmContractParamsFactory.removeLiquidity(params))
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `swap(asset,asset,asset,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    swap: (params: CallParams<MultiPoolAmmContractArgs['obj']['swap(asset,asset,asset,uint64)bool'] | MultiPoolAmmContractArgs['tuple']['swap(asset,asset,asset,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MultiPoolAmmContractParamsFactory.swap(params))
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `getLpBalance(asset,asset,account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getLpBalance: (params: CallParams<MultiPoolAmmContractArgs['obj']['getLpBalance(asset,asset,account)uint64'] | MultiPoolAmmContractArgs['tuple']['getLpBalance(asset,asset,account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MultiPoolAmmContractParamsFactory.getLpBalance(params))
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPoolInfo: (params: CallParams<MultiPoolAmmContractArgs['obj']['getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)'] | MultiPoolAmmContractArgs['tuple']['getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MultiPoolAmmContractParamsFactory.getPoolInfo(params))
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `poolExists(asset,asset)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    poolExists: (params: CallParams<MultiPoolAmmContractArgs['obj']['poolExists(asset,asset)bool'] | MultiPoolAmmContractArgs['tuple']['poolExists(asset,asset)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(MultiPoolAmmContractParamsFactory.poolExists(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the MultiPoolAMMContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `createPool(asset,asset)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createPool: (params: CallParams<MultiPoolAmmContractArgs['obj']['createPool(asset,asset)bool'] | MultiPoolAmmContractArgs['tuple']['createPool(asset,asset)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MultiPoolAmmContractParamsFactory.createPool(params))
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `addLiquidity(asset,asset,uint64,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addLiquidity: (params: CallParams<MultiPoolAmmContractArgs['obj']['addLiquidity(asset,asset,uint64,uint64)bool'] | MultiPoolAmmContractArgs['tuple']['addLiquidity(asset,asset,uint64,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MultiPoolAmmContractParamsFactory.addLiquidity(params))
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `removeLiquidity(asset,asset,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    removeLiquidity: (params: CallParams<MultiPoolAmmContractArgs['obj']['removeLiquidity(asset,asset,uint64)bool'] | MultiPoolAmmContractArgs['tuple']['removeLiquidity(asset,asset,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MultiPoolAmmContractParamsFactory.removeLiquidity(params))
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `swap(asset,asset,asset,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    swap: (params: CallParams<MultiPoolAmmContractArgs['obj']['swap(asset,asset,asset,uint64)bool'] | MultiPoolAmmContractArgs['tuple']['swap(asset,asset,asset,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MultiPoolAmmContractParamsFactory.swap(params))
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `getLpBalance(asset,asset,account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getLpBalance: (params: CallParams<MultiPoolAmmContractArgs['obj']['getLpBalance(asset,asset,account)uint64'] | MultiPoolAmmContractArgs['tuple']['getLpBalance(asset,asset,account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MultiPoolAmmContractParamsFactory.getLpBalance(params))
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPoolInfo: (params: CallParams<MultiPoolAmmContractArgs['obj']['getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)'] | MultiPoolAmmContractArgs['tuple']['getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MultiPoolAmmContractParamsFactory.getPoolInfo(params))
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `poolExists(asset,asset)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    poolExists: (params: CallParams<MultiPoolAmmContractArgs['obj']['poolExists(asset,asset)bool'] | MultiPoolAmmContractArgs['tuple']['poolExists(asset,asset)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(MultiPoolAmmContractParamsFactory.poolExists(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the MultiPoolAMMContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `createPool(asset,asset)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createPool: async (params: CallParams<MultiPoolAmmContractArgs['obj']['createPool(asset,asset)bool'] | MultiPoolAmmContractArgs['tuple']['createPool(asset,asset)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MultiPoolAmmContractParamsFactory.createPool(params))
      return {...result, return: result.return as unknown as (undefined | MultiPoolAmmContractReturns['createPool(asset,asset)bool'])}
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `addLiquidity(asset,asset,uint64,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addLiquidity: async (params: CallParams<MultiPoolAmmContractArgs['obj']['addLiquidity(asset,asset,uint64,uint64)bool'] | MultiPoolAmmContractArgs['tuple']['addLiquidity(asset,asset,uint64,uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MultiPoolAmmContractParamsFactory.addLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | MultiPoolAmmContractReturns['addLiquidity(asset,asset,uint64,uint64)bool'])}
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `removeLiquidity(asset,asset,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    removeLiquidity: async (params: CallParams<MultiPoolAmmContractArgs['obj']['removeLiquidity(asset,asset,uint64)bool'] | MultiPoolAmmContractArgs['tuple']['removeLiquidity(asset,asset,uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MultiPoolAmmContractParamsFactory.removeLiquidity(params))
      return {...result, return: result.return as unknown as (undefined | MultiPoolAmmContractReturns['removeLiquidity(asset,asset,uint64)bool'])}
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `swap(asset,asset,asset,uint64)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    swap: async (params: CallParams<MultiPoolAmmContractArgs['obj']['swap(asset,asset,asset,uint64)bool'] | MultiPoolAmmContractArgs['tuple']['swap(asset,asset,asset,uint64)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MultiPoolAmmContractParamsFactory.swap(params))
      return {...result, return: result.return as unknown as (undefined | MultiPoolAmmContractReturns['swap(asset,asset,asset,uint64)bool'])}
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `getLpBalance(asset,asset,account)uint64` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getLpBalance: async (params: CallParams<MultiPoolAmmContractArgs['obj']['getLpBalance(asset,asset,account)uint64'] | MultiPoolAmmContractArgs['tuple']['getLpBalance(asset,asset,account)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MultiPoolAmmContractParamsFactory.getLpBalance(params))
      return {...result, return: result.return as unknown as (undefined | MultiPoolAmmContractReturns['getLpBalance(asset,asset,account)uint64'])}
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPoolInfo: async (params: CallParams<MultiPoolAmmContractArgs['obj']['getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)'] | MultiPoolAmmContractArgs['tuple']['getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MultiPoolAmmContractParamsFactory.getPoolInfo(params))
      return {...result, return: result.return as unknown as (undefined | MultiPoolAmmContractReturns['getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the MultiPoolAMMContract smart contract using the `poolExists(asset,asset)bool` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    poolExists: async (params: CallParams<MultiPoolAmmContractArgs['obj']['poolExists(asset,asset)bool'] | MultiPoolAmmContractArgs['tuple']['poolExists(asset,asset)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(MultiPoolAmmContractParamsFactory.poolExists(params))
      return {...result, return: result.return as unknown as (undefined | MultiPoolAmmContractReturns['poolExists(asset,asset)bool'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new MultiPoolAmmContractClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current MultiPoolAMMContract app
   */
  state = {
    /**
     * Methods to access global state for the current MultiPoolAMMContract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          feeNum: result.FEE_NUM,
          feeDen: result.FEE_DEN,
        }
      },
      /**
       * Get the current value of the FEE_NUM key in global state
       */
      feeNum: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("FEE_NUM")) as bigint | undefined },
      /**
       * Get the current value of the FEE_DEN key in global state
       */
      feeDen: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("FEE_DEN")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current MultiPoolAMMContract app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the poolAssetA map in box state
       */
      poolAssetA: {
        /**
         * Get all current values of the poolAssetA map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, bigint>> => { return (await this.appClient.state.box.getMap("poolAssetA")) as Map<Uint8Array, bigint> },
        /**
         * Get a current value of the poolAssetA map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("poolAssetA", key) as bigint | undefined },
      },
      /**
       * Get values from the poolAssetB map in box state
       */
      poolAssetB: {
        /**
         * Get all current values of the poolAssetB map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, bigint>> => { return (await this.appClient.state.box.getMap("poolAssetB")) as Map<Uint8Array, bigint> },
        /**
         * Get a current value of the poolAssetB map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("poolAssetB", key) as bigint | undefined },
      },
      /**
       * Get values from the poolReserveA map in box state
       */
      poolReserveA: {
        /**
         * Get all current values of the poolReserveA map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, bigint>> => { return (await this.appClient.state.box.getMap("poolReserveA")) as Map<Uint8Array, bigint> },
        /**
         * Get a current value of the poolReserveA map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("poolReserveA", key) as bigint | undefined },
      },
      /**
       * Get values from the poolReserveB map in box state
       */
      poolReserveB: {
        /**
         * Get all current values of the poolReserveB map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, bigint>> => { return (await this.appClient.state.box.getMap("poolReserveB")) as Map<Uint8Array, bigint> },
        /**
         * Get a current value of the poolReserveB map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("poolReserveB", key) as bigint | undefined },
      },
      /**
       * Get values from the poolTotalLp map in box state
       */
      poolTotalLp: {
        /**
         * Get all current values of the poolTotalLp map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, bigint>> => { return (await this.appClient.state.box.getMap("poolTotalLp")) as Map<Uint8Array, bigint> },
        /**
         * Get a current value of the poolTotalLp map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("poolTotalLp", key) as bigint | undefined },
      },
      /**
       * Get values from the lpBalances map in box state
       */
      lpBalances: {
        /**
         * Get all current values of the lpBalances map in box state
         */
        getMap: async (): Promise<Map<Uint8Array, bigint>> => { return (await this.appClient.state.box.getMap("lpBalances")) as Map<Uint8Array, bigint> },
        /**
         * Get a current value of the lpBalances map by key from box state
         */
        value: async (key: Uint8Array | string): Promise<bigint | undefined> => { return await this.appClient.state.box.getMapValue("lpBalances", key) as bigint | undefined },
      },
    },
  }

  public newGroup(): MultiPoolAmmContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createPool(asset,asset)bool method call against the MultiPoolAMMContract contract
       */
      createPool(params: CallParams<MultiPoolAmmContractArgs['obj']['createPool(asset,asset)bool'] | MultiPoolAmmContractArgs['tuple']['createPool(asset,asset)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPool(params)))
        resultMappers.push((v) => client.decodeReturnValue('createPool(asset,asset)bool', v))
        return this
      },
      /**
       * Add a addLiquidity(asset,asset,uint64,uint64)bool method call against the MultiPoolAMMContract contract
       */
      addLiquidity(params: CallParams<MultiPoolAmmContractArgs['obj']['addLiquidity(asset,asset,uint64,uint64)bool'] | MultiPoolAmmContractArgs['tuple']['addLiquidity(asset,asset,uint64,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addLiquidity(params)))
        resultMappers.push((v) => client.decodeReturnValue('addLiquidity(asset,asset,uint64,uint64)bool', v))
        return this
      },
      /**
       * Add a removeLiquidity(asset,asset,uint64)bool method call against the MultiPoolAMMContract contract
       */
      removeLiquidity(params: CallParams<MultiPoolAmmContractArgs['obj']['removeLiquidity(asset,asset,uint64)bool'] | MultiPoolAmmContractArgs['tuple']['removeLiquidity(asset,asset,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.removeLiquidity(params)))
        resultMappers.push((v) => client.decodeReturnValue('removeLiquidity(asset,asset,uint64)bool', v))
        return this
      },
      /**
       * Add a swap(asset,asset,asset,uint64)bool method call against the MultiPoolAMMContract contract
       */
      swap(params: CallParams<MultiPoolAmmContractArgs['obj']['swap(asset,asset,asset,uint64)bool'] | MultiPoolAmmContractArgs['tuple']['swap(asset,asset,asset,uint64)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.swap(params)))
        resultMappers.push((v) => client.decodeReturnValue('swap(asset,asset,asset,uint64)bool', v))
        return this
      },
      /**
       * Add a getLpBalance(asset,asset,account)uint64 method call against the MultiPoolAMMContract contract
       */
      getLpBalance(params: CallParams<MultiPoolAmmContractArgs['obj']['getLpBalance(asset,asset,account)uint64'] | MultiPoolAmmContractArgs['tuple']['getLpBalance(asset,asset,account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getLpBalance(params)))
        resultMappers.push((v) => client.decodeReturnValue('getLpBalance(asset,asset,account)uint64', v))
        return this
      },
      /**
       * Add a getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64) method call against the MultiPoolAMMContract contract
       */
      getPoolInfo(params: CallParams<MultiPoolAmmContractArgs['obj']['getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)'] | MultiPoolAmmContractArgs['tuple']['getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPoolInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a poolExists(asset,asset)bool method call against the MultiPoolAMMContract contract
       */
      poolExists(params: CallParams<MultiPoolAmmContractArgs['obj']['poolExists(asset,asset)bool'] | MultiPoolAmmContractArgs['tuple']['poolExists(asset,asset)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.poolExists(params)))
        resultMappers.push((v) => client.decodeReturnValue('poolExists(asset,asset)bool', v))
        return this
      },
      /**
       * Add a clear state call to the MultiPoolAMMContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as MultiPoolAmmContractComposer
  }
}
export type MultiPoolAmmContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createPool(asset,asset)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPool(params?: CallParams<MultiPoolAmmContractArgs['obj']['createPool(asset,asset)bool'] | MultiPoolAmmContractArgs['tuple']['createPool(asset,asset)bool']>): MultiPoolAmmContractComposer<[...TReturns, MultiPoolAmmContractReturns['createPool(asset,asset)bool'] | undefined]>

  /**
   * Calls the addLiquidity(asset,asset,uint64,uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addLiquidity(params?: CallParams<MultiPoolAmmContractArgs['obj']['addLiquidity(asset,asset,uint64,uint64)bool'] | MultiPoolAmmContractArgs['tuple']['addLiquidity(asset,asset,uint64,uint64)bool']>): MultiPoolAmmContractComposer<[...TReturns, MultiPoolAmmContractReturns['addLiquidity(asset,asset,uint64,uint64)bool'] | undefined]>

  /**
   * Calls the removeLiquidity(asset,asset,uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  removeLiquidity(params?: CallParams<MultiPoolAmmContractArgs['obj']['removeLiquidity(asset,asset,uint64)bool'] | MultiPoolAmmContractArgs['tuple']['removeLiquidity(asset,asset,uint64)bool']>): MultiPoolAmmContractComposer<[...TReturns, MultiPoolAmmContractReturns['removeLiquidity(asset,asset,uint64)bool'] | undefined]>

  /**
   * Calls the swap(asset,asset,asset,uint64)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  swap(params?: CallParams<MultiPoolAmmContractArgs['obj']['swap(asset,asset,asset,uint64)bool'] | MultiPoolAmmContractArgs['tuple']['swap(asset,asset,asset,uint64)bool']>): MultiPoolAmmContractComposer<[...TReturns, MultiPoolAmmContractReturns['swap(asset,asset,asset,uint64)bool'] | undefined]>

  /**
   * Calls the getLpBalance(asset,asset,account)uint64 ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getLpBalance(params?: CallParams<MultiPoolAmmContractArgs['obj']['getLpBalance(asset,asset,account)uint64'] | MultiPoolAmmContractArgs['tuple']['getLpBalance(asset,asset,account)uint64']>): MultiPoolAmmContractComposer<[...TReturns, MultiPoolAmmContractReturns['getLpBalance(asset,asset,account)uint64'] | undefined]>

  /**
   * Calls the getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPoolInfo(params?: CallParams<MultiPoolAmmContractArgs['obj']['getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)'] | MultiPoolAmmContractArgs['tuple']['getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)']>): MultiPoolAmmContractComposer<[...TReturns, MultiPoolAmmContractReturns['getPoolInfo(asset,asset)(uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the poolExists(asset,asset)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  poolExists(params?: CallParams<MultiPoolAmmContractArgs['obj']['poolExists(asset,asset)bool'] | MultiPoolAmmContractArgs['tuple']['poolExists(asset,asset)bool']>): MultiPoolAmmContractComposer<[...TReturns, MultiPoolAmmContractReturns['poolExists(asset,asset)bool'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the MultiPoolAMMContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): MultiPoolAmmContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): MultiPoolAmmContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<MultiPoolAmmContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<MultiPoolAmmContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<MultiPoolAmmContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<MultiPoolAmmContractComposerResults<TReturns>>
}
export type MultiPoolAmmContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

